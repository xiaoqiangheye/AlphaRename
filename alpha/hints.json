[
    "filter",
    "reduce",
    "foldr",
    "zip",
    "unzip",
    "head",
    "tail",
    "init",
    "last",
    "take",
    "drop",
    "splitAt",
    "takeWhile",
    "dropWhile",
    "span",
    "break",
    "elem",
    "notElem",
    "lookup",
    "maybe",
    "concat",
    "intersperse",
    "intercalate",
    "transpose",
    "partition",
    "groupBy",
    "sortBy",
    "maximumBy",
    "minimumBy",
    "scanl",
    "scanr",
    "iterate",
    "repeat",
    "replicate",
    "cycle",
    "compose",
    "curry",
    "uncurry",
    "flip",
    "const",
    "apply",
    "all",
    "any",
    "sum",
    "product",
    "length",
    "null",
    "reverse",
    "and",
    "or",
    "concatMap",
    "foldl1",
    "foldr1",
    "maximum",
    "minimum",
    "zipWith",
    "zipWith3",
    "zipWith4",
    "zipWith5",
    "zipWith6",
    "zipWith7",
    "unzip3",
    "unzip4",
    "unzip5",
    "unzip6",
    "unzip7",
    "lines",
    "words",
    "unlines",
    "unwords",
    "show",
    "read",
    "succ",
    "pred",
    "enumFrom",
    "enumFromThen",
    "enumFromTo",
    "enumFromThenTo",
    "fst",
    "snd",
    "curryN",
    "uncurryN",
    "until",
    "asTypeOf",
    "error",
    "undefined",
    "seq",
    "mapM",
    "mapM_",
    "forM",
    "forM_",
    "sequence",
    "sequence_",
    "foldM",
    "foldM_",
    "filterM",
    "zipWithM",
    "zipWithM_",
    "replicateM",
    "replicateM_",
    "List.map (fun x -> x + 1) [1; 2; 3]",
    "List.fold_left (fun acc x -> acc + x) 0 [1; 2; 3]",
    "String.concat \", \" [\"Hello\"; \"World\"]",
    "List.filter (fun x -> x mod 2 = 0) [1; 2; 3; 4]",
    "List.sort compare [3; 1; 4; 2]",
    "Option.map (fun x -> x * 2) (Some 10)",
    "Result.bind (Result.ok 10) (fun x -> Result.ok (x + 5))",
    "List.iter (fun x -> print_int x) [1; 2; 3]",
    "let rec factorial n = if n = 0 then 1 else n * factorial (n - 1)",
    "String.length \"Hello\"",
    "List.length [1; 2; 3]",
    "List.append [1; 2] [3; 4]",
    "List.rev [1; 2; 3]",
    "List.hd [1; 2; 3]",
    "List.tl [1; 2; 3]"
  ]