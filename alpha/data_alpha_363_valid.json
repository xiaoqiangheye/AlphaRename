[
 {
  "target_argument": "b",
  "change_to": "x",
  "original_function": "def fun1(b: bool):\n  if b:\n    a = 1\n  else:\n    a = 2\n  return (lambda b: b + a)(True)",
  "changed_function": "def fun1(x: bool):\n  if x:\n    a = 1\n  else:\n    a = 2\n  return (lambda b: b + a)(True)",
  "function_name": "fun1",
  "inputs": [
   "True",
   "False"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "c",
  "original_function": "def fun2(b: int):\n  a = [1, 2]\n  return (lambda b: b + a[0])(b)",
  "changed_function": "def fun2(c: int):\n  a = [1, 2]\n  return (lambda b: b + a[0])(c)",
  "function_name": "fun2",
  "inputs": [
   "5",
   "10",
   "20",
   "1",
   "0"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def fun3(a: str):\n  return (lambda b: b + a)(a)",
  "changed_function": "def fun3(b: str):\n  return (lambda a: a + b)(b)",
  "function_name": "fun3",
  "inputs": [
   "\"Hello\"",
   "\"World\"",
   "\"Python\"",
   "\"Code\"",
   "\"Example\""
  ]
 },
 {
  "target_argument": "b",
  "change_to": "a",
  "original_function": "def fun4(b: int):\n  c = 1\n  return (lambda a: a + c)(b)",
  "changed_function": "def fun4(a: int):\n  c = 1\n  return (lambda b: b + c)(a)",
  "function_name": "fun4",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "c",
  "change_to": "z",
  "original_function": "def fun6(c: bool):\n  a = 1\n  b = 2\n  return (lambda c: a + c)(c)",
  "changed_function": "def fun6(z: bool):\n  a = 1\n  b = 2\n  return (lambda c: a + c)(z)",
  "function_name": "fun6",
  "inputs": [
   "True",
   "False"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def fun7(a: str):\n  return (lambda b: b + a)(a)",
  "changed_function": "def fun7(b: str):\n  return (lambda a: a + b)(b)",
  "function_name": "fun7",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"code\"",
   "\"example\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def fun8(a: list):\n  return (lambda b: b + a)(a)",
  "changed_function": "def fun8(b: list):\n  return (lambda a: a + b)(b)",
  "function_name": "fun8",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "c",
  "original_function": "def fun9(x: bool):\n  a = 1\n  b = 2\n  return (lambda x: a + x)(x)",
  "changed_function": "def fun9(c: bool):\n  a = 1\n  b = 2\n  return (lambda x: a + x)(c)",
  "function_name": "fun9",
  "inputs": [
   "True",
   "False"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "c",
  "original_function": "def fun10(a: int):\n  b = a + 1\n  return (lambda a: a + b)(a)",
  "changed_function": "def fun10(c: int):\n  b = c + 1\n  return (lambda a: a + b)(c)",
  "function_name": "fun10",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "a",
  "original_function": "def foo(f: int):\n  a = 2\n  g = lambda x: x + a\n  h = lambda y: y + 1\n  return g(f) + h(a)",
  "changed_function": "def foo(a: int):\n  b = 2\n  g = lambda x: x + b\n  h = lambda y: y + 1\n  return g(a) + h(b)",
  "function_name": "foo",
  "inputs": [
   "5",
   "10",
   "20",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "z",
  "original_function": "def bar(y: int):\n  x = lambda z: z * 2\n  return x(y)",
  "changed_function": "def bar(y: int):\n  x = lambda z: z * 2\n  return x(y)",
  "function_name": "bar",
  "inputs": [
   "2",
   "1",
   "3",
   "5",
   "10"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "a",
  "original_function": "def baz(p: int):\n  a = 2\n  q = lambda p: a * p\n  return q(p)",
  "changed_function": "def baz(a: int):\n  b = 2\n  q = lambda p: b * p\n  return q(a)",
  "function_name": "baz",
  "inputs": [
   "4",
   "2",
   "8",
   "16",
   "32"
  ]
 },
 {
  "target_argument": "i",
  "change_to": "k",
  "original_function": "def qux(i: bool):\n  j = 1\n  k = 2\n  if i:\n    return j * k\n  else:\n    return k * j",
  "changed_function": "def qux(k: bool):\n  j = 1\n  l = 2\n  if k:\n    return j * l\n  else:\n    return l * j",
  "function_name": "qux",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "False"
  ]
 },
 {
  "target_argument": "q",
  "change_to": "z",
  "original_function": "def quux(q: str):\n  s = 'hello'\n  r = lambda q: q + s\n  return r(q)",
  "changed_function": "def quux(z: str):\n  s = 'hello'\n  r = lambda q: q + s\n  return r(z)",
  "function_name": "quux",
  "inputs": [
   "'world'",
   "'python'",
   "'programming'",
   "'language'",
   "'model'"
  ]
 },
 {
  "target_argument": "t",
  "change_to": "s",
  "original_function": "def corge(t: int):\n  s = lambda x: x * 2\n  r = t * 2\n  return s(r)",
  "changed_function": "def corge(s: int):\n  t = lambda x: x * 2\n  r = s * 2\n  return t(r)",
  "function_name": "corge",
  "inputs": [
   "2",
   "4",
   "6",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "v",
  "change_to": "n",
  "original_function": "def grault(v: int):\n  m = lambda n: n * v\n  return m(v)",
  "changed_function": "def grault(n: int):\n  m = lambda v: v * n\n  return m(n)",
  "function_name": "grault",
  "inputs": [
   "10",
   "15",
   "20",
   "25",
   "30"
  ]
 },
 {
  "target_argument": "w",
  "change_to": "a",
  "original_function": "def garply(w: bool):\n  a = 1\n  b = 2\n  if w:\n    return a + b\n  else:\n    return b * a",
  "changed_function": "def garply(a: bool):\n  b = 1\n  c = 2\n  if a:\n    return b + c\n  else:\n    return c * b",
  "function_name": "garply",
  "inputs": [
   "False",
   "True",
   "False",
   "True",
   "False"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "n",
  "original_function": "def waldo(z: int):\n  n = 10\n  k = lambda z: z * n\n  return k(z)",
  "changed_function": "def waldo(n: int):\n  m = 10\n  k = lambda z: z * m\n  return k(n)",
  "function_name": "waldo",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def fred(x: str):\n  y = 'hello'\n  z = lambda x: x + y\n  return z(x)",
  "changed_function": "def fred(y: str):\n  z = 'hello'\n  a = lambda x: x + z\n  return a(y)",
  "function_name": "fred",
  "inputs": [
   "'world'",
   "'python'",
   "'programming'",
   "'language'",
   "'model'"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def func1(s: str):\n  l = []\n  for i in range(len(s)):\n    if s[i].isupper():\n      l.append(s[i].lower())\n  return ''.join(l)",
  "changed_function": "def func1(t: str):\n  l = []\n  for i in range(len(t)):\n    if t[i].isupper():\n      l.append(t[i].lower())\n  return ''.join(l)",
  "function_name": "func1",
  "inputs": [
   "'HeLlO'",
   "'wOrLd'",
   "'ThIsIsATeSt'",
   "'aBcDeFg'",
   "'123456'"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func2(x: int):\n  def inner(x: int):\n    return x * 2\n  return inner(x + 1)",
  "changed_function": "def func2(y: int):\n  def inner(x: int):\n    return x * 2\n  return inner(y + 1)",
  "function_name": "func2",
  "inputs": [
   "5",
   "10",
   "20",
   "30",
   "1"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "t",
  "original_function": "def func3(text: str):\n  def inner(text: str):\n    return text.upper()\n  return inner(text[:3])",
  "changed_function": "def func3(t: str):\n  def inner(text: str):\n    return text.upper()\n  return inner(t[:3])",
  "function_name": "func3",
  "inputs": [
   "'hello world'",
   "'this is a test'",
   "'python'",
   "'programming'",
   "'coding'"
  ]
 },
 {
  "target_argument": "list",
  "change_to": "l",
  "original_function": "def func5(list: list):\n  return [i * 2 for i in list]",
  "changed_function": "def func5(l: list):\n  return [i * 2 for i in l]",
  "function_name": "func5",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "string",
  "change_to": "s",
  "original_function": "def func6(string: str):\n  words = string.split()\n  return ' '.join(words[::-1])",
  "changed_function": "def func6(s: str):\n  words = s.split()\n  return ' '.join(words[::-1])",
  "function_name": "func6",
  "inputs": [
   "'hello world'",
   "'this is a test'",
   "'python programming'",
   "'coding language'",
   "'machine learning'"
  ]
 },
 {
  "target_argument": "numbers",
  "change_to": "n",
  "original_function": "def func7(numbers: list):\n  return sum(numbers) / len(numbers)",
  "changed_function": "def func7(n: list):\n  return sum(n) / len(n)",
  "function_name": "func7",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[6, 7, 8, 9, 10]",
   "[11, 12, 13, 14, 15]",
   "[16, 17, 18, 19, 20]",
   "[21, 22, 23, 24, 25]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def func8(n: int):\n  def inner(n: int):\n    return n * 2\n  return inner(n + 1)",
  "changed_function": "def func8(x: int):\n  def inner(n: int):\n    return n * 2\n  return inner(x + 1)",
  "function_name": "func8",
  "inputs": [
   "10",
   "15",
   "20",
   "25",
   "30"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def func9(s: str):\n  return s.replace(' ', '')",
  "changed_function": "def func9(t: str):\n  return t.replace(' ', '')",
  "function_name": "func9",
  "inputs": [
   "'hello world'",
   "'this is a test'",
   "'python programming'",
   "'coding language'",
   "'machine learning'"
  ]
 },
 {
  "target_argument": "str1",
  "change_to": "s",
  "original_function": "def func10(str1: str):\n  def inner(str1: str):\n    return str1[::-1]\n  return inner(str1)",
  "changed_function": "def func10(s: str):\n  def inner(str1: str):\n    return str1[::-1]\n  return inner(s)",
  "function_name": "func10",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'coding'"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def qux(x: bool):\n  y = True\n  return (lambda x: x and y)(lambda z: x or z)",
  "changed_function": "def qux(y: bool):\n  z = True\n  return (lambda x: x and z)(lambda w: y or w)",
  "function_name": "qux",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "c",
  "original_function": "def quuxbaz(b: bool):\n  c = True\n  return (lambda b: b and c)(lambda x: x or b)",
  "changed_function": "def quuxbaz(c: bool):\n  d = True\n  return (lambda b: b and d)(lambda x: x or c)",
  "function_name": "quuxbaz",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def find_min(x: int):\n  y = x\n  for i in range(1, x):\n    if i < y:\n      y = i\n  return y",
  "changed_function": "def find_min(y: int):\n  z = y\n  for i in range(1, y):\n    if i < z:\n      z = i\n  return z",
  "function_name": "find_min",
  "inputs": [
   "5",
   "10",
   "1",
   "0",
   "-3"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def sum_squares(n: int):\n  total = 0\n  for i in range(1, n+1):\n    total += i*i\n  return total",
  "changed_function": "def sum_squares(m: int):\n  total = 0\n  for i in range(1, m+1):\n    total += i*i\n  return total",
  "function_name": "sum_squares",
  "inputs": [
   "5",
   "10",
   "3",
   "1",
   "7"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def reverse_string(x: str):\n  reversed_string = ''\n  for i in range(len(x)-1, -1, -1):\n    reversed_string += x[i]\n  return reversed_string",
  "changed_function": "def reverse_string(y: str):\n  reversed_string = ''\n  for i in range(len(y)-1, -1, -1):\n    reversed_string += y[i]\n  return reversed_string",
  "function_name": "reverse_string",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'data'"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def count_vowels(x: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for i in x:\n    if i in vowels:\n      count += 1\n  return count",
  "changed_function": "def count_vowels(y: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for i in y:\n    if i in vowels:\n      count += 1\n  return count",
  "function_name": "count_vowels",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'data'"
  ]
 },
 {
  "target_argument": "list",
  "change_to": "array",
  "original_function": "def find_max(list: list):\n  max_value = list[0]\n  for i in range(1, len(list)):\n    if list[i] > max_value:\n      max_value = list[i]\n  return max_value",
  "changed_function": "def find_max(array: list):\n  max_value = array[0]\n  for i in range(1, len(array)):\n    if array[i] > max_value:\n      max_value = array[i]\n  return max_value",
  "function_name": "find_max",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 20, 30, 40, 50]",
   "[1, 1, 1, 1, 1]",
   "[5, 4, 3, 2, 1]",
   "[-1, -2, -3, -4, -5]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def is_prime(n: int):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5)+1):\n    if n % i == 0:\n      return False\n  return True",
  "changed_function": "def is_prime(k: int):\n  if k <= 1:\n    return False\n  for i in range(2, int(k**0.5)+1):\n    if k % i == 0:\n      return False\n  return True",
  "function_name": "is_prime",
  "inputs": [
   "2",
   "7",
   "11",
   "15",
   "23"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def remove_duplicates(s: str):\n  t = ''\n  for i in s:\n    if i not in t:\n      t += i\n  return t",
  "changed_function": "def remove_duplicates(t: str):\n  u = ''\n  for i in t:\n    if i not in u:\n      u += i\n  return u",
  "function_name": "remove_duplicates",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'data'"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "z",
  "original_function": "def func1(s: str):\n    k = s\n    l = lambda s: s[0]\n    return k + l(s)",
  "changed_function": "def func1(z: str):\n    k = z\n    l = lambda s: s[0]\n    return k + l(z)",
  "function_name": "func1",
  "inputs": [
   "'abc'",
   "'def'",
   "'ghi'",
   "'jkl'",
   "'mno'"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def func3(s: str):\n    s = s.lower()\n    return (lambda s: s.upper())(s)",
  "changed_function": "def func3(a: str):\n    a = a.lower()\n    return (lambda s: s.upper())(a)",
  "function_name": "func3",
  "inputs": [
   "'ABC'",
   "'DEF'",
   "'GHI'",
   "'JKL'",
   "'MNO'"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "s",
  "original_function": "def func5(a: int):\n    return [a * i for i in range(1, a + 1)]",
  "changed_function": "def func5(s: int):\n    return [s * i for i in range(1, s + 1)]",
  "function_name": "func5",
  "inputs": [
   "3",
   "5",
   "7",
   "9",
   "11"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "z",
  "original_function": "def func6(y: list):\n    if y == []:\n        return 0\n    else:\n        return len(y) + y[0]",
  "changed_function": "def func6(z: list):\n    if z == []:\n        return 0\n    else:\n        return len(z) + z[0]",
  "function_name": "func6",
  "inputs": [
   "[1,2,3]",
   "[]",
   "[4,5,6]",
   "[7,8,9]",
   "[10,11,12]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "b",
  "original_function": "def func8(x: int):\n    x = x * 2\n    return (lambda x: x + 1)(x)",
  "changed_function": "def func8(b: int):\n    b = b * 2\n    return (lambda x: x + 1)(b)",
  "function_name": "func8",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "w",
  "original_function": "def func9(x: str):\n    return (lambda x: x.lower())(x.upper())",
  "changed_function": "def func9(w: str):\n    return (lambda x: x.lower())(w.upper())",
  "function_name": "func9",
  "inputs": [
   "'AbC'",
   "'DeF'",
   "'GhI'",
   "'JkL'",
   "'MnO'"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "s",
  "original_function": "def func10(p: bool):\n    if p:\n        q = 1\n    else:\n        q = 0\n    return q + (lambda p: p * 2)(p)",
  "changed_function": "def func10(s: bool):\n    if s:\n        q = 1\n    else:\n        q = 0\n    return q + (lambda p: p * 2)(s)",
  "function_name": "func10",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "n",
  "original_function": "def add_nums(l: list):\n  a = len(l)\n  b = l[0]\n  for i in l:\n    b += i\n  return b / a",
  "changed_function": "def add_nums(n: list):\n  a = len(n)\n  b = n[0]\n  for i in n:\n    b += i\n  return b / a",
  "function_name": "add_nums",
  "inputs": [
   "[-1, -2, -3, -4]",
   "[10, 20, 30, 40]",
   "[1, 2, 3, 4]",
   "[3, 4, 5]",
   "[1, 1, 1, 1]"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "a",
  "original_function": "def check_even(f: int):\n  a = 0\n  while a < f:\n    if a % 2 == 0:\n      a += 1\n    else:\n      return False\n  return True",
  "changed_function": "def check_even(a: int):\n  b = 0\n  while b < a:\n    if b % 2 == 0:\n      b += 1\n    else:\n      return False\n  return True",
  "function_name": "check_even",
  "inputs": [
   "20",
   "21",
   "15",
   "6",
   "8"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "y",
  "original_function": "def find_max(m: list):\n  n = 0\n  for i in m:\n    if i > n:\n      n = i\n  return n",
  "changed_function": "def find_max(y: list):\n  n = 0\n  for i in y:\n    if i > n:\n      n = i\n  return n",
  "function_name": "find_max",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[-1, -2, -3, -4, -5]",
   "[1, 1, 1, 1, 1]",
   "[0, 1, 2, 3, 4]",
   "[100, 1, 2, 3, 4]"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "r",
  "original_function": "def remove_duplicates(l: list):\n  k = set(l)\n  return len(l) != len(k)",
  "changed_function": "def remove_duplicates(r: list):\n  k = set(r)\n  return len(r) != len(k)",
  "function_name": "remove_duplicates",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[1, 1, 2, 2, 3, 3]",
   "[1, 1, 1, 1, 1]",
   "[1, 2, 2, 3, 4]",
   "[1, 2, 1, 2, 3]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def count_ones(n: list):\n  a = 0\n  for i in n:\n    if i == 1:\n      a += 1\n  return a",
  "changed_function": "def count_ones(m: list):\n  a = 0\n  for i in m:\n    if i == 1:\n      a += 1\n  return a",
  "function_name": "count_ones",
  "inputs": [
   "[0, 1, 0, 1, 0]",
   "[1, 1, 1, 1, 1]",
   "[0, 0, 0, 0, 0]",
   "[1, 0, 1, 0, 1]",
   "[0, 1, 0, 1, 1]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "p",
  "original_function": "def is_palindrome(a: str):\n  b = len(a)\n  c = 0\n  while c < b:\n    if a[c] != a[b - c - 1]:\n      return False\n    c += 1\n  return True",
  "changed_function": "def is_palindrome(p: str):\n  b = len(p)\n  c = 0\n  while c < b:\n    if p[c] != p[b - c - 1]:\n      return False\n    c += 1\n  return True",
  "function_name": "is_palindrome",
  "inputs": [
   "\"racecar\"",
   "\"hello\"",
   "\"madam\"",
   "\"noon\"",
   "\"abccba\""
  ]
 },
 {
  "target_argument": "s",
  "change_to": "w",
  "original_function": "def reverse_string(s: str):\n  a = len(s)\n  r = \"\"\n  while a > 0:\n    r += s[a - 1]\n    a -= 1\n  return r",
  "changed_function": "def reverse_string(w: str):\n  a = len(w)\n  r = \"\"\n  while a > 0:\n    r += w[a - 1]\n    a -= 1\n  return r",
  "function_name": "reverse_string",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"javascript\""
  ]
 },
 {
  "target_argument": "d",
  "change_to": "t",
  "original_function": "def sum_digits(d: int):\n  s = 0\n  while d > 0:\n    s += d % 10\n    d = d // 10\n  return s",
  "changed_function": "def sum_digits(t: int):\n  s = 0\n  while t > 0:\n    s += t % 10\n    t = t // 10\n  return s",
  "function_name": "sum_digits",
  "inputs": [
   "12345",
   "67890",
   "10000",
   "99999",
   "123456"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "n",
  "original_function": "def check_substring(s: str, t: str):\n  a = len(s)\n  b = len(t)\n  if a < b:\n    return False\n  for i in range(a - b + 1):\n    if s[i:i + b] == t:\n      return True\n  return False",
  "changed_function": "def check_substring(n: str, t: str):\n  a = len(n)\n  b = len(t)\n  if a < b:\n    return False\n  for i in range(a - b + 1):\n    if n[i:i + b] == t:\n      return True\n  return False",
  "function_name": "check_substring",
  "inputs": [
   "\"hello world\", \"world\"",
   "\"programming\", \"gram\"",
   "\"python\", \"py\"",
   "\"javascript\", \"java\"",
   "\"data science\", \"science\""
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "n",
  "original_function": "def find_second_largest(arr: list):\n  if len(arr) < 2:\n    return None\n  a = max(arr)\n  b = arr[0]\n  for i in arr:\n    if i != a and i > b:\n      b = i\n  if b == arr[0]:\n    return None\n  return b",
  "changed_function": "def find_second_largest(n: list):\n  if len(n) < 2:\n    return None\n  a = max(n)\n  b = n[0]\n  for i in n:\n    if i != a and i > b:\n      b = i\n  if b == n[0]:\n    return None\n  return b",
  "function_name": "find_second_largest",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 20, 30, 40, 50]",
   "[1, 1, 1, 1, 1]",
   "[0, 1, 2, 3, 4]",
   "[100, 1, 2, 3, 4]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def foo(a: int):\n  b = 1\n  c = a + b\n  if c > 2:\n    return a + 1\n  else:\n    return b + a",
  "changed_function": "def foo(b: int):\n  d = 1\n  c = b + d\n  if c > 2:\n    return b + 1\n  else:\n    return d + b",
  "function_name": "foo",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "c",
  "original_function": "def bar(a: bool):\n  b = False\n  if a:\n    b = True\n  else:\n    b = False\n  return (lambda a: a and b)(True)",
  "changed_function": "def bar(c: bool):\n  b = False\n  if c:\n    b = True\n  else:\n    b = False\n  return (lambda d: d and b)(True)",
  "function_name": "bar",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "a",
  "original_function": "def baz(b: int):\n  a = b\n  return (lambda b: b * a)(a)",
  "changed_function": "def baz(a: int):\n  b = a\n  return (lambda c: c * b)(b)",
  "function_name": "baz",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def qux(a: str):\n  if len(a) > 3:\n    return a[0]\n  else:\n    b = a * 2\n    return b[0]",
  "changed_function": "def qux(b: str):\n  if len(b) > 3:\n    return b[0]\n  else:\n    a = b * 2\n    return a[0]",
  "function_name": "qux",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"short\"",
   "\"longer\"",
   "\"really long\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def quux(a: int):\n  if a > 10:\n    return a - 10\n  else:\n    b = a * 10\n    return b - 10",
  "changed_function": "def quux(b: int):\n  if b > 10:\n    return b - 10\n  else:\n    a = b * 10\n    return a - 10",
  "function_name": "quux",
  "inputs": [
   "1",
   "2",
   "3",
   "11",
   "12"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "c",
  "original_function": "def corge(b: bool):\n  a = False\n  if b:\n    a = True\n  else:\n    a = False\n  return (lambda b: a or b)(True)",
  "changed_function": "def corge(c: bool):\n  a = False\n  if c:\n    a = True\n  else:\n    a = False\n  return (lambda d: a or d)(True)",
  "function_name": "corge",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def grault(a: int):\n  b = a + 1\n  if b > 10:\n    return b - 10\n  else:\n    return b * 2",
  "changed_function": "def grault(b: int):\n  a = b + 1\n  if a > 10:\n    return a - 10\n  else:\n    return a * 2",
  "function_name": "grault",
  "inputs": [
   "1",
   "2",
   "3",
   "11",
   "12"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def garply(a: str):\n  if len(a) > 5:\n    return a[:3]\n  else:\n    b = a * 2\n    return b[0:5]",
  "changed_function": "def garply(b: str):\n  if len(b) > 5:\n    return b[:3]\n  else:\n    a = b * 2\n    return a[0:5]",
  "function_name": "garply",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"short\"",
   "\"longer\"",
   "\"really long\""
  ]
 },
 {
  "target_argument": "b",
  "change_to": "a",
  "original_function": "def waldo(b: int):\n  a = b + 1\n  return (lambda b: a + b)(1)",
  "changed_function": "def waldo(a: int):\n  b = a + 1\n  return (lambda c: b + c)(1)",
  "function_name": "waldo",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "c",
  "original_function": "def fred(a: int):\n  b = a * 2\n  if b > 10:\n    return a\n  else:\n    return b",
  "changed_function": "def fred(c: int):\n  b = c * 2\n  if b > 10:\n    return c\n  else:\n    return b",
  "function_name": "fred",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def first_func(s: str):\n  t = s + \"world\"\n  return (lambda s: s + \"!\")(t)",
  "changed_function": "def first_func(a: str):\n  t = a + \"world\"\n  return (lambda s: s + \"!\")(t)",
  "function_name": "first_func",
  "inputs": [
   "\"hello\"",
   "\"python\"",
   "\"program\"",
   "\"function\"",
   "\"world\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "b",
  "original_function": "def second_func(x: int):\n  y = x + 1\n  return (lambda x: x * y)(x)",
  "changed_function": "def second_func(b: int):\n  y = b + 1\n  return (lambda x: x * y)(b)",
  "function_name": "second_func",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def third_func(x: bool):\n  a = x\n  return (lambda x: not x if x else a)(x)",
  "changed_function": "def third_func(a: bool):\n  b = a\n  return (lambda x: not x if x else b)(a)",
  "function_name": "third_func",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "i",
  "change_to": "d",
  "original_function": "def fourth_func(i: int):\n  j = i + 1\n  return (lambda i: i + j)(i)",
  "changed_function": "def fourth_func(d: int):\n  j = d + 1\n  return (lambda i: i + j)(d)",
  "function_name": "fourth_func",
  "inputs": [
   "0",
   "1",
   "2",
   "3",
   "4"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "p",
  "original_function": "def fifth_func(n: int):\n  s = [n]\n  return (lambda n: n + sum(s))(n)",
  "changed_function": "def fifth_func(p: int):\n  s = [p]\n  return (lambda n: n + sum(s))(p)",
  "function_name": "fifth_func",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "f",
  "original_function": "def sixth_func(s: str):\n  t = [s]\n  return (lambda s: s + ''.join(t))(s)",
  "changed_function": "def sixth_func(f: str):\n  t = [f]\n  return (lambda s: s + ''.join(t))(f)",
  "function_name": "sixth_func",
  "inputs": [
   "\"a\"",
   "\"b\"",
   "\"c\"",
   "\"d\"",
   "\"e\""
  ]
 },
 {
  "target_argument": "b",
  "change_to": "p",
  "original_function": "def seventh_func(b: bool):\n  p = [b, not b]\n  return (lambda b: b or p[0])(b)",
  "changed_function": "def seventh_func(p: bool):\n  q = [p, not p]\n  return (lambda b: b or q[0])(p)",
  "function_name": "seventh_func",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "y",
  "original_function": "def eight_func(n: int):\n  m = n + 1\n  return (lambda n: n + m)(n)",
  "changed_function": "def eight_func(y: int):\n  m = y + 1\n  return (lambda n: n + m)(y)",
  "function_name": "eight_func",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "c",
  "original_function": "def ninth_func(x: int):\n  x = x + 1\n  return (lambda x: x * x)(x)",
  "changed_function": "def ninth_func(c: int):\n  c = c + 1\n  return (lambda x: x * x)(c)",
  "function_name": "ninth_func",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "d",
  "original_function": "def tenth_func(x: int):\n  d = x * 2\n  return (lambda x: d + x)(x)",
  "changed_function": "def tenth_func(d: int):\n  e = d * 2\n  return (lambda x: e + x)(d)",
  "function_name": "tenth_func",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def func1(n: int):\n  a = [1, 2, 3]\n  b = [4, 5, 6]\n  for i in range(len(a)):\n    if a[i] == n:\n      return b[i]\n  return -1",
  "changed_function": "def func1(x: int):\n  a = [1, 2, 3]\n  b = [4, 5, 6]\n  for i in range(len(a)):\n    if a[i] == x:\n      return b[i]\n  return -1",
  "function_name": "func1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "k",
  "original_function": "def func2(b: bool):\n  a = [1, 2, 3]\n  if b:\n    return a[0]\n  else:\n    return a[1]",
  "changed_function": "def func2(k: bool):\n  a = [1, 2, 3]\n  if k:\n    return a[0]\n  else:\n    return a[1]",
  "function_name": "func2",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "m",
  "original_function": "def func3(x: int):\n  a = [1, 2, 3, 4, 5]\n  b = 0\n  for i in range(len(a)):\n    b += a[i]\n    if b > x:\n      return i\n  return -1",
  "changed_function": "def func3(m: int):\n  a = [1, 2, 3, 4, 5]\n  b = 0\n  for i in range(len(a)):\n    b += a[i]\n    if b > m:\n      return i\n  return -1",
  "function_name": "func3",
  "inputs": [
   "1",
   "3",
   "5",
   "10",
   "15"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "p",
  "original_function": "def func4(y: str):\n  if y == 'hello':\n    return 'world'\n  else:\n    return y",
  "changed_function": "def func4(p: str):\n  if p == 'hello':\n    return 'world'\n  else:\n    return p",
  "function_name": "func4",
  "inputs": [
   "'hello'",
   "'world'",
   "'good'",
   "'morning'",
   "'bye'"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "q",
  "original_function": "def func5(m: int):\n  a = [1, 2, 3]\n  b = [4, 5, 6]\n  c = []\n  for i in range(len(a)):\n    if i == m:\n      c.append(a[i])\n    else:\n      c.append(b[i])\n  return c",
  "changed_function": "def func5(q: int):\n  a = [1, 2, 3]\n  b = [4, 5, 6]\n  c = []\n  for i in range(len(a)):\n    if i == q:\n      c.append(a[i])\n    else:\n      c.append(b[i])\n  return c",
  "function_name": "func5",
  "inputs": [
   "0",
   "1",
   "2",
   "3",
   "4"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "w",
  "original_function": "def func6(z: int):\n  a = [1, 2, 3]\n  b = [4, 5, 6]\n  c = 0\n  for i in range(len(a)):\n    c += a[i] * b[i]\n    if c > z:\n      return c\n  return -1",
  "changed_function": "def func6(w: int):\n  a = [1, 2, 3]\n  b = [4, 5, 6]\n  c = 0\n  for i in range(len(a)):\n    c += a[i] * b[i]\n    if c > w:\n      return c\n  return -1",
  "function_name": "func6",
  "inputs": [
   "10",
   "20",
   "30",
   "40",
   "50"
  ]
 },
 {
  "target_argument": "q",
  "change_to": "s",
  "original_function": "def func7(q: str):\n  a = [1, 2, 3]\n  b = [4, 5, 6]\n  c = []\n  for i in range(len(a)):\n    if str(a[i]) in q:\n      c.append(b[i])\n  return c",
  "changed_function": "def func7(s: str):\n  a = [1, 2, 3]\n  b = [4, 5, 6]\n  c = []\n  for i in range(len(a)):\n    if str(a[i]) in s:\n      c.append(b[i])\n  return c",
  "function_name": "func7",
  "inputs": [
   "'12'",
   "'34'",
   "'56'",
   "'123'",
   "'456'"
  ]
 },
 {
  "target_argument": "t",
  "change_to": "z",
  "original_function": "def func8(t: int):\n  a = [1, 2, 3, 4, 5]\n  b = [4, 5, 6, 7, 8]\n  c = 0\n  for i in range(len(a)):\n    if a[i] + b[i] == t:\n      c = i\n  return c",
  "changed_function": "def func8(z: int):\n  a = [1, 2, 3, 4, 5]\n  b = [4, 5, 6, 7, 8]\n  c = 0\n  for i in range(len(a)):\n    if a[i] + b[i] == z:\n      c = i\n  return c",
  "function_name": "func8",
  "inputs": [
   "5",
   "7",
   "9",
   "11",
   "13"
  ]
 },
 {
  "target_argument": "r",
  "change_to": "v",
  "original_function": "def func9(r: int):\n  a = [1, 2, 3]\n  b = 4\n  for i in range(len(a)):\n    if a[i] * b == r:\n      return i\n  return -1",
  "changed_function": "def func9(v: int):\n  a = [1, 2, 3]\n  b = 4\n  for i in range(len(a)):\n    if a[i] * b == v:\n      return i\n  return -1",
  "function_name": "func9",
  "inputs": [
   "4",
   "8",
   "12",
   "16",
   "20"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "w",
  "original_function": "def func10(p: bool):\n  if p:\n    return 'yes'\n  else:\n    return 'no'",
  "changed_function": "def func10(w: bool):\n  if w:\n    return 'yes'\n  else:\n    return 'no'",
  "function_name": "func10",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def fun1(a: int):\n  b = [1, 2, 3]\n  c = lambda a: a + 1\n  return c(a)",
  "changed_function": "def fun1(b: int):\n  a = [1, 2, 3]\n  c = lambda b: b + 1\n  return c(b)",
  "function_name": "fun1",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "c",
  "change_to": "d",
  "original_function": "def fun3(c: bool):\n  d = True\n  e = lambda c: c and d\n  return e(c)",
  "changed_function": "def fun3(d: bool):\n  c = True\n  e = lambda d: d and c\n  return e(d)",
  "function_name": "fun3",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "q",
  "original_function": "def fun4(p: list):\n  q = 1\n  r = lambda p: sum(p) * q\n  return r(p)",
  "changed_function": "def fun4(q: list):\n  p = 1\n  r = lambda q: sum(q) * p\n  return r(q)",
  "function_name": "fun4",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def fun5(s: int):\n  t = 1\n  u = lambda s: s + t\n  return u(s)",
  "changed_function": "def fun5(t: int):\n  s = 1\n  u = lambda t: t + s\n  return u(t)",
  "function_name": "fun5",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "n",
  "original_function": "def fun6(m: str):\n  n = 'world'\n  o = lambda m: m + ' ' + n\n  return o(m)",
  "changed_function": "def fun6(n: str):\n  m = 'world'\n  o = lambda n: n + ' ' + m\n  return o(n)",
  "function_name": "fun6",
  "inputs": [
   "'hello'",
   "'goodbye'",
   "'welcome'",
   "'thank you'",
   "'see you'"
  ]
 },
 {
  "target_argument": "j",
  "change_to": "k",
  "original_function": "def fun7(j: list):\n  k = [1, 2, 3]\n  l = lambda j: j + k\n  return l(j)",
  "changed_function": "def fun7(k: list):\n  j = [1, 2, 3]\n  l = lambda k: k + j\n  return l(k)",
  "function_name": "fun7",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "v",
  "change_to": "w",
  "original_function": "def fun8(v: bool):\n  w = False\n  x = lambda v: v or w\n  return x(v)",
  "changed_function": "def fun8(w: bool):\n  v = False\n  x = lambda w: w or v\n  return x(w)",
  "function_name": "fun8",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "a",
  "original_function": "def fun9(z: int):\n  a = 1\n  b = lambda z: z + a\n  return b(z)",
  "changed_function": "def fun9(a: int):\n  z = 1\n  b = lambda a: a + z\n  return b(a)",
  "function_name": "fun9",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "r",
  "change_to": "s",
  "original_function": "def fun10(r: str):\n  s = 'hello'\n  t = lambda r: r + ' ' + s\n  return t(r)",
  "changed_function": "def fun10(s: str):\n  r = 'hello'\n  t = lambda s: s + ' ' + r\n  return t(s)",
  "function_name": "fun10",
  "inputs": [
   "'goodbye'",
   "'welcome'",
   "'thank you'",
   "'see you'",
   "'how are you'"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "c",
  "original_function": "def func1(b: int):\n  a = 10\n  if b > 10:\n    b = b + 1\n    return (lambda b: b + 1)(a)\n  else:\n    return 2",
  "changed_function": "def func1(c: int):\n  a = 10\n  if c > 10:\n    d = c + 1\n    return (lambda b: b + 1)(a)\n  else:\n    return 2",
  "function_name": "func1",
  "inputs": [
   "15",
   "1",
   "20",
   "5",
   "10"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "d",
  "original_function": "def func2(x: int):\n  if x > 10:\n    x = x - 1\n  y = x + 1\n  return (lambda x: x + 1)(y)",
  "changed_function": "def func2(d: int):\n  if d > 10:\n    d = d - 1\n  y = d + 1\n  return (lambda x: x + 1)(y)",
  "function_name": "func2",
  "inputs": [
   "15",
   "1",
   "20",
   "5",
   "10"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "a",
  "original_function": "def func3(z: bool):\n  if z == True:\n    y = z + 1\n    return y + z\n  else:\n    return 0",
  "changed_function": "def func3(a: bool):\n  if a == True:\n    y = a + 1\n    return y + a\n  else:\n    return 0",
  "function_name": "func3",
  "inputs": [
   "True",
   "False",
   "True",
   "True",
   "False"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def func4(a: str):\n  if len(a) > 5:\n    a = a + 'a'\n    return a\n  else:\n    return a + 'b'",
  "changed_function": "def func4(b: str):\n  if len(b) > 5:\n    b = b + 'a'\n    return b\n  else:\n    return b + 'b'",
  "function_name": "func4",
  "inputs": [
   "'abcde'",
   "'abcdefg'",
   "'hello world'",
   "'12345'",
   "'python'"
  ]
 },
 {
  "target_argument": "c",
  "change_to": "f",
  "original_function": "def func5(c: int):\n  b = 1\n  if c > 10:\n    c = (lambda c: c + 1)(b)\n    return c + b\n  else:\n    return b",
  "changed_function": "def func5(f: int):\n  b = 1\n  if f > 10:\n    g = (lambda c: c + 1)(b)\n    return g + b\n  else:\n    return b",
  "function_name": "func5",
  "inputs": [
   "15",
   "1",
   "20",
   "5",
   "10"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "n",
  "original_function": "def func6(m: int):\n  m = (lambda m: m + 1)(m)\n  if m > 10:\n    m = (lambda m: m + 1)(m)\n    return m + 1\n  else:\n    return 0",
  "changed_function": "def func6(n: int):\n  n = (lambda m: m + 1)(n)\n  if n > 10:\n    n = (lambda m: m + 1)(n)\n    return n + 1\n  else:\n    return 0",
  "function_name": "func6",
  "inputs": [
   "15",
   "1",
   "20",
   "5",
   "10"
  ]
 },
 {
  "target_argument": "q",
  "change_to": "h",
  "original_function": "def func7(q: int):\n  if q > 5:\n    return q + 1\n  else:\n    return (lambda q: q + 1)(q - 1)",
  "changed_function": "def func7(h: int):\n  if h > 5:\n    return h + 1\n  else:\n    return (lambda q: q + 1)(h - 1)",
  "function_name": "func7",
  "inputs": [
   "15",
   "1",
   "20",
   "5",
   "10"
  ]
 },
 {
  "target_argument": "t",
  "change_to": "x",
  "original_function": "def func8(t: int):\n  t = t + 1\n  return (lambda t: t + 1)(t - 1)",
  "changed_function": "def func8(x: int):\n  x = x + 1\n  return (lambda t: t + 1)(x - 1)",
  "function_name": "func8",
  "inputs": [
   "15",
   "1",
   "20",
   "5",
   "10"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "r",
  "original_function": "def func9(p: int):\n  a = 10\n  p = (lambda p: p + 1)(p)\n  return (lambda p: p + 1)(p)",
  "changed_function": "def func9(r: int):\n  a = 10\n  r = (lambda p: p + 1)(r)\n  return (lambda p: p + 1)(r)",
  "function_name": "func9",
  "inputs": [
   "15",
   "1",
   "20",
   "5",
   "10"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def func10(n: int):\n  if n > 10:\n    return (lambda n: n + 1)(n)\n  else:\n    return (lambda n: n + 1)(n)",
  "changed_function": "def func10(k: int):\n  if k > 10:\n    return (lambda n: n + 1)(k)\n  else:\n    return (lambda n: n + 1)(k)",
  "function_name": "func10",
  "inputs": [
   "15",
   "1",
   "20",
   "5",
   "10"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func1(x: int):\n  y = x * 2\n  return (lambda z: z + y)(x + 1)",
  "changed_function": "def func1(y: int):\n  z = y * 2\n  return (lambda w: w + z)(y + 1)",
  "function_name": "func1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def func2(x: bool):\n  if x:\n    y = True\n  else:\n    y = False\n  return (lambda x: x and y)(x)",
  "changed_function": "def func2(z: bool):\n  if z:\n    w = True\n  else:\n    w = False\n  return (lambda x: x and w)(z)",
  "function_name": "func2",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func3(x: str):\n  y = x.upper()\n  return (lambda x: x + y)(x)",
  "changed_function": "def func3(y: str):\n  z = y.upper()\n  return (lambda x: x + z)(y)",
  "function_name": "func3",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"language\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def func4(x: list):\n  y = len(x)\n  return (lambda x: x[0] + y)(x)",
  "changed_function": "def func4(z: list):\n  w = len(z)\n  return (lambda x: x[0] + w)(z)",
  "function_name": "func4",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func5(x: int):\n  if x > 0:\n    y = 1\n  else:\n    y = -1\n  return (lambda x: x + y)(x)",
  "changed_function": "def func5(y: int):\n  if y > 0:\n    z = 1\n  else:\n    z = -1\n  return (lambda x: x + z)(y)",
  "function_name": "func5",
  "inputs": [
   "1",
   "-1",
   "0",
   "5",
   "-5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def func6(x: str):\n  y = x.lower()\n  return (lambda x: x + y)(x)",
  "changed_function": "def func6(z: str):\n  w = z.lower()\n  return (lambda x: x + w)(z)",
  "function_name": "func6",
  "inputs": [
   "\"HELLO\"",
   "\"WORLD\"",
   "\"PYTHON\"",
   "\"PROGRAMMING\"",
   "\"LANGUAGE\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func7(x: int):\n  y = x * x\n  return (lambda x: x + y)(x)",
  "changed_function": "def func7(y: int):\n  z = y * y\n  return (lambda x: x + z)(y)",
  "function_name": "func7",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def func8(x: bool):\n  y = not x\n  return (lambda x: x and y)(x)",
  "changed_function": "def func8(z: bool):\n  w = not z\n  return (lambda x: x and w)(z)",
  "function_name": "func8",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func9(x: list):\n  y = x[::-1]\n  return (lambda x: x + y)(x)",
  "changed_function": "def func9(y: list):\n  z = y[::-1]\n  return (lambda x: x + z)(y)",
  "function_name": "func9",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def func10(x: str):\n  y = x.replace(' ', '')\n  return (lambda x: x + y)(x)",
  "changed_function": "def func10(z: str):\n  w = z.replace(' ', '')\n  return (lambda x: x + w)(z)",
  "function_name": "func10",
  "inputs": [
   "\"Hello World\"",
   "\"Python Programming\"",
   "\"Language Model\"",
   "\"This is a test\"",
   "\"Another example\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def func1(n: int):\n  b = n + 1\n  if b > 10:\n    return False\n  return (lambda n: n * 2)(b)",
  "changed_function": "def func1(k: int):\n  b = k + 1\n  if b > 10:\n    return False\n  return (lambda n: n * 2)(b)",
  "function_name": "func1",
  "inputs": [
   "1",
   "5",
   "10",
   "15",
   "20"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "s",
  "original_function": "def func2(n: int):\n  if n == 0:\n    return False\n  return (lambda n: n + 1)(n)",
  "changed_function": "def func2(s: int):\n  if s == 0:\n    return False\n  return (lambda n: n + 1)(s)",
  "function_name": "func2",
  "inputs": [
   "0",
   "1",
   "2",
   "3",
   "4"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "d",
  "original_function": "def func3(a: int):\n  return (lambda a: a * 2)(a + 1)",
  "changed_function": "def func3(d: int):\n  return (lambda a: a * 2)(d + 1)",
  "function_name": "func3",
  "inputs": [
   "2",
   "4",
   "6",
   "8",
   "10"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def func4(n: int):\n  a = []\n  for i in range(n):\n    a.append(i)\n  return a",
  "changed_function": "def func4(x: int):\n  a = []\n  for i in range(x):\n    a.append(i)\n  return a",
  "function_name": "func4",
  "inputs": [
   "3",
   "5",
   "7",
   "9",
   "11"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def func5(n: int):\n  a = []\n  for i in range(n):\n    if i > 5:\n      a.append(i)\n  return a",
  "changed_function": "def func5(k: int):\n  a = []\n  for i in range(k):\n    if i > 5:\n      a.append(i)\n  return a",
  "function_name": "func5",
  "inputs": [
   "10",
   "12",
   "14",
   "16",
   "18"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def func6(x: str):\n  if len(x) > 5:\n    return True\n  return False",
  "changed_function": "def func6(z: str):\n  if len(z) > 5:\n    return True\n  return False",
  "function_name": "func6",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"language\""
  ]
 },
 {
  "target_argument": "b",
  "change_to": "c",
  "original_function": "def func7(b: bool):\n  if b:\n    return True\n  return False",
  "changed_function": "def func7(c: bool):\n  if c:\n    return True\n  return False",
  "function_name": "func7",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "s",
  "original_function": "def func8(n: int):\n  a = 0\n  for i in range(n):\n    a = a + 1\n  return a",
  "changed_function": "def func8(s: int):\n  a = 0\n  for i in range(s):\n    a = a + 1\n  return a",
  "function_name": "func8",
  "inputs": [
   "5",
   "7",
   "9",
   "11",
   "13"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def func9(a: int):\n  if a > 10:\n    return (lambda a: a - 10)(a)\n  return a",
  "changed_function": "def func9(x: int):\n  if x > 10:\n    return (lambda a: a - 10)(x)\n  return x",
  "function_name": "func9",
  "inputs": [
   "5",
   "15",
   "25",
   "35",
   "45"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def func10(a: int):\n  if a > 5:\n    return (lambda a: a * 2)(a)\n  else:\n    return (lambda a: a * 3)(a)",
  "changed_function": "def func10(b: int):\n  if b > 5:\n    return (lambda a: a * 2)(b)\n  else:\n    return (lambda a: a * 3)(b)",
  "function_name": "func10",
  "inputs": [
   "2",
   "6",
   "10",
   "14",
   "18"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "c",
  "original_function": "def bar(b: bool):\n  if b:\n    a = 1\n    return (lambda b: a + b)(b)\n  else:\n    return 0",
  "changed_function": "def bar(c: bool):\n  if c:\n    a = 1\n    return (lambda b: a + b)(c)\n  else:\n    return 0",
  "function_name": "bar",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "c",
  "change_to": "d",
  "original_function": "def baz(c: str):\n  a = [c]\n  return (lambda c: c in a)(c)",
  "changed_function": "def baz(d: str):\n  a = [d]\n  return (lambda c: c in a)(d)",
  "function_name": "baz",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"code\"",
   "\"data\""
  ]
 },
 {
  "target_argument": "e",
  "change_to": "f",
  "original_function": "def quux(e: int):\n  if e > 0:\n    e = e + 1\n    return e\n  else:\n    return e - 1",
  "changed_function": "def quux(f: int):\n  if f > 0:\n    f = f + 1\n    return f\n  else:\n    return f - 1",
  "function_name": "quux",
  "inputs": [
   "1",
   "2",
   "-1",
   "-2",
   "0"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "g",
  "original_function": "def corge(f: str):\n  g = f.upper()\n  return (lambda f: f + g)(f)",
  "changed_function": "def corge(g: str):\n  h = g.upper()\n  return (lambda f: f + h)(g)",
  "function_name": "corge",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"code\"",
   "\"data\""
  ]
 },
 {
  "target_argument": "g",
  "change_to": "h",
  "original_function": "def grault(g: int):\n  h = g * 2\n  return (lambda g: h - g)(g)",
  "changed_function": "def grault(h: int):\n  i = h * 2\n  return (lambda g: i - g)(h)",
  "function_name": "grault",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "h",
  "change_to": "i",
  "original_function": "def garply(h: bool):\n  if h:\n    h = 1\n  else:\n    h = 0\n  return (lambda h: h + 1)(h)",
  "changed_function": "def garply(i: bool):\n  if i:\n    i = 1\n  else:\n    i = 0\n  return (lambda h: h + 1)(i)",
  "function_name": "garply",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "j",
  "change_to": "k",
  "original_function": "def fred(j: str):\n  k = j.lower()\n  return (lambda j: j + k)(j)",
  "changed_function": "def fred(k: str):\n  l = k.lower()\n  return (lambda j: j + l)(k)",
  "function_name": "fred",
  "inputs": [
   "\"HELLO\"",
   "\"WORLD\"",
   "\"PYTHON\"",
   "\"CODE\"",
   "\"DATA\""
  ]
 },
 {
  "target_argument": "lst",
  "change_to": "items",
  "original_function": "def sum_even_numbers(lst: list):\n    sum = 0\n    for n in lst:\n        if n % 2 == 0:\n            sum += n\n    return sum",
  "changed_function": "def sum_even_numbers(items: list):\n    sum = 0\n    for n in items:\n        if n % 2 == 0:\n            sum += n\n    return sum",
  "function_name": "sum_even_numbers",
  "inputs": [
   "[1,2,3,4,5]",
   "[2,4,6,8]",
   "[1,3,5,7]",
   "[10,20,30]",
   "[1,2,3]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def is_prime(n: int):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
  "changed_function": "def is_prime(k: int):\n    if k <= 1:\n        return False\n    for i in range(2, int(k**0.5) + 1):\n        if k % i == 0:\n            return False\n    return True",
  "function_name": "is_prime",
  "inputs": [
   "2",
   "3",
   "7",
   "11",
   "13"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "str",
  "original_function": "def reverse_string(s: str):\n    return s[::-1]",
  "changed_function": "def reverse_string(str: str):\n    return str[::-1]",
  "function_name": "reverse_string",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"javascript\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def find_max(n: list):\n    max_value = n[0]\n    for i in range(1, len(n)):\n        if n[i] > max_value:\n            max_value = n[i]\n    return max_value",
  "changed_function": "def find_max(k: list):\n    max_value = k[0]\n    for i in range(1, len(k)):\n        if k[i] > max_value:\n            max_value = k[i]\n    return max_value",
  "function_name": "find_max",
  "inputs": [
   "[1,2,3,4,5]",
   "[5,4,3,2,1]",
   "[1,10,2,8,3]",
   "[1,2,3,4,5,6,7,8,9,10]",
   "[10,9,8,7,6,5,4,3,2,1]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def find_smallest_missing_positive(a: list):\n    n = len(a)\n    for i in range(n):\n        if a[i] <= 0 or a[i] > n:\n            a[i] = 1\n    for i in range(n):\n        if abs(a[i]) == n:\n            a[0] = -abs(a[0])\n        else:\n            a[abs(a[i])] = -abs(a[abs(a[i])])\n    for i in range(1, n):\n        if a[i] > 0:\n            return i\n    if a[0] > 0:\n        return n\n    return n + 1",
  "changed_function": "def find_smallest_missing_positive(n: list):\n    k = len(n)\n    for i in range(k):\n        if n[i] <= 0 or n[i] > k:\n            n[i] = 1\n    for i in range(k):\n        if abs(n[i]) == k:\n            n[0] = -abs(n[0])\n        else:\n            n[abs(n[i])] = -abs(n[abs(n[i])])\n    for i in range(1, k):\n        if n[i] > 0:\n            return i\n    if n[0] > 0:\n        return k\n    return k + 1",
  "function_name": "find_smallest_missing_positive",
  "inputs": [
   "[1,2,0]",
   "[3,4,-1,1]",
   "[7,8,9,11,12]",
   "[1,2,3,4,5]",
   "[0,-1,1]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def f(x: int):\n  y = 1\n  z = 2\n  if x == 0:\n    return (lambda x: x * y)(1)\n  else:\n    return (lambda x: x + z)(x)",
  "changed_function": "def f(a: int):\n  y = 1\n  z = 2\n  if a == 0:\n    return (lambda x: x * y)(1)\n  else:\n    return (lambda x: x + z)(a)",
  "function_name": "f",
  "inputs": [
   "5",
   "0",
   "10",
   "-1",
   "1"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "b",
  "original_function": "def g(n: int):\n  a = 0\n  for i in range(n):\n    a += 1\n  return a",
  "changed_function": "def g(b: int):\n  a = 0\n  for i in range(b):\n    a += 1\n  return a",
  "function_name": "g",
  "inputs": [
   "1",
   "5",
   "10",
   "2",
   "3"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def h(x: int):\n  if x > 0:\n    return (lambda x: x + 1)(x)\n  else:\n    return (lambda x: x - 1)(x)",
  "changed_function": "def h(z: int):\n  if z > 0:\n    return (lambda x: x + 1)(z)\n  else:\n    return (lambda x: x - 1)(z)",
  "function_name": "h",
  "inputs": [
   "-1",
   "0",
   "1",
   "5",
   "10"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "a",
  "original_function": "def i(y: int):\n  x = y\n  while x > 0:\n    x = x - 1\n  return x",
  "changed_function": "def i(a: int):\n  b = a\n  while b > 0:\n    b = b - 1\n  return b",
  "function_name": "i",
  "inputs": [
   "10",
   "5",
   "0",
   "1",
   "2"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def j(x: str):\n  if x == \"hello\":\n    return (lambda x: x + \" world\")(x)\n  else:\n    return (lambda x: x + \"!\")(x)",
  "changed_function": "def j(y: str):\n  if y == \"hello\":\n    return (lambda x: x + \" world\")(y)\n  else:\n    return (lambda x: x + \"!\")(y)",
  "function_name": "j",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"goodbye\"",
   "\"test\"",
   "\"123\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "c",
  "original_function": "def k(a: list):\n  for i in range(len(a)):\n    if a[i] == 0:\n      return True\n  return False",
  "changed_function": "def k(c: list):\n  for i in range(len(c)):\n    if c[i] == 0:\n      return True\n  return False",
  "function_name": "k",
  "inputs": [
   "[1, 2, 3]",
   "[0, 1, 2]",
   "[1, 0, 3]",
   "[0, 0, 0]",
   "[1, 2, 0]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def l(x: bool):\n  if x:\n    return (lambda x: x + 1)(1)\n  else:\n    return (lambda x: x - 1)(0)",
  "changed_function": "def l(y: bool):\n  if y:\n    return (lambda x: x + 1)(1)\n  else:\n    return (lambda x: x - 1)(0)",
  "function_name": "l",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "False"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "z",
  "original_function": "def m(b: int):\n  a = 1\n  if b == 1:\n    return (lambda b: a + b)(b)\n  else:\n    return (lambda b: b + 1)(b)",
  "changed_function": "def m(z: int):\n  a = 1\n  if z == 1:\n    return (lambda b: a + b)(z)\n  else:\n    return (lambda b: b + 1)(z)",
  "function_name": "m",
  "inputs": [
   "0",
   "1",
   "2",
   "3",
   "5"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "z",
  "original_function": "def n(y: str):\n  x = y\n  if y == \"hello\":\n    return (lambda y: y + \" world\")(y)\n  else:\n    return (lambda y: y + \"!\")(y)",
  "changed_function": "def n(z: str):\n  x = z\n  if z == \"hello\":\n    return (lambda y: y + \" world\")(z)\n  else:\n    return (lambda y: y + \"!\")(z)",
  "function_name": "n",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"goodbye\"",
   "\"test\"",
   "\"123\""
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "arr",
  "original_function": "def find_minimum_number_of_coins(nums: list, target: int):\n    n = len(nums)\n    dp = [float('inf')] * (target + 1)\n    dp[0] = 0\n    for i in range(1, target + 1):\n        for j in range(n):\n            if (nums[j] <= i):\n                dp[i] = min(dp[i], dp[i - nums[j]] + 1)\n    return dp[target] if dp[target] != float('inf') else -1",
  "changed_function": "def find_minimum_number_of_coins(arr: list, target: int):\n    n = len(arr)\n    dp = [float('inf')] * (target + 1)\n    dp[0] = 0\n    for i in range(1, target + 1):\n        for j in range(n):\n            if (arr[j] <= i):\n                dp[i] = min(dp[i], dp[i - arr[j]] + 1)\n    return dp[target] if dp[target] != float('inf') else -1",
  "function_name": "find_minimum_number_of_coins",
  "inputs": [
   "[1, 2, 5], 11",
   "[2, 3, 5, 7], 18",
   "[1, 5, 10, 25], 40",
   "[1, 2, 3], 5",
   "[10, 50, 100], 150"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "a",
  "original_function": "def find_the_first_missing_positive(arr: list):\n    n = len(arr)\n    for i in range(n):\n        if (arr[i] <= 0 or arr[i] > n):\n            arr[i] = 1\n    for i in range(n):\n        a = abs(arr[i])\n        if (a == n):\n            arr[0] = - abs(arr[0])\n        else:\n            arr[a] = - abs(arr[a])\n    for i in range(1, n):\n        if (arr[i] > 0):\n            return i\n    if (arr[0] > 0):\n        return n\n    return n + 1",
  "changed_function": "def find_the_first_missing_positive(a: list):\n    n = len(a)\n    for i in range(n):\n        if (a[i] <= 0 or a[i] > n):\n            a[i] = 1\n    for i in range(n):\n        b = abs(a[i])\n        if (b == n):\n            a[0] = - abs(a[0])\n        else:\n            a[b] = - abs(a[b])\n    for i in range(1, n):\n        if (a[i] > 0):\n            return i\n    if (a[0] > 0):\n        return n\n    return n + 1",
  "function_name": "find_the_first_missing_positive",
  "inputs": [
   "[1, 2, 0]",
   "[3, 4, -1, 1]",
   "[7, 8, 9, 11, 12]",
   "[-1, -1, -1, -1, -1]",
   "[1, 1, 1, 1, 1]"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "x",
  "original_function": "def find_the_majority_element(nums: list):\n    n = len(nums)\n    candidate = nums[0]\n    count = 1\n    for i in range(1, n):\n        if (nums[i] == candidate):\n            count += 1\n        else:\n            count -= 1\n        if (count == 0):\n            candidate = nums[i]\n            count = 1\n    return candidate",
  "changed_function": "def find_the_majority_element(x: list):\n    n = len(x)\n    candidate = x[0]\n    count = 1\n    for i in range(1, n):\n        if (x[i] == candidate):\n            count += 1\n        else:\n            count -= 1\n        if (count == 0):\n            candidate = x[i]\n            count = 1\n    return candidate",
  "function_name": "find_the_majority_element",
  "inputs": [
   "[2, 2, 1, 1, 1, 2, 2]",
   "[3, 2, 3]",
   "[1, 2, 3, 4, 5]",
   "[1, 1, 1, 1, 1]",
   "[1, 2, 2, 2, 3, 3]"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "a",
  "original_function": "def func1(nums: list):\n    count = 0\n    for i in nums:\n        for j in i:\n            if j == 0:\n                count += 1\n    return count",
  "changed_function": "def func1(a: list):\n    count = 0\n    for i in a:\n        for j in i:\n            if j == 0:\n                count += 1\n    return count",
  "function_name": "func1",
  "inputs": [
   "[[1,2,3],[4,5,0]]",
   "[[0,1,2],[0,3,4]]",
   "[[0,0,0]]",
   "[[1,2,3,4,5],[1,2,3]]",
   "[[1,1,0,0]]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func2(x: int):\n    result = 0\n    for i in range(x):\n        result += i\n    return result",
  "changed_function": "def func2(y: int):\n    result = 0\n    for i in range(y):\n        result += i\n    return result",
  "function_name": "func2",
  "inputs": [
   "10",
   "5",
   "20",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def func3(s: str):\n    result = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            result += 1\n    return result",
  "changed_function": "def func3(t: str):\n    result = 0\n    for i in range(len(t)):\n        if t[i] == 'a':\n            result += 1\n    return result",
  "function_name": "func3",
  "inputs": [
   "'aba'",
   "'aaab'",
   "'bca'",
   "'hello'",
   "'world'"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "b",
  "original_function": "def func4(x: int):\n    return x * x",
  "changed_function": "def func4(b: int):\n    return b * b",
  "function_name": "func4",
  "inputs": [
   "5",
   "10",
   "2",
   "3",
   "1"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "a",
  "original_function": "def func5(arr: list):\n    result = 0\n    for i in arr:\n        if i > 0:\n            result += i\n    return result",
  "changed_function": "def func5(a: list):\n    result = 0\n    for i in a:\n        if i > 0:\n            result += i\n    return result",
  "function_name": "func5",
  "inputs": [
   "[1,2,3,4,5]",
   "[-1,2,-3,4,-5]",
   "[0,0,0,0,0]",
   "[1,2,3,4,0]",
   "[0,1,2,3,4]"
  ]
 },
 {
  "target_argument": "numbers",
  "change_to": "y",
  "original_function": "def func6(numbers: list):\n    result = 0\n    for i in numbers:\n        result += i\n    return result",
  "changed_function": "def func6(y: list):\n    result = 0\n    for i in y:\n        result += i\n    return result",
  "function_name": "func6",
  "inputs": [
   "[1,2,3,4,5]",
   "[1,2,3,4,5]",
   "[-1,2,3,4,5]",
   "[0,1,2,3,4,5]",
   "[1,2,3]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def func7(s: str):\n    result = ''\n    for i in s:\n        if i.isupper():\n            result += i.lower()\n        else:\n            result += i.upper()\n    return result",
  "changed_function": "def func7(t: str):\n    result = ''\n    for i in t:\n        if i.isupper():\n            result += i.lower()\n        else:\n            result += i.upper()\n    return result",
  "function_name": "func7",
  "inputs": [
   "'hello'",
   "'world'",
   "'Python'",
   "'Hello world'",
   "'1234'"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def func8(x: int):\n    result = 1\n    for i in range(x):\n        result *= i\n    return result",
  "changed_function": "def func8(a: int):\n    result = 1\n    for i in range(a):\n        result *= i\n    return result",
  "function_name": "func8",
  "inputs": [
   "5",
   "3",
   "10",
   "2",
   "1"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "y",
  "original_function": "def func9(nums: list):\n    result = 0\n    for i in nums:\n        if i % 2 == 0:\n            result += i\n    return result",
  "changed_function": "def func9(y: list):\n    result = 0\n    for i in y:\n        if i % 2 == 0:\n            result += i\n    return result",
  "function_name": "func9",
  "inputs": [
   "[1,2,3,4,5]",
   "[2,4,6,8,10]",
   "[1,3,5,7,9]",
   "[0,2,4,6,8]",
   "[1,1,2,2,3]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def func10(x: int):\n    result = 0\n    for i in range(1, x + 1):\n        result += 1 / i\n    return result",
  "changed_function": "def func10(a: int):\n    result = 0\n    for i in range(1, a + 1):\n        result += 1 / i\n    return result",
  "function_name": "func10",
  "inputs": [
   "5",
   "10",
   "2",
   "3",
   "1"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def sum_squares_of_odd_numbers(n: int):\n  sum = 0\n  for i in range(1, n + 1, 2):\n    sum += i * i\n  return sum",
  "changed_function": "def sum_squares_of_odd_numbers(k: int):\n  sum = 0\n  for i in range(1, k + 1, 2):\n    sum += i * i\n  return sum",
  "function_name": "sum_squares_of_odd_numbers",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "str",
  "original_function": "def count_words_in_text(text: str):\n  words = text.split()\n  return len(words)",
  "changed_function": "def count_words_in_text(str: str):\n  words = str.split()\n  return len(words)",
  "function_name": "count_words_in_text",
  "inputs": [
   "\"This is a test sentence.\"",
   "\"Another example of a text.\"",
   "\"How many words are there?\"",
   "\"One two three four five.\"",
   "\"A short text.\""
  ]
 },
 {
  "target_argument": "numbers",
  "change_to": "nums",
  "original_function": "def find_median(numbers: list):\n  numbers.sort()\n  n = len(numbers)\n  if n % 2 == 0:\n    return (numbers[n//2 - 1] + numbers[n//2]) / 2\n  else:\n    return numbers[n//2]",
  "changed_function": "def find_median(nums: list):\n  nums.sort()\n  n = len(nums)\n  if n % 2 == 0:\n    return (nums[n//2 - 1] + nums[n//2]) / 2\n  else:\n    return nums[n//2]",
  "function_name": "find_median",
  "inputs": [
   "[1, 3, 5, 7, 9]",
   "[2, 4, 6, 8, 10]",
   "[1, 2, 3, 4, 5, 6]",
   "[7, 8, 9, 10, 11, 12]",
   "[1, 2, 3, 4, 5, 6, 7, 8]"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "a",
  "original_function": "def find_maximum_in_array(arr: list):\n  max_value = arr[0]\n  for i in range(1, len(arr)):\n    if arr[i] > max_value:\n      max_value = arr[i]\n  return max_value",
  "changed_function": "def find_maximum_in_array(a: list):\n  max_value = a[0]\n  for i in range(1, len(a)):\n    if a[i] > max_value:\n      max_value = a[i]\n  return max_value",
  "function_name": "find_maximum_in_array",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[10, 20, 30, 40, 50]",
   "[1, 10, 100, 1000, 10000]",
   "[5, 10, 15, 20, 25]"
  ]
 },
 {
  "target_argument": "string",
  "change_to": "s",
  "original_function": "def is_palindrome(string: str):\n  return string == string[::-1]",
  "changed_function": "def is_palindrome(s: str):\n  return s == s[::-1]",
  "function_name": "is_palindrome",
  "inputs": [
   "\"racecar\"",
   "\"level\"",
   "\"madam\"",
   "\"rotor\"",
   "\"noon\""
  ]
 },
 {
  "target_argument": "num",
  "change_to": "n",
  "original_function": "def is_prime(num: int):\n  if num <= 1:\n    return False\n  for i in range(2, int(num**0.5) + 1):\n    if num % i == 0:\n      return False\n  return True",
  "changed_function": "def is_prime(n: int):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True",
  "function_name": "is_prime",
  "inputs": [
   "2",
   "3",
   "5",
   "7",
   "11"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def calculate_average(x: list):\n  sum = 0\n  for i in range(len(x)):\n    sum += x[i]\n  return sum / len(x)",
  "changed_function": "def calculate_average(a: list):\n  sum = 0\n  for i in range(len(a)):\n    sum += a[i]\n  return sum / len(a)",
  "function_name": "calculate_average",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 20, 30, 40, 50]",
   "[1, 3, 5, 7, 9]",
   "[2, 4, 6, 8, 10]",
   "[100, 200, 300, 400, 500]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def find_missing_number(n: list):\n  expected_sum = sum(range(1, len(n) + 2))\n  actual_sum = sum(n)\n  return expected_sum - actual_sum",
  "changed_function": "def find_missing_number(x: list):\n  expected_sum = sum(range(1, len(x) + 2))\n  actual_sum = sum(x)\n  return expected_sum - actual_sum",
  "function_name": "find_missing_number",
  "inputs": [
   "[1, 2, 3, 5]",
   "[1, 3, 4, 5, 6]",
   "[1, 2, 4, 5, 6, 7]",
   "[2, 3, 4, 5, 6, 7, 8]",
   "[1, 2, 3, 4, 6, 7, 8]"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "s",
  "original_function": "def sum_of_squares(m: int):\n  sum = 0\n  for i in range(1, m + 1):\n    sum += i * i\n  return sum",
  "changed_function": "def sum_of_squares(s: int):\n  sum = 0\n  for i in range(1, s + 1):\n    sum += i * i\n  return sum",
  "function_name": "sum_of_squares",
  "inputs": [
   "5",
   "10",
   "3",
   "1",
   "8"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def find_maximum(x: list):\n  if len(x) == 0:\n    return None\n  max_val = x[0]\n  for i in range(1, len(x)):\n    if x[i] > max_val:\n      max_val = x[i]\n  return max_val",
  "changed_function": "def find_maximum(z: list):\n  if len(z) == 0:\n    return None\n  max_val = z[0]\n  for i in range(1, len(z)):\n    if z[i] > max_val:\n      max_val = z[i]\n  return max_val",
  "function_name": "find_maximum",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[10, 20, 30, 40, 50]",
   "[]",
   "[1]"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "y",
  "original_function": "def is_palindrome(l: str):\n  l = l.lower()\n  return l == l[::-1]",
  "changed_function": "def is_palindrome(y: str):\n  y = y.lower()\n  return y == y[::-1]",
  "function_name": "is_palindrome",
  "inputs": [
   "\"racecar\"",
   "\"level\"",
   "\"madam\"",
   "\"hello\"",
   "\"world\""
  ]
 },
 {
  "target_argument": "text",
  "change_to": "s",
  "original_function": "def count_words(text: str):\n  words = text.split()\n  return len(words)",
  "changed_function": "def count_words(s: str):\n  words = s.split()\n  return len(words)",
  "function_name": "count_words",
  "inputs": [
   "\"This is a test sentence.\"",
   "\"Hello, world!\"",
   "\"1234567890\"",
   "\"  \"",
   "\"The quick brown fox jumps over the lazy dog.\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def check_prime(n: int):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True",
  "changed_function": "def check_prime(k: int):\n  if k <= 1:\n    return False\n  for i in range(2, int(k**0.5) + 1):\n    if k % i == 0:\n      return False\n  return True",
  "function_name": "check_prime",
  "inputs": [
   "7",
   "10",
   "2",
   "1",
   "13"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def reverse_string(s: str):\n  return s[::-1]",
  "changed_function": "def reverse_string(t: str):\n  return t[::-1]",
  "function_name": "reverse_string",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"12345\"",
   "\"abcde\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def is_even(n: int):\n  return n % 2 == 0",
  "changed_function": "def is_even(x: int):\n  return x % 2 == 0",
  "function_name": "is_even",
  "inputs": [
   "2",
   "5",
   "10",
   "1",
   "0"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "x",
  "original_function": "def remove_duplicates(text: str):\n  result = ''\n  for char in text:\n    if char not in result:\n      result += char\n  return result",
  "changed_function": "def remove_duplicates(x: str):\n  result = ''\n  for char in x:\n    if char not in result:\n      result += char\n  return result",
  "function_name": "remove_duplicates",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"aabbcc\"",
   "\"1234567890\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def foo(a: int):\n    c = 1\n    return (lambda a: a + c)(a)",
  "changed_function": "def foo(b: int):\n    c = 1\n    return (lambda a: a + c)(b)",
  "function_name": "foo",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def bar(a: bool):\n    if a:\n        a = 1\n        return (lambda a: a + 1)(a)\n    else:\n        a = 0\n        return (lambda a: a - 1)(a)",
  "changed_function": "def bar(b: bool):\n    if b:\n        c = 1\n        return (lambda a: a + 1)(c)\n    else:\n        c = 0\n        return (lambda a: a - 1)(c)",
  "function_name": "bar",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def func(a: list):\n    c = 1\n    d = 2\n    return (lambda a: [i + c for i in a] + [d])(a)",
  "changed_function": "def func(b: list):\n    c = 1\n    d = 2\n    return (lambda a: [i + c for i in a] + [d])(b)",
  "function_name": "func",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def baz(a: int):\n    c = 1\n    return (lambda a: a + c)(a)",
  "changed_function": "def baz(b: int):\n    c = 1\n    return (lambda a: a + c)(b)",
  "function_name": "baz",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def my_function(a: int):\n    c = a\n    d = 1\n    return (lambda a: a + c)(a) + d",
  "changed_function": "def my_function(b: int):\n    c = b\n    d = 1\n    return (lambda a: a + c)(b) + d",
  "function_name": "my_function",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def func(a: int):\n    c = 1\n    return (lambda a: a + c)(a)",
  "changed_function": "def func(b: int):\n    c = 1\n    return (lambda a: a + c)(b)",
  "function_name": "func",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def foo(a: str):\n    return a + 'world'",
  "changed_function": "def foo(b: str):\n    return b + 'world'",
  "function_name": "foo",
  "inputs": [
   "'hello'",
   "'goodbye'",
   "'nice'",
   "'bad'",
   "'amazing'"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def foo(a: bool):\n    if a:\n        return 'True'\n    else:\n        return 'False'",
  "changed_function": "def foo(b: bool):\n    if b:\n        return 'True'\n    else:\n        return 'False'",
  "function_name": "foo",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def func6(x: int):\n  y = x + 1\n  z = lambda x: x + y\n  return z(x)",
  "changed_function": "def func6(a: int):\n  b = a + 1\n  z = lambda x: x + b\n  return z(a)",
  "function_name": "func6",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "z",
  "original_function": "def func9(a: int):\n  b = a + 1\n  c = lambda x: x + b\n  return c(a)",
  "changed_function": "def func9(z: int):\n  b = z + 1\n  c = lambda x: x + b\n  return c(z)",
  "function_name": "func9",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def f(n: int):\n    p = 1\n    for i in range(n):\n        p *= 2\n    return p",
  "changed_function": "def f(x: int):\n    p = 1\n    for i in range(x):\n        p *= 2\n    return p",
  "function_name": "f",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "b",
  "original_function": "def g(s: str):\n    n = len(s)\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(s[i])\n    return ''.join(result)",
  "changed_function": "def g(b: str):\n    n = len(b)\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(b[i])\n    return ''.join(result)",
  "function_name": "g",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"javascript\""
  ]
 },
 {
  "target_argument": "k",
  "change_to": "m",
  "original_function": "def k(k: int):\n    l = []\n    for i in range(k):\n        l.append(i * i)\n    return l",
  "changed_function": "def k(m: int):\n    l = []\n    for i in range(m):\n        l.append(i * i)\n    return l",
  "function_name": "k",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "b",
  "original_function": "def l(p: bool):\n    if p:\n        return True\n    else:\n        return False",
  "changed_function": "def l(b: bool):\n    if b:\n        return True\n    else:\n        return False",
  "function_name": "l",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "t",
  "original_function": "def m(a: int):\n    return a + 1",
  "changed_function": "def m(t: int):\n    return t + 1",
  "function_name": "m",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "x",
  "original_function": "def n(s: str):\n    return s + \"!\"",
  "changed_function": "def n(x: str):\n    return x + \"!\"",
  "function_name": "n",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"javascript\""
  ]
 },
 {
  "target_argument": "b",
  "change_to": "x",
  "original_function": "def o(b: bool):\n    if b:\n        return \"True\"\n    else:\n        return \"False\"",
  "changed_function": "def o(x: bool):\n    if x:\n        return \"True\"\n    else:\n        return \"False\"",
  "function_name": "o",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "c",
  "original_function": "def baz(x: list):\n    y = sorted(x, key = lambda x: x.lower())\n    return y",
  "changed_function": "def baz(c: list):\n    y = sorted(c, key = lambda x: x.lower())\n    return y",
  "function_name": "baz",
  "inputs": [
   "[\"apple\", \"banana\", \"cherry\"]",
   "[\"Dog\", \"cat\", \"fish\"]",
   "[\"red\", \"blue\", \"green\"]",
   "[\"1\", \"2\", \"3\"]",
   "[\"a\", \"b\", \"c\"]"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "f",
  "original_function": "def qux(l: list):\n    return sum([i for i in l if type(i) is int])",
  "changed_function": "def qux(f: list):\n    return sum([i for i in f if type(i) is int])",
  "function_name": "qux",
  "inputs": [
   "[1, 2, 3, \"a\", \"b\", \"c\"]",
   "[1, 2, \"a\", 3, 4, \"b\"]",
   "[\"a\", 1, 2, 3, \"b\", 4]",
   "[1, 2, \"a\", 3, 4, 5]",
   "[1, \"a\", 2, 3, \"b\", 4]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def quux(a: bool):\n    if a:\n        return \"True\"\n    else:\n        return \"False\"",
  "changed_function": "def quux(n: bool):\n    if n:\n        return \"True\"\n    else:\n        return \"False\"",
  "function_name": "quux",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "x",
  "original_function": "def spam(l: list):\n    result = []\n    for i in l:\n        if type(i) is int:\n            result.append(i * 2)\n        elif type(i) is str:\n            result.append(i.upper())\n        else:\n            result.append(i)\n    return result",
  "changed_function": "def spam(x: list):\n    result = []\n    for i in x:\n        if type(i) is int:\n            result.append(i * 2)\n        elif type(i) is str:\n            result.append(i.upper())\n        else:\n            result.append(i)\n    return result",
  "function_name": "spam",
  "inputs": [
   "[1, 2, \"a\", 3, \"b\"]",
   "[\"a\", 1, 2, \"b\", 3]",
   "[\"c\", 1, \"d\", 2, \"e\"]",
   "[1, 2, 3, \"a\", \"b\", 4]",
   "[1, \"a\", 2, \"b\", 3, 4]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "a",
  "original_function": "def ham(n: int):\n    return (lambda n: n * 2)(n)",
  "changed_function": "def ham(a: int):\n    return (lambda n: n * 2)(a)",
  "function_name": "ham",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def bacon(x: int):\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"",
  "changed_function": "def bacon(n: int):\n    if n % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"",
  "function_name": "bacon",
  "inputs": [
   "2",
   "3",
   "4",
   "5",
   "6"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def beans(a: list):\n    return len([i for i in a if type(i) is str])",
  "changed_function": "def beans(x: list):\n    return len([i for i in x if type(i) is str])",
  "function_name": "beans",
  "inputs": [
   "[\"a\", 1, 2, \"b\", 3]",
   "[\"c\", 1, \"d\", 2, \"e\"]",
   "[1, 2, \"a\", 3, \"b\", 4]",
   "[1, \"a\", 2, \"b\", 3, 4]",
   "[1, 2, 3, \"a\", \"b\", 4]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "w",
  "original_function": "def f6(x: bool):\n  w = True\n  return (lambda y: y and x)(lambda z: not x or z)\n",
  "changed_function": "def f6(w: bool):\n  x = True\n  return (lambda y: y and w)(lambda z: not w or z)\n",
  "function_name": "f6",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "x",
  "original_function": "def find_sum_of_even_numbers(s: list):\n  sum = 0\n  for i in range(len(s)):\n    if s[i] % 2 == 0:\n      sum += s[i]\n  return sum",
  "changed_function": "def find_sum_of_even_numbers(x: list):\n  sum = 0\n  for i in range(len(x)):\n    if x[i] % 2 == 0:\n      sum += x[i]\n  return sum",
  "function_name": "find_sum_of_even_numbers",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[1, 3, 5, 7, 9]",
   "[2, 4, 6, 8, 10]",
   "[1, 2, 3, 4, 5, 6]",
   "[1, 2, 2, 3, 3, 4, 4, 5, 5, 6]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def check_if_list_is_sorted(x: list):\n  for i in range(len(x) - 1):\n    if x[i] > x[i + 1]:\n      return False\n  return True",
  "changed_function": "def check_if_list_is_sorted(z: list):\n  for i in range(len(z) - 1):\n    if z[i] > z[i + 1]:\n      return False\n  return True",
  "function_name": "check_if_list_is_sorted",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[1, 3, 5, 7, 9]",
   "[5, 4, 3, 2, 1]",
   "[2, 2, 2, 2, 2]",
   "[1, 2, 3, 3, 4, 5]"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "p",
  "original_function": "def find_the_max_number(nums: list):\n  max_num = nums[0]\n  for i in range(1, len(nums)):\n    if nums[i] > max_num:\n      max_num = nums[i]\n  return max_num",
  "changed_function": "def find_the_max_number(p: list):\n  max_num = p[0]\n  for i in range(1, len(p)):\n    if p[i] > max_num:\n      max_num = p[i]\n  return max_num",
  "function_name": "find_the_max_number",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[1, 3, 5, 7, 9]",
   "[5, 4, 3, 2, 1]",
   "[2, 2, 2, 2, 2]",
   "[1, 2, 3, 3, 4, 5]"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "t",
  "original_function": "def count_vowels(text: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for char in text:\n    if char in vowels:\n      count += 1\n  return count",
  "changed_function": "def count_vowels(t: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for char in t:\n    if char in vowels:\n      count += 1\n  return count",
  "function_name": "count_vowels",
  "inputs": [
   "'hello world'",
   "'this is a test'",
   "'python is fun'",
   "'programming is great'",
   "'coding is cool'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "y",
  "original_function": "def is_prime(n: int):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True",
  "changed_function": "def is_prime(y: int):\n  if y <= 1:\n    return False\n  for i in range(2, int(y**0.5) + 1):\n    if y % i == 0:\n      return False\n  return True",
  "function_name": "is_prime",
  "inputs": [
   "2",
   "3",
   "4",
   "5",
   "7"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def reverse_string(s: str):\n  return s[::-1]",
  "changed_function": "def reverse_string(t: str):\n  return t[::-1]",
  "function_name": "reverse_string",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'coding'",
   "'programming'"
  ]
 },
 {
  "target_argument": "str1",
  "change_to": "a",
  "original_function": "def check_if_two_strings_are_anagrams(str1: str, str2: str):\n  if len(str1) != len(str2):\n    return False\n  str1 = sorted(str1)\n  str2 = sorted(str2)\n  return str1 == str2",
  "changed_function": "def check_if_two_strings_are_anagrams(a: str, str2: str):\n  if len(a) != len(str2):\n    return False\n  a = sorted(a)\n  str2 = sorted(str2)\n  return a == str2",
  "function_name": "check_if_two_strings_are_anagrams",
  "inputs": [
   "'listen', 'silent'",
   "'hello', 'world'",
   "'racecar', 'carrace'",
   "'rat', 'art'",
   "'debitcard', 'badcredit'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def find_the_sum_of_digits(n: int):\n  sum = 0\n  while n > 0:\n    digit = n % 10\n    sum += digit\n    n //= 10\n  return sum",
  "changed_function": "def find_the_sum_of_digits(m: int):\n  sum = 0\n  while m > 0:\n    digit = m % 10\n    sum += digit\n    m //= 10\n  return sum",
  "function_name": "find_the_sum_of_digits",
  "inputs": [
   "123",
   "456",
   "789",
   "1000",
   "12345"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "z",
  "original_function": "def bar(s: int):\n  a = s\n  return (lambda s: s + 1)(a)",
  "changed_function": "def bar(z: int):\n  a = z\n  return (lambda s: s + 1)(a)",
  "function_name": "bar",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def baz(a: str):\n  b = a\n  return (lambda a: a + \"a\")(b)",
  "changed_function": "def baz(x: str):\n  b = x\n  return (lambda a: a + \"a\")(b)",
  "function_name": "baz",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"javascript\"",
   "\"c++\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def foo(a: bool):\n  b = a\n  return (lambda a: a or False)(b)",
  "changed_function": "def foo(b: bool):\n  c = b\n  return (lambda a: a or False)(c)",
  "function_name": "foo",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "i",
  "change_to": "j",
  "original_function": "def qux(i: int):\n  a = [i for i in range(i)]\n  return a",
  "changed_function": "def qux(j: int):\n  a = [i for i in range(j)]\n  return a",
  "function_name": "qux",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "x",
  "original_function": "def quux(s: list):\n  t = [s for s in s]\n  return t",
  "changed_function": "def quux(x: list):\n  t = [s for s in x]\n  return t",
  "function_name": "quux",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "z",
  "original_function": "def fred(y: str):\n  y = y * 2\n  return (lambda y: y + \"!\")(y)",
  "changed_function": "def fred(z: str):\n  z = z * 2\n  return (lambda y: y + \"!\")(z)",
  "function_name": "fred",
  "inputs": [
   "\"abc\"",
   "\"def\"",
   "\"ghi\"",
   "\"jkl\"",
   "\"mno\""
  ]
 },
 {
  "target_argument": "t",
  "change_to": "q",
  "original_function": "def plugh(t: bool):\n  return (lambda t: t and True)(t)",
  "changed_function": "def plugh(q: bool):\n  return (lambda t: t and True)(q)",
  "function_name": "plugh",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "k",
  "original_function": "def xyzzy(l: list):\n  return (lambda l: l[0])(l)",
  "changed_function": "def xyzzy(k: list):\n  return (lambda l: l[0])(k)",
  "function_name": "xyzzy",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def thud(a: int):\n  b = a\n  return (lambda a: a * 2)(b)",
  "changed_function": "def thud(x: int):\n  b = x\n  return (lambda a: a * 2)(b)",
  "function_name": "thud",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "b",
  "original_function": "def twiddle(f: str):\n  g = f + \"!\"\n  return (lambda f: f + \"?\")(g)",
  "changed_function": "def twiddle(b: str):\n  g = b + \"!\"\n  return (lambda f: f + \"?\")(g)",
  "function_name": "twiddle",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"javascript\"",
   "\"c++\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def count_even_nums(n: list):\n  count = 0\n  for i in n:\n    if i % 2 == 0:\n      count += 1\n  return count",
  "changed_function": "def count_even_nums(x: list):\n  count = 0\n  for i in x:\n    if i % 2 == 0:\n      count += 1\n  return count",
  "function_name": "count_even_nums",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[2, 4, 6, 8, 10]",
   "[1, 3, 5, 7, 9]",
   "[10, 20, 30, 40, 50]",
   "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "x",
  "original_function": "def count_vowels(s: str):\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  count = 0\n  for char in s:\n    if char.lower() in vowels:\n      count += 1\n  return count",
  "changed_function": "def count_vowels(x: str):\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  count = 0\n  for char in x:\n    if char.lower() in vowels:\n      count += 1\n  return count",
  "function_name": "count_vowels",
  "inputs": [
   "\"hello world\"",
   "\"python programming\"",
   "\"data science\"",
   "\"artificial intelligence\"",
   "\"machine learning\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def find_max(a: list):\n  max_value = a[0]\n  for i in a:\n    if i > max_value:\n      max_value = i\n  return max_value",
  "changed_function": "def find_max(x: list):\n  max_value = x[0]\n  for i in x:\n    if i > max_value:\n      max_value = i\n  return max_value",
  "function_name": "find_max",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 20, 30, 40, 50]",
   "[1, 3, 5, 7, 9]",
   "[100, 200, 300, 400, 500]",
   "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "x",
  "original_function": "def reverse_string(s: str):\n  reversed_str = ''\n  for char in s:\n    reversed_str = char + reversed_str\n  return reversed_str",
  "changed_function": "def reverse_string(x: str):\n  reversed_str = ''\n  for char in x:\n    reversed_str = char + reversed_str\n  return reversed_str",
  "function_name": "reverse_string",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"data science\""
  ]
 },
 {
  "target_argument": "s",
  "change_to": "x",
  "original_function": "def is_palindrome(s: str):\n  s = s.lower().replace(' ', '')\n  return s == s[::-1]",
  "changed_function": "def is_palindrome(x: str):\n  x = x.lower().replace(' ', '')\n  return x == x[::-1]",
  "function_name": "is_palindrome",
  "inputs": [
   "\"racecar\"",
   "\"level\"",
   "\"madam\"",
   "\"rotor\"",
   "\"noon\""
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "x",
  "original_function": "def sum_squares(nums: list):\n  total = 0\n  for n in nums:\n    total += n * n\n  return total",
  "changed_function": "def sum_squares(x: list):\n  total = 0\n  for n in x:\n    total += n * n\n  return total",
  "function_name": "sum_squares",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[1, 2, 3, 4, 5]"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "x",
  "original_function": "def find_min(nums: list):\n  min_value = nums[0]\n  for n in nums:\n    if n < min_value:\n      min_value = n\n  return min_value",
  "changed_function": "def find_min(x: list):\n  min_value = x[0]\n  for n in x:\n    if n < min_value:\n      min_value = n\n  return min_value",
  "function_name": "find_min",
  "inputs": [
   "[5, 4, 3, 2, 1]",
   "[10, 9, 8, 7, 6]",
   "[15, 14, 13, 12, 11]",
   "[20, 19, 18, 17, 16]",
   "[5, 1, 8, 2, 9]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def is_even(x: int):\n  return x % 2 == 0",
  "changed_function": "def is_even(a: int):\n  return a % 2 == 0",
  "function_name": "is_even",
  "inputs": [
   "2",
   "4",
   "6",
   "8",
   "10"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "x",
  "original_function": "def is_empty_string(s: str):\n  return s == ''",
  "changed_function": "def is_empty_string(x: str):\n  return x == ''",
  "function_name": "is_empty_string",
  "inputs": [
   "\"\"",
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def func1(a: int):\n  b = [1, 2, 3]\n  c = lambda x: x + a\n  return c(a)",
  "changed_function": "def func1(x: int):\n  b = [1, 2, 3]\n  c = lambda y: y + x\n  return c(x)",
  "function_name": "func1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "y",
  "original_function": "def func2(b: bool):\n  if b:\n    c = lambda x: x + 1\n    return c(b)\n  else:\n    return 0",
  "changed_function": "def func2(y: bool):\n  if y:\n    c = lambda x: x + 1\n    return c(y)\n  else:\n    return 0",
  "function_name": "func2",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "c",
  "change_to": "z",
  "original_function": "def func3(c: str):\n  d = lambda x: x + c\n  return d(c)",
  "changed_function": "def func3(z: str):\n  d = lambda x: x + z\n  return d(z)",
  "function_name": "func3",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'language'"
  ]
 },
 {
  "target_argument": "d",
  "change_to": "w",
  "original_function": "def func4(d: list):\n  e = lambda x: x + d[0]\n  return e(d[1])",
  "changed_function": "def func4(w: list):\n  e = lambda x: x + w[0]\n  return e(w[1])",
  "function_name": "func4",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "e",
  "change_to": "t",
  "original_function": "def func5(e: int):\n  f = lambda x: x + e\n  return f(e)",
  "changed_function": "def func5(t: int):\n  f = lambda x: x + t\n  return f(t)",
  "function_name": "func5",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "u",
  "original_function": "def func6(f: str):\n  g = lambda x: x + f\n  return g(f)",
  "changed_function": "def func6(u: str):\n  g = lambda x: x + u\n  return g(u)",
  "function_name": "func6",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'language'"
  ]
 },
 {
  "target_argument": "g",
  "change_to": "v",
  "original_function": "def func7(g: bool):\n  h = lambda x: x + g\n  return h(g)",
  "changed_function": "def func7(v: bool):\n  h = lambda x: x + v\n  return h(v)",
  "function_name": "func7",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "h",
  "change_to": "w",
  "original_function": "def func8(h: list):\n  i = lambda x: x + h[0]\n  return i(h[1])",
  "changed_function": "def func8(w: list):\n  i = lambda x: x + w[0]\n  return i(w[1])",
  "function_name": "func8",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "i",
  "change_to": "x",
  "original_function": "def func9(i: int):\n  j = lambda x: x + i\n  return j(i)",
  "changed_function": "def func9(x: int):\n  j = lambda y: y + x\n  return j(x)",
  "function_name": "func9",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "j",
  "change_to": "y",
  "original_function": "def func10(j: str):\n  k = lambda x: x + j\n  return k(j)",
  "changed_function": "def func10(y: str):\n  k = lambda x: x + y\n  return k(y)",
  "function_name": "func10",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'language'"
  ]
 },
 {
  "target_argument": "lst",
  "change_to": "arr",
  "original_function": "def check_list(lst: list):\n  for i in lst:\n    if isinstance(i, int) and i > 10:\n      return True\n  return False",
  "changed_function": "def check_list(arr: list):\n  for i in arr:\n    if isinstance(i, int) and i > 10:\n      return True\n  return False",
  "function_name": "check_list",
  "inputs": [
   "[1, 2, 3]",
   "[11, 12, 13]",
   "[1, 2, 'hello']",
   "[10, 11, 12]",
   "[1, 2, 3, 11]"
  ]
 },
 {
  "target_argument": "numbers",
  "change_to": "nums",
  "original_function": "def count_even(numbers: list):\n  even_count = 0\n  for num in numbers:\n    if num % 2 == 0:\n      even_count += 1\n  return even_count",
  "changed_function": "def count_even(nums: list):\n  even_count = 0\n  for num in nums:\n    if num % 2 == 0:\n      even_count += 1\n  return even_count",
  "function_name": "count_even",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[2, 4, 6, 8, 10]",
   "[1, 3, 5, 7, 9]",
   "[2, 3, 4, 5, 6]",
   "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
  ]
 },
 {
  "target_argument": "value",
  "change_to": "val",
  "original_function": "def is_prime(value: int):\n  if value <= 1:\n    return False\n  for i in range(2, int(value**0.5) + 1):\n    if value % i == 0:\n      return False\n  return True",
  "changed_function": "def is_prime(val: int):\n  if val <= 1:\n    return False\n  for i in range(2, int(val**0.5) + 1):\n    if val % i == 0:\n      return False\n  return True",
  "function_name": "is_prime",
  "inputs": [
   "2",
   "3",
   "4",
   "7",
   "11"
  ]
 },
 {
  "target_argument": "word",
  "change_to": "wrd",
  "original_function": "def capitalize_first(word: str):\n  if len(word) > 0:\n    return word[0].upper() + word[1:]\n  return word",
  "changed_function": "def capitalize_first(wrd: str):\n  if len(wrd) > 0:\n    return wrd[0].upper() + wrd[1:]\n  return wrd",
  "function_name": "capitalize_first",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'example'"
  ]
 },
 {
  "target_argument": "input_string",
  "change_to": "str",
  "original_function": "def reverse_string(input_string: str):\n  return input_string[::-1]",
  "changed_function": "def reverse_string(str: str):\n  return str[::-1]",
  "function_name": "reverse_string",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'example'"
  ]
 },
 {
  "target_argument": "message",
  "change_to": "msg",
  "original_function": "def encrypt_message(message: str):\n  encrypted = ''\n  for char in message:\n    encrypted += chr(ord(char) + 3)\n  return encrypted",
  "changed_function": "def encrypt_message(msg: str):\n  encrypted = ''\n  for char in msg:\n    encrypted += chr(ord(char) + 3)\n  return encrypted",
  "function_name": "encrypt_message",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'example'"
  ]
 },
 {
  "target_argument": "data",
  "change_to": "dt",
  "original_function": "def sort_data(data: list):\n  data.sort()\n  return data",
  "changed_function": "def sort_data(dt: list):\n  dt.sort()\n  return dt",
  "function_name": "sort_data",
  "inputs": [
   "[5, 2, 8, 1, 9]",
   "[10, 20, 30, 40, 50]",
   "[1, 3, 5, 7, 9]",
   "[2, 4, 6, 8, 10]",
   "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
  ]
 },
 {
  "target_argument": "input",
  "change_to": "inp",
  "original_function": "def sum_digits(input: int):\n  sum = 0\n  while input > 0:\n    sum += input % 10\n    input //= 10\n  return sum",
  "changed_function": "def sum_digits(inp: int):\n  sum = 0\n  while inp > 0:\n    sum += inp % 10\n    inp //= 10\n  return sum",
  "function_name": "sum_digits",
  "inputs": [
   "123",
   "456",
   "789",
   "101",
   "1000"
  ]
 },
 {
  "target_argument": "sentence",
  "change_to": "sent",
  "original_function": "def count_words(sentence: str):\n  words = sentence.split()\n  return len(words)",
  "changed_function": "def count_words(sent: str):\n  words = sent.split()\n  return len(words)",
  "function_name": "count_words",
  "inputs": [
   "'Hello world'",
   "'This is a sentence'",
   "'One two three'",
   "'How are you doing?'",
   "'Python programming'"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "a",
  "original_function": "def func1(b: int):\n  c = 10\n  d = lambda x: x + b\n  return d(c)",
  "changed_function": "def func1(a: int):\n  c = 10\n  d = lambda x: x + a\n  return d(c)",
  "function_name": "func1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def func3(a: bool):\n  b = 10\n  c = lambda x: x if a else x + b\n  return c(5)",
  "changed_function": "def func3(b: bool):\n  a = 10\n  c = lambda x: x if b else x + a\n  return c(5)",
  "function_name": "func3",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def func4(x: int):\n  a = lambda y: x + y\n  b = lambda z: z + a(1)\n  return b(5)",
  "changed_function": "def func4(a: int):\n  b = lambda y: a + y\n  c = lambda z: z + b(1)\n  return c(5)",
  "function_name": "func4",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def func5(a: str):\n  x = lambda b: a + b\n  y = lambda c: x(c)\n  return y('hello')",
  "changed_function": "def func5(x: str):\n  a = lambda b: x + b\n  y = lambda c: a(c)\n  return y('hello')",
  "function_name": "func5",
  "inputs": [
   "'world'",
   "'python'",
   "'programming'",
   "'language'",
   "'data'"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "a",
  "original_function": "def func6(b: int):\n  a = [1, 2, 3]\n  c = lambda x: x * b\n  return c(a)",
  "changed_function": "def func6(a: int):\n  b = [1, 2, 3]\n  c = lambda x: x * a\n  return c(b)",
  "function_name": "func6",
  "inputs": [
   "2",
   "3",
   "4",
   "5",
   "6"
  ]
 },
 {
  "target_argument": "d",
  "change_to": "a",
  "original_function": "def func7(d: bool):\n  a = 10\n  b = lambda x: x + 1 if d else x - 1\n  return b(a)",
  "changed_function": "def func7(a: bool):\n  b = 10\n  c = lambda x: x + 1 if a else x - 1\n  return c(b)",
  "function_name": "func7",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "a",
  "original_function": "def func8(y: str):\n  a = lambda x: x + y\n  b = lambda z: a(z)\n  return b('hello')",
  "changed_function": "def func8(a: str):\n  b = lambda x: x + a\n  c = lambda z: b(z)\n  return c('hello')",
  "function_name": "func8",
  "inputs": [
   "'world'",
   "'python'",
   "'programming'",
   "'language'",
   "'data'"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "z",
  "original_function": "def func9(a: int):\n  b = 10\n  c = lambda x: x * a\n  d = lambda y: c(y) + b\n  return d(5)",
  "changed_function": "def func9(z: int):\n  b = 10\n  c = lambda x: x * z\n  d = lambda y: c(y) + b\n  return d(5)",
  "function_name": "func9",
  "inputs": [
   "2",
   "3",
   "4",
   "5",
   "6"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def func10(x: bool):\n  a = lambda y: y if x else y + 1\n  b = lambda z: a(z)\n  return b(5)",
  "changed_function": "def func10(a: bool):\n  b = lambda y: y if a else y + 1\n  c = lambda z: b(z)\n  return c(5)",
  "function_name": "func10",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "c",
  "original_function": "def func3(y: bool):\n  x = True\n  if y:\n    return (lambda y: y and x)(lambda a: a or y)\n  else:\n    return (lambda y: not y)(lambda a: not y)",
  "changed_function": "def func3(c: bool):\n  x = True\n  if c:\n    return (lambda y: y and x)(lambda a: a or c)\n  else:\n    return (lambda y: not y)(lambda a: not y)",
  "function_name": "func3",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "False"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def foo(n: int):\n  l = []\n  for i in range(n):\n    l.append(i)\n  if len(l) > 5:\n    return True\n  else:\n    return False",
  "changed_function": "def foo(x: int):\n  l = []\n  for i in range(x):\n    l.append(i)\n  if len(l) > 5:\n    return True\n  else:\n    return False",
  "function_name": "foo",
  "inputs": [
   "5",
   "10",
   "2",
   "1",
   "15"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "n",
  "original_function": "def bar(s: str):\n  if len(s) > 10:\n    return True\n  else:\n    return False",
  "changed_function": "def bar(n: str):\n  if len(n) > 10:\n    return True\n  else:\n    return False",
  "function_name": "bar",
  "inputs": [
   "\"hello world\"",
   "\"short string\"",
   "\"This is a long string that should be longer than 10 characters\"",
   "\"another string\"",
   "\"a bit longer string\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "i",
  "original_function": "def baz(a: bool):\n  if a:\n    return True\n  else:\n    return False",
  "changed_function": "def baz(i: bool):\n  if i:\n    return True\n  else:\n    return False",
  "function_name": "baz",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "list1",
  "change_to": "x",
  "original_function": "def qux(list1: list):\n  if len(list1) > 0:\n    return True\n  else:\n    return False",
  "changed_function": "def qux(x: list):\n  if len(x) > 0:\n    return True\n  else:\n    return False",
  "function_name": "qux",
  "inputs": [
   "[1, 2, 3]",
   "[]",
   "[1]",
   "[1, 2, 3, 4]",
   "[1, 2, 3, 4, 5]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def quux(n: int):\n  result = 0\n  for i in range(n):\n    result += i\n  return result",
  "changed_function": "def quux(x: int):\n  result = 0\n  for i in range(x):\n    result += i\n  return result",
  "function_name": "quux",
  "inputs": [
   "5",
   "10",
   "2",
   "1",
   "15"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "n",
  "original_function": "def corge(s: str):\n  return len(s)",
  "changed_function": "def corge(n: str):\n  return len(n)",
  "function_name": "corge",
  "inputs": [
   "\"hello world\"",
   "\"short string\"",
   "\"This is a long string that should be longer than 10 characters\"",
   "\"another string\"",
   "\"a bit longer string\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def grault(a: bool):\n  if a:\n    return True\n  else:\n    return False",
  "changed_function": "def grault(x: bool):\n  if x:\n    return True\n  else:\n    return False",
  "function_name": "grault",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "x",
  "original_function": "def garply(l: list):\n  if len(l) > 0:\n    return True\n  else:\n    return False",
  "changed_function": "def garply(x: list):\n  if len(x) > 0:\n    return True\n  else:\n    return False",
  "function_name": "garply",
  "inputs": [
   "[1, 2, 3]",
   "[]",
   "[1]",
   "[1, 2, 3, 4]",
   "[1, 2, 3, 4, 5]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def waldo(x: int):\n  result = 0\n  for i in range(x):\n    result += i\n  return result",
  "changed_function": "def waldo(n: int):\n  result = 0\n  for i in range(n):\n    result += i\n  return result",
  "function_name": "waldo",
  "inputs": [
   "5",
   "10",
   "2",
   "1",
   "15"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def fred(s: str):\n  return len(s)",
  "changed_function": "def fred(a: str):\n  return len(a)",
  "function_name": "fred",
  "inputs": [
   "\"hello world\"",
   "\"short string\"",
   "\"This is a long string that should be longer than 10 characters\"",
   "\"another string\"",
   "\"a bit longer string\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def f1(a: int):\n  b = a + 1\n  c = b * 2\n  return (lambda a: a + c)(a)",
  "changed_function": "def f1(x: int):\n  b = x + 1\n  c = b * 2\n  return (lambda a: a + c)(x)",
  "function_name": "f1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "y",
  "original_function": "def f2(b: bool):\n  if b:\n    a = 1\n  else:\n    a = 0\n  return (lambda b: a + b)(b)",
  "changed_function": "def f2(y: bool):\n  if y:\n    a = 1\n  else:\n    a = 0\n  return (lambda b: a + b)(y)",
  "function_name": "f2",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "c",
  "change_to": "z",
  "original_function": "def f3(c: str):\n  d = c[0]\n  return (lambda c: d + c)(c)",
  "changed_function": "def f3(z: str):\n  d = z[0]\n  return (lambda c: d + c)(z)",
  "function_name": "f3",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"javascript\"",
   "\"programming\""
  ]
 },
 {
  "target_argument": "d",
  "change_to": "a",
  "original_function": "def f4(d: int):\n  e = d + 1\n  f = e * 2\n  return (lambda d: d + f)(d)",
  "changed_function": "def f4(d: int):\n  e = d + 1\n  f = e * 2\n  return (lambda a: a + f)(d)",
  "function_name": "f4",
  "inputs": [
   "10",
   "20",
   "30",
   "40",
   "50"
  ]
 },
 {
  "target_argument": "e",
  "change_to": "b",
  "original_function": "def f5(e: list):\n  f = len(e)\n  return (lambda e: e[f - 1])(e)",
  "changed_function": "def f5(e: list):\n  f = len(e)\n  return (lambda b: b[f - 1])(e)",
  "function_name": "f5",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "c",
  "original_function": "def f6(f: int):\n  g = f * 2\n  return (lambda f: f + g)(f)",
  "changed_function": "def f6(f: int):\n  g = f * 2\n  return (lambda c: c + g)(f)",
  "function_name": "f6",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "g",
  "change_to": "d",
  "original_function": "def f7(g: str):\n  h = g.upper()\n  return (lambda g: h + g)(g)",
  "changed_function": "def f7(g: str):\n  h = g.upper()\n  return (lambda d: h + d)(g)",
  "function_name": "f7",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"javascript\"",
   "\"programming\""
  ]
 },
 {
  "target_argument": "h",
  "change_to": "e",
  "original_function": "def f8(h: bool):\n  i = h\n  return (lambda h: i and h)(h)",
  "changed_function": "def f8(h: bool):\n  i = h\n  return (lambda e: i and e)(h)",
  "function_name": "f8",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "i",
  "change_to": "f",
  "original_function": "def f9(i: int):\n  j = i + 1\n  return (lambda i: i + j)(i)",
  "changed_function": "def f9(i: int):\n  j = i + 1\n  return (lambda f: f + j)(i)",
  "function_name": "f9",
  "inputs": [
   "10",
   "20",
   "30",
   "40",
   "50"
  ]
 },
 {
  "target_argument": "j",
  "change_to": "g",
  "original_function": "def f10(j: list):\n  k = len(j)\n  return (lambda j: j[k - 1])(j)",
  "changed_function": "def f10(j: list):\n  k = len(j)\n  return (lambda g: g[k - 1])(j)",
  "function_name": "f10",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def func2(n: int):\n    count = 0\n    res = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    return (n | res)",
  "changed_function": "def func2(x: int):\n    count = 0\n    res = 0\n    temp = x\n    while temp > 0:\n        if count % 2 == 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    return (x | res)",
  "function_name": "func2",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "y",
  "original_function": "def func3(p: bool):\n    y = 10\n    if p:\n        y = y - 1\n    return y",
  "changed_function": "def func3(y: bool):\n    a = 10\n    if y:\n        a = a - 1\n    return a",
  "function_name": "func3",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "False"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "b",
  "original_function": "def func4(s: str):\n    b = 10\n    for i in range(len(s)):\n        b += ord(s[i])\n    return b",
  "changed_function": "def func4(b: str):\n    a = 10\n    for i in range(len(b)):\n        a += ord(b[i])\n    return a",
  "function_name": "func4",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"data\"",
   "\"science\""
  ]
 },
 {
  "target_argument": "l",
  "change_to": "z",
  "original_function": "def func5(l: list):\n    sum = 0\n    for x in l:\n        sum += x\n    return sum",
  "changed_function": "def func5(z: list):\n    sum = 0\n    for x in z:\n        sum += x\n    return sum",
  "function_name": "func5",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9, 10]",
   "[11, 12, 13, 14, 15]"
  ]
 },
 {
  "target_argument": "r",
  "change_to": "p",
  "original_function": "def func7(r: int):\n    n = 10\n    for i in range(r):\n        n = n * i\n    return n",
  "changed_function": "def func7(p: int):\n    n = 10\n    for i in range(p):\n        n = n * i\n    return n",
  "function_name": "func7",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "x",
  "original_function": "def func8(m: int):\n    x = 10\n    while x > 0:\n        m = m * 2\n        x -= 1\n    return m",
  "changed_function": "def func8(x: int):\n    y = 10\n    while y > 0:\n        x = x * 2\n        y -= 1\n    return x",
  "function_name": "func8",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "v",
  "change_to": "n",
  "original_function": "def func9(v: str):\n    n = 10\n    for x in v:\n        n = n + ord(x)\n    return n",
  "changed_function": "def func9(n: str):\n    m = 10\n    for x in n:\n        m = m + ord(x)\n    return m",
  "function_name": "func9",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"data\"",
   "\"science\""
  ]
 },
 {
  "target_argument": "w",
  "change_to": "y",
  "original_function": "def func10(w: bool):\n    y = 10\n    if w:\n        y = y * 2\n    else:\n        y = y / 2\n    return y",
  "changed_function": "def func10(y: bool):\n    z = 10\n    if y:\n        z = z * 2\n    else:\n        z = z / 2\n    return z",
  "function_name": "func10",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "False"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "values",
  "original_function": "def calculate_average(nums: list[int]):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum / len(nums)",
  "changed_function": "def calculate_average(values: list[int]):\n    sum = 0\n    for num in values:\n        sum += num\n    return sum / len(values)",
  "function_name": "calculate_average",
  "inputs": [
   "[-1,2,3]",
   "[1,2,3]",
   "[2,4,6]",
   "[-3,5,7,9]",
   "[-10,11]"
  ]
 },
 {
  "target_argument": "k",
  "change_to": "n",
  "original_function": "def find_nth_largest(numbers: list[int], k: int):\n    numbers.sort()\n    return numbers[len(numbers) - k]",
  "changed_function": "def find_nth_largest(numbers: list[int], n: int):\n    numbers.sort()\n    return numbers[len(numbers) - n]",
  "function_name": "find_nth_largest",
  "inputs": [
   "[1,2,3,4,5,6,7], 3",
   "[1,2,3,4,5,6,7], 2",
   "[1,2,3,4,5,6,7], 1",
   "[2,4,6,8,10,12,14], 5",
   "[2,4,6,8,10,12,14], 2"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "text",
  "original_function": "def count_vowels(s: str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count",
  "changed_function": "def count_vowels(text: str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in text:\n        if char in vowels:\n            count += 1\n    return count",
  "function_name": "count_vowels",
  "inputs": [
   "'hello world'",
   "'this is a test string'",
   "'programming is fun'",
   "'apple banana orange'",
   "'quick brown fox jumps over the lazy dog'"
  ]
 },
 {
  "target_argument": "word",
  "change_to": "str",
  "original_function": "def is_palindrome(word: str):\n    return word == word[::-1]",
  "changed_function": "def is_palindrome(str: str):\n    return str == str[::-1]",
  "function_name": "is_palindrome",
  "inputs": [
   "'racecar'",
   "'level'",
   "'madam'",
   "'hello'",
   "'world'"
  ]
 },
 {
  "target_argument": "sentence",
  "change_to": "text",
  "original_function": "def count_words(sentence: str):\n    words = sentence.split()\n    return len(words)",
  "changed_function": "def count_words(text: str):\n    words = text.split()\n    return len(words)",
  "function_name": "count_words",
  "inputs": [
   "'this is a test sentence'",
   "'quick brown fox jumps over the lazy dog'",
   "'hello world how are you'",
   "'the cat sat on the mat'",
   "'one two three four five'"
  ]
 },
 {
  "target_argument": "items",
  "change_to": "elements",
  "original_function": "def find_max(items: list[int]):\n    max_value = items[0]\n    for item in items:\n        if item > max_value:\n            max_value = item\n    return max_value",
  "changed_function": "def find_max(elements: list[int]):\n    max_value = elements[0]\n    for item in elements:\n        if item > max_value:\n            max_value = item\n    return max_value",
  "function_name": "find_max",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[-1, 2, 3, -4, 5]",
   "[2, 4, 6, 8, 10]",
   "[-3, 5, 7, 9, 11]",
   "[-10, 11, -12, 13]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "input_str",
  "original_function": "def reverse_string(s: str):\n    return s[::-1]",
  "changed_function": "def reverse_string(input_str: str):\n    return input_str[::-1]",
  "function_name": "reverse_string",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'javascript'"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "numbers",
  "original_function": "def sum_of_squares(nums: list[int]):\n    sum = 0\n    for num in nums:\n        sum += num * num\n    return sum",
  "changed_function": "def sum_of_squares(numbers: list[int]):\n    sum = 0\n    for num in numbers:\n        sum += num * num\n    return sum",
  "function_name": "sum_of_squares",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[-1, 2, 3, -4, 5]",
   "[2, 4, 6, 8, 10]",
   "[-3, 5, 7, 9, 11]",
   "[-10, 11, -12, 13]"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "string",
  "original_function": "def capitalize_words(text: str):\n    words = text.split()\n    capitalized_words = [word.capitalize() for word in words]\n    return ' '.join(capitalized_words)",
  "changed_function": "def capitalize_words(string: str):\n    words = string.split()\n    capitalized_words = [word.capitalize() for word in words]\n    return ' '.join(capitalized_words)",
  "function_name": "capitalize_words",
  "inputs": [
   "'hello world'",
   "'this is a test sentence'",
   "'quick brown fox jumps over the lazy dog'",
   "'the cat sat on the mat'",
   "'one two three four five'"
  ]
 },
 {
  "target_argument": "numbers",
  "change_to": "elements",
  "original_function": "def is_sorted(numbers: list[int]):\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i + 1]:\n            return False\n    return True",
  "changed_function": "def is_sorted(elements: list[int]):\n    for i in range(len(elements) - 1):\n        if elements[i] > elements[i + 1]:\n            return False\n    return True",
  "function_name": "is_sorted",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[2, 4, 6, 8, 10]",
   "[-3, 5, 7, 9, 11]",
   "[-10, 11, -12, 13]"
  ]
 },
 {
  "target_argument": "list",
  "change_to": "input_list",
  "original_function": "def count_even_in_list(list: list[int]):\n    count = 0\n    for x in list:\n        if x%2 == 0:\n            count = count + 1\n    return count",
  "changed_function": "def count_even_in_list(input_list: list[int]):\n    count = 0\n    for x in input_list:\n        if x%2 == 0:\n            count = count + 1\n    return count",
  "function_name": "count_even_in_list",
  "inputs": [
   "[1,2,3,4,5]",
   "[2,4,6,8]",
   "[1,3,5,7]",
   "[10,20,30]",
   "[1, 2, 3, 4]"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "l_2",
  "original_function": "def find_max_and_index(l: list[int]):\n    max_element = l[0]\n    max_index = 0\n    for i in range(len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n            max_index = i\n    return max_element, max_index",
  "changed_function": "def find_max_and_index(l_2: list[int]):\n    max_element = l_2[0]\n    max_index = 0\n    for i in range(len(l_2)):\n        if l_2[i] > max_element:\n            max_element = l_2[i]\n            max_index = i\n    return max_element, max_index",
  "function_name": "find_max_and_index",
  "inputs": [
   "[1,2,3,4]",
   "[1, 1, 1, 1]",
   "[10, 20, 30, 40]",
   "[1, 3, 5, 7, 9]",
   "[2, 4, 6, 8, 10]"
  ]
 },
 {
  "target_argument": "input_list",
  "change_to": "x",
  "original_function": "def find_the_first_positive(input_list: list[int]):\n    for x in input_list:\n        if x> 0:\n            return x\n    return None",
  "changed_function": "def find_the_first_positive(x: list[int]):\n    for x_1 in x:\n        if x_1> 0:\n            return x_1\n    return None",
  "function_name": "find_the_first_positive",
  "inputs": [
   "[-1, -2, -3]",
   "[1, 2, 3]",
   "[0, 1, 2, 3]",
   "[-1, 0, 1, 2, 3]",
   "[-1, -2, 0, 1]"
  ]
 },
 {
  "target_argument": "list",
  "change_to": "a",
  "original_function": "def sum_elements(list: list[int]):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum",
  "changed_function": "def sum_elements(a: list[int]):\n    sum_1 = 0\n    for i in a:\n        sum_1 += i\n    return sum_1",
  "function_name": "sum_elements",
  "inputs": [
   "[1,2,3,4]",
   "[2,4,6,8]",
   "[1,3,5,7]",
   "[10,20,30]",
   "[1, 2, 3, 4]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def my_func(x: int):\n  y = x + 1\n  z = lambda x: x * y\n  return z(x)",
  "changed_function": "def my_func(y: int):\n  a = y + 1\n  z = lambda x: x * a\n  return z(y)",
  "function_name": "my_func",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def func_one(a: bool):\n  if a:\n    x = lambda b: b + 1\n    return x(a)\n  else:\n    return 0",
  "changed_function": "def func_one(x: bool):\n  if x:\n    y = lambda b: b + 1\n    return y(x)\n  else:\n    return 0",
  "function_name": "func_one",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "b",
  "original_function": "def func_two(z: str):\n  a = [z, z]\n  b = lambda x: x + z\n  return b(a[0])",
  "changed_function": "def func_two(b: str):\n  a = [b, b]\n  c = lambda x: x + b\n  return c(a[0])",
  "function_name": "func_two",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"language\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "y",
  "original_function": "def func_three(a: int):\n  if a > 0:\n    x = lambda a: a + 1\n    return x(a)\n  else:\n    return 0",
  "changed_function": "def func_three(y: int):\n  if y > 0:\n    x = lambda a: a + 1\n    return x(y)\n  else:\n    return 0",
  "function_name": "func_three",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "b",
  "original_function": "def func_four(x: bool):\n  a = [x, x]\n  b = lambda x: x + x\n  return b(a[0])",
  "changed_function": "def func_four(b: bool):\n  a = [b, b]\n  c = lambda x: x + x\n  return c(a[0])",
  "function_name": "func_four",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "a",
  "original_function": "def func_five(y: str):\n  if len(y) > 3:\n    x = lambda y: y + \"!\"\n    return x(y)\n  else:\n    return y",
  "changed_function": "def func_five(a: str):\n  if len(a) > 3:\n    x = lambda y: y + \"!\"\n    return x(a)\n  else:\n    return a",
  "function_name": "func_five",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"language\""
  ]
 },
 {
  "target_argument": "b",
  "change_to": "z",
  "original_function": "def func_six(b: int):\n  a = lambda b: b + 1\n  return a(b)",
  "changed_function": "def func_six(z: int):\n  a = lambda b: b + 1\n  return a(z)",
  "function_name": "func_six",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "y",
  "original_function": "def func_seven(a: list):\n  if len(a) > 2:\n    x = lambda a: a[0] + a[1]\n    return x(a)\n  else:\n    return a",
  "changed_function": "def func_seven(y: list):\n  if len(y) > 2:\n    x = lambda a: a[0] + a[1]\n    return x(y)\n  else:\n    return y",
  "function_name": "func_seven",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "x",
  "original_function": "def func_eight(b: str):\n  a = lambda b: b.upper()\n  return a(b)",
  "changed_function": "def func_eight(x: str):\n  a = lambda b: b.upper()\n  return a(x)",
  "function_name": "func_eight",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"language\""
  ]
 },
 {
  "target_argument": "z",
  "change_to": "a",
  "original_function": "def func_nine(z: int):\n  if z > 0:\n    x = lambda z: z * z\n    return x(z)\n  else:\n    return 0",
  "changed_function": "def func_nine(a: int):\n  if a > 0:\n    x = lambda z: z * z\n    return x(a)\n  else:\n    return 0",
  "function_name": "func_nine",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def func1(a: int):\n  b = a + 1\n  c = (lambda a: a * 2)(a)\n  return b + c",
  "changed_function": "def func1(b: int):\n  d = b + 1\n  c = (lambda a: a * 2)(b)\n  return d + c",
  "function_name": "func1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func2(x: bool):\n  if x:\n    y = 1\n    z = (lambda x: x + 2)(y)\n  else:\n    y = 0\n    z = (lambda x: x - 1)(y)\n  return z",
  "changed_function": "def func2(y: bool):\n  if y:\n    w = 1\n    z = (lambda x: x + 2)(w)\n  else:\n    w = 0\n    z = (lambda x: x - 1)(w)\n  return z",
  "function_name": "func2",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "c",
  "original_function": "def func3(b: int):\n  a = b + 1\n  d = (lambda b: b * a)(b)\n  return d",
  "changed_function": "def func3(c: int):\n  a = c + 1\n  d = (lambda b: b * a)(c)\n  return d",
  "function_name": "func3",
  "inputs": [
   "10",
   "20",
   "30",
   "40",
   "50"
  ]
 },
 {
  "target_argument": "d",
  "change_to": "e",
  "original_function": "def func4(d: str):\n  f = [d]\n  g = (lambda d: len(d))(d)\n  return g",
  "changed_function": "def func4(e: str):\n  f = [e]\n  g = (lambda d: len(d))(e)\n  return g",
  "function_name": "func4",
  "inputs": [
   "\"abc\"",
   "\"def\"",
   "\"ghi\"",
   "\"jkl\"",
   "\"mno\""
  ]
 },
 {
  "target_argument": "f",
  "change_to": "g",
  "original_function": "def func5(f: int):\n  h = [f]\n  i = (lambda f: f + 1)(f)\n  return h, i",
  "changed_function": "def func5(g: int):\n  h = [g]\n  i = (lambda f: f + 1)(g)\n  return h, i",
  "function_name": "func5",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "j",
  "change_to": "k",
  "original_function": "def func6(j: str):\n  l = j.upper()\n  m = (lambda j: len(j))(l)\n  return m",
  "changed_function": "def func6(k: str):\n  l = k.upper()\n  m = (lambda j: len(j))(l)\n  return m",
  "function_name": "func6",
  "inputs": [
   "\"apple\"",
   "\"banana\"",
   "\"cherry\"",
   "\"grape\"",
   "\"kiwi\""
  ]
 },
 {
  "target_argument": "m",
  "change_to": "n",
  "original_function": "def func7(m: list):\n  o = (lambda m: sum(m))(m)\n  p = (lambda m: m.count(\"a\"))(m)\n  return o, p",
  "changed_function": "def func7(n: list):\n  o = (lambda m: sum(m))(n)\n  p = (lambda m: m.count(\"a\"))(n)\n  return o, p",
  "function_name": "func7",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "q",
  "original_function": "def func8(p: int):\n  r = (lambda p: p * 2)(p)\n  s = (lambda p: p ** 2)(p)\n  return r, s",
  "changed_function": "def func8(q: int):\n  r = (lambda p: p * 2)(q)\n  s = (lambda p: p ** 2)(q)\n  return r, s",
  "function_name": "func8",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "t",
  "change_to": "u",
  "original_function": "def func9(t: bool):\n  v = (lambda t: not t)(t)\n  w = (lambda t: t or False)(v)\n  return w",
  "changed_function": "def func9(u: bool):\n  v = (lambda t: not t)(u)\n  w = (lambda t: t or False)(v)\n  return w",
  "function_name": "func9",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func10(x: str):\n  z = (lambda x: x.lower())(x)\n  a = (lambda x: len(z))(x)\n  return a",
  "changed_function": "def func10(y: str):\n  z = (lambda x: x.lower())(y)\n  b = (lambda x: len(z))(y)\n  return b",
  "function_name": "func10",
  "inputs": [
   "\"Hello\"",
   "\"World\"",
   "\"Python\"",
   "\"Java\"",
   "\"C++\""
  ]
 },
 {
  "target_argument": "f",
  "change_to": "a",
  "original_function": "def myfunc (f: int):\n    a = [1]\n    for i in range(1, 5):\n        a.append(i * f)\n    return a",
  "changed_function": "def myfunc (a: int):\n    b = [1]\n    for i in range(1, 5):\n        b.append(i * a)\n    return b",
  "function_name": "myfunc",
  "inputs": [
   "10",
   "20",
   "30",
   "40",
   "50"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "d",
  "original_function": "def get_value(f: list):\n    a = 0\n    for i in range(len(f)):\n        a = a * f[i] + f[i]\n    return a",
  "changed_function": "def get_value(d: list):\n    a = 0\n    for i in range(len(d)):\n        a = a * d[i] + d[i]\n    return a",
  "function_name": "get_value",
  "inputs": [
   "[2, 5, 4]",
   "[1, 1, 1, 1, 1]",
   "[1, 1, 1, 1, 1, 1, 1]",
   "[3, 6, 7, 11]",
   "[8, 9, 1, 0]"
  ]
 },
 {
  "target_argument": "d",
  "change_to": "c",
  "original_function": "def function_f(d: list):\n    c = lambda f: f\n    a = c(d)\n    return a",
  "changed_function": "def function_f(c: list):\n    d = lambda f: f\n    a = d(c)\n    return a",
  "function_name": "function_f",
  "inputs": [
   "[2, 1, 1]",
   "[3, 1, 1]",
   "[1, 2, 3]",
   "[1, 1, 1]",
   "[1, 1, 1, 1, 1]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "h",
  "original_function": "def function_c(a: list):\n    b = 0\n    for i in range(len(a)):\n        b += a[i]\n    return b",
  "changed_function": "def function_c(h: list):\n    b = 0\n    for i in range(len(h)):\n        b += h[i]\n    return b",
  "function_name": "function_c",
  "inputs": [
   "[1, 2, 3, 4]",
   "[10, 1, 2]",
   "[1, 2, 1, 1, 1, 1, 1]",
   "[3, 2, 1, 1]",
   "[4, 5, 6]"
  ]
 },
 {
  "target_argument": "c",
  "change_to": "e",
  "original_function": "def function_e(c: int):\n    a = c\n    if c == 5:\n        a = c + 1\n    elif c > 5:\n        a = c - 1\n    else:\n        a = c - 2\n    return a",
  "changed_function": "def function_e(e: int):\n    a = e\n    if e == 5:\n        a = e + 1\n    elif e > 5:\n        a = e - 1\n    else:\n        a = e - 2\n    return a",
  "function_name": "function_e",
  "inputs": [
   "1",
   "5",
   "6",
   "10",
   "20"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "c",
  "original_function": "def function_g(a: bool):\n    b = 1\n    if a:\n        b += 2\n    else:\n        b += 1\n    return b",
  "changed_function": "def function_g(c: bool):\n    b = 1\n    if c:\n        b += 2\n    else:\n        b += 1\n    return b",
  "function_name": "function_g",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "m",
  "original_function": "def function_h(a: bool):\n    b = 1\n    if a:\n        b = 2\n    else:\n        b = 1\n    return b",
  "changed_function": "def function_h(m: bool):\n    b = 1\n    if m:\n        b = 2\n    else:\n        b = 1\n    return b",
  "function_name": "function_h",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "False"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def func4(n: int):\n  def inner(n: int):\n    return n * 2\n  return inner(n)",
  "changed_function": "def func4(m: int):\n  def inner(n: int):\n    return n * 2\n  return inner(m)",
  "function_name": "func4",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func8(x: str):\n  def inner(x: str):\n    return x.upper()\n  return inner(x)",
  "changed_function": "def func8(y: str):\n  def inner(x: str):\n    return x.upper()\n  return inner(y)",
  "function_name": "func8",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"data\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def fun1(a: int):\n    b = a + 1\n    c = lambda a: a * b\n    return c(a)",
  "changed_function": "def fun1(b: int):\n    c = b + 1\n    d = lambda a: a * c\n    return d(b)",
  "function_name": "fun1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def fun2(x: str):\n    y = x.upper()\n    z = lambda x: x + y\n    return z(x)",
  "changed_function": "def fun2(y: str):\n    z = y.upper()\n    a = lambda x: x + z\n    return a(y)",
  "function_name": "fun2",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'language'"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def fun3(a: int):\n    b = [a, a + 1]\n    c = lambda a: b[0] + a\n    return c(a)",
  "changed_function": "def fun3(b: int):\n    c = [b, b + 1]\n    d = lambda a: c[0] + a\n    return d(b)",
  "function_name": "fun3",
  "inputs": [
   "10",
   "20",
   "30",
   "40",
   "50"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "x",
  "original_function": "def fun4(z: bool):\n    x = not z\n    y = lambda z: z and x\n    return y(z)",
  "changed_function": "def fun4(x: bool):\n    z = not x\n    y = lambda a: a and z\n    return y(x)",
  "function_name": "fun4",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "c",
  "change_to": "d",
  "original_function": "def fun5(c: list):\n    d = [x * 2 for x in c]\n    e = lambda c: c + d[0]\n    return e(c[1])",
  "changed_function": "def fun5(d: list):\n    e = [x * 2 for x in d]\n    f = lambda c: c + e[0]\n    return f(d[1])",
  "function_name": "fun5",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "x",
  "original_function": "def fun6(y: int):\n    x = y * 2\n    z = lambda y: x + y\n    return z(y)",
  "changed_function": "def fun6(x: int):\n    y = x * 2\n    z = lambda a: y + a\n    return z(x)",
  "function_name": "fun6",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "c",
  "change_to": "b",
  "original_function": "def fun7(c: str):\n    b = c.lower()\n    a = lambda c: c + b\n    return a(c)",
  "changed_function": "def fun7(b: str):\n    c = b.lower()\n    a = lambda d: d + c\n    return a(b)",
  "function_name": "fun7",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'language'"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def fun8(a: bool):\n    x = not a\n    b = lambda a: a or x\n    return b(a)",
  "changed_function": "def fun8(x: bool):\n    a = not x\n    b = lambda c: c or a\n    return b(x)",
  "function_name": "fun8",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def fun9(x: int):\n    y = x // 2\n    z = lambda x: x + y\n    return z(x)",
  "changed_function": "def fun9(y: int):\n    x = y // 2\n    z = lambda a: a + x\n    return z(y)",
  "function_name": "fun9",
  "inputs": [
   "10",
   "20",
   "30",
   "40",
   "50"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "a",
  "original_function": "def fun10(b: list):\n    a = [x + 1 for x in b]\n    c = lambda b: b + a[0]\n    return c(b[1])",
  "changed_function": "def fun10(a: list):\n    b = [x + 1 for x in a]\n    c = lambda d: d + b[0]\n    return c(a[1])",
  "function_name": "fun10",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def func_name(n: int):\n    k = [1, 2, 3]\n    return (lambda n: n * 2)(n + sum(k))",
  "changed_function": "def func_name(m: int):\n    k = [1, 2, 3]\n    return (lambda n: n * 2)(m + sum(k))",
  "function_name": "func_name",
  "inputs": [
   "5",
   "10",
   "2",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "t",
  "original_function": "def func_name(x: int):\n    y = lambda x: x * x\n    return (lambda x: y(x) + x)(x + 1)",
  "changed_function": "def func_name(t: int):\n    y = lambda x: x * x\n    return (lambda x: y(x) + x)(t + 1)",
  "function_name": "func_name",
  "inputs": [
   "5",
   "10",
   "2",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "p",
  "original_function": "def func_name(n: bool):\n    l = [1, 2, 3]\n    if n:\n        n = l[0] + l[1]\n    return n",
  "changed_function": "def func_name(p: bool):\n    l = [1, 2, 3]\n    if p:\n        p = l[0] + l[1]\n    return p",
  "function_name": "func_name",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "t",
  "original_function": "def func_name(n: list):\n    if n[0] > 10:\n        n[0] = 10\n    n.append(n[0] + 1)\n    return n",
  "changed_function": "def func_name(t: list):\n    if t[0] > 10:\n        t[0] = 10\n    t.append(t[0] + 1)\n    return t",
  "function_name": "func_name",
  "inputs": [
   "[11, 12, 13]",
   "[5, 6, 7]",
   "[20, 21, 22]",
   "[1, 2, 3]",
   "[9, 10, 11]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "p",
  "original_function": "def func_name(x: int):\n    return (lambda x: x * 2)(x)",
  "changed_function": "def func_name(p: int):\n    return (lambda x: x * 2)(p)",
  "function_name": "func_name",
  "inputs": [
   "5",
   "10",
   "2",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def func_name(x: int):\n    x = 5\n    y = lambda x: x * x\n    return (lambda x: y(x) + 1)(x + 1)",
  "changed_function": "def func_name(z: int):\n    z = 5\n    y = lambda x: x * x\n    return (lambda x: y(x) + 1)(z + 1)",
  "function_name": "func_name",
  "inputs": [
   "5",
   "10",
   "2",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "r",
  "original_function": "def func_name(x: int):\n    if x > 10:\n        x = x + 1\n    return (lambda x: x * x)(x)",
  "changed_function": "def func_name(r: int):\n    if r > 10:\n        r = r + 1\n    return (lambda x: x * x)(r)",
  "function_name": "func_name",
  "inputs": [
   "5",
   "10",
   "2",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "q",
  "original_function": "def func_name(a: int):\n    b = [1, 2, 3, 4, 5]\n    if a > 10:\n        b[a] = 0\n    return b",
  "changed_function": "def func_name(q: int):\n    b = [1, 2, 3, 4, 5]\n    if q > 10:\n        b[q] = 0\n    return b",
  "function_name": "func_name",
  "inputs": [
   "5",
   "10",
   "2",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def f(x: int):\n    a = 2\n    return (lambda y: y + a)(x + 1)",
  "changed_function": "def f(a: int):\n    b = 2\n    return (lambda y: y + b)(a + 1)",
  "function_name": "f",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def g(a: int):\n    if a < 10:\n        return (lambda x: x + a)(1)\n    else:\n        return a",
  "changed_function": "def g(x: int):\n    if x < 10:\n        return (lambda a: a + x)(1)\n    else:\n        return x",
  "function_name": "g",
  "inputs": [
   "5",
   "12",
   "7",
   "15",
   "9"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def h(x: int):\n    a = 1\n    if a == 1:\n        return (lambda b: x + b)(1)\n    else:\n        return (lambda y: a + y)(1)",
  "changed_function": "def h(a: int):\n    b = 1\n    if b == 1:\n        return (lambda c: a + c)(1)\n    else:\n        return (lambda y: b + y)(1)",
  "function_name": "h",
  "inputs": [
   "1",
   "3",
   "2",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "b",
  "original_function": "def i(x: int):\n    b = [1, 2]\n    if x > 10:\n        return (lambda a: a + b[0])(x - 1)\n    else:\n        return x + b[1]",
  "changed_function": "def i(b: int):\n    c = [1, 2]\n    if b > 10:\n        return (lambda a: a + c[0])(b - 1)\n    else:\n        return b + c[1]",
  "function_name": "i",
  "inputs": [
   "5",
   "11",
   "12",
   "7",
   "13"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "a",
  "original_function": "def j(y: int):\n    a = y - 1\n    return (lambda x: x + a)(1)",
  "changed_function": "def j(a: int):\n    b = a - 1\n    return (lambda x: x + b)(1)",
  "function_name": "j",
  "inputs": [
   "1",
   "3",
   "4",
   "5",
   "2"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def k(x: bool):\n    y = x\n    if y:\n        return (lambda x: x + y)(1)\n    else:\n        return 0",
  "changed_function": "def k(y: bool):\n    a = y\n    if a:\n        return (lambda x: x + a)(1)\n    else:\n        return 0",
  "function_name": "k",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "y",
  "original_function": "def l(z: str):\n    y = \"hello\"\n    if len(z) > 5:\n        return (lambda x: y + x)(z)\n    else:\n        return (lambda x: x + y)(z)",
  "changed_function": "def l(y: str):\n    a = \"hello\"\n    if len(y) > 5:\n        return (lambda x: a + x)(y)\n    else:\n        return (lambda x: x + a)(y)",
  "function_name": "l",
  "inputs": [
   "\"world\"",
   "\"short\"",
   "\"long\"",
   "\"hello\"",
   "\"longer\""
  ]
 },
 {
  "target_argument": "z",
  "change_to": "a",
  "original_function": "def m(z: list):\n    a = 1\n    for i in range(len(z)):\n        a += z[i]\n    return (lambda x: x + a)(1)",
  "changed_function": "def m(a: list):\n    b = 1\n    for i in range(len(a)):\n        b += a[i]\n    return (lambda x: x + b)(1)",
  "function_name": "m",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5]",
   "[6, 7, 8, 9]",
   "[10]",
   "[1, 2, 3, 4]"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "x",
  "original_function": "def n(z: int):\n    x = [1, 2]\n    if z > 10:\n        return (lambda y: x[0] + y)(z - 1)\n    else:\n        return (lambda y: x[1] + y)(z)",
  "changed_function": "def n(x: int):\n    y = [1, 2]\n    if x > 10:\n        return (lambda z: y[0] + z)(x - 1)\n    else:\n        return (lambda z: y[1] + z)(x)",
  "function_name": "n",
  "inputs": [
   "1",
   "11",
   "12",
   "9",
   "13"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def o(x: int):\n    y = x * 2\n    return (lambda z: z + y)(1)",
  "changed_function": "def o(y: int):\n    x = y * 2\n    return (lambda z: z + x)(1)",
  "function_name": "o",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def fun1(x: int):\n  b = x + 2\n  return (lambda x: x + b)(x)",
  "changed_function": "def fun1(a: int):\n  b = a + 2\n  return (lambda c: c + b)(a)",
  "function_name": "fun1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "c",
  "original_function": "def fun2(a: int):\n  return (lambda a: (lambda b: a + b)(a))(a)",
  "changed_function": "def fun2(c: int):\n  return (lambda d: (lambda b: d + b)(d))(c)",
  "function_name": "fun2",
  "inputs": [
   "6",
   "7",
   "8",
   "9",
   "10"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "p",
  "original_function": "def fun3(n: int):\n  return (lambda n: n + 1)(n) if n > 5 else n",
  "changed_function": "def fun3(p: int):\n  return (lambda q: q + 1)(p) if p > 5 else p",
  "function_name": "fun3",
  "inputs": [
   "11",
   "12",
   "13",
   "14",
   "15"
  ]
 },
 {
  "target_argument": "k",
  "change_to": "y",
  "original_function": "def fun4(k: int):\n  k = k + 1\n  return (lambda k: k * k)(k)",
  "changed_function": "def fun4(y: int):\n  y = y + 1\n  return (lambda z: z * z)(y)",
  "function_name": "fun4",
  "inputs": [
   "16",
   "17",
   "18",
   "19",
   "20"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "b",
  "original_function": "def fun5(x: int):\n  x = 1\n  return (lambda x: x + x)(x)",
  "changed_function": "def fun5(b: int):\n  b = 1\n  return (lambda c: c + c)(b)",
  "function_name": "fun5",
  "inputs": [
   "21",
   "22",
   "23",
   "24",
   "25"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "k",
  "original_function": "def fun6(b: bool):\n  return (lambda b: not b)(b) if b else (lambda b: b)(b)",
  "changed_function": "def fun6(k: bool):\n  return (lambda j: not j)(k) if k else (lambda j: j)(k)",
  "function_name": "fun6",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "g",
  "original_function": "def fun7(x: int):\n  x = x * 2\n  return (lambda x: x - 1)(x)",
  "changed_function": "def fun7(g: int):\n  g = g * 2\n  return (lambda h: h - 1)(g)",
  "function_name": "fun7",
  "inputs": [
   "26",
   "27",
   "28",
   "29",
   "30"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "q",
  "original_function": "def fun8(m: int):\n  return (lambda m: m * m)(m) if m > 10 else m",
  "changed_function": "def fun8(q: int):\n  return (lambda r: r * r)(q) if q > 10 else q",
  "function_name": "fun8",
  "inputs": [
   "31",
   "32",
   "33",
   "34",
   "35"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "s",
  "original_function": "def fun9(x: int):\n  return (lambda x: x * x)(x) if x < 5 else (lambda x: x + 1)(x)",
  "changed_function": "def fun9(s: int):\n  return (lambda t: t * t)(s) if s < 5 else (lambda t: t + 1)(s)",
  "function_name": "fun9",
  "inputs": [
   "36",
   "37",
   "38",
   "39",
   "40"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "n",
  "original_function": "def fun10(y: int):\n  return (lambda y: y + y)(y) if y > 5 else (lambda y: y * y)(y)",
  "changed_function": "def fun10(n: int):\n  return (lambda m: m + m)(n) if n > 5 else (lambda m: m * m)(n)",
  "function_name": "fun10",
  "inputs": [
   "41",
   "42",
   "43",
   "44",
   "45"
  ]
 }
]