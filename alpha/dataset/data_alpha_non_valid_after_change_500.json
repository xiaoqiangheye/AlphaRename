[
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def func1(x: int):\n    n = 1\n    if x > 5:\n        n = 2\n    return n * x",
  "changed_function": "def func1(n: int):\n    z = 1\n    if n > 5:\n        z = 2\n    return z * n",
  "function_name": "func1",
  "inputs": [
   "1",
   "6",
   "10",
   "0",
   "-1"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "x",
  "original_function": "def func2(b: bool):\n    x = 0\n    if b:\n        x = 1\n    return x",
  "changed_function": "def func2(x: bool):\n    n = 0\n    if x:\n        n = 1\n    return n",
  "function_name": "func2",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "False"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "i",
  "original_function": "def func3(s: str):\n    i = 0\n    while i < len(s):\n        if s[i] == ' ': \n            s = s[:i] + s[i+1:]\n        i += 1\n    return s",
  "changed_function": "def func3(i: str):\n    j = 0\n    while j < len(i):\n        if i[j] == ' ': \n            i = i[:j] + i[j+1:]\n        j += 1\n    return i",
  "function_name": "func3",
  "inputs": [
   "\"hello world\"",
   "\" this is a string\"",
   "\"   \"",
   "\"no space\"",
   "\" one space\""
  ]
 },
 {
  "target_argument": "L",
  "change_to": "x",
  "original_function": "def func4(L: list):\n    x = 0\n    for l in L:\n        x += l\n    return x",
  "changed_function": "def func4(x: list):\n    n = 0\n    for l in x:\n        n += l\n    return n",
  "function_name": "func4",
  "inputs": [
   "[1, 2, 3, 4]",
   "[0, 1]",
   "[1, 0, -1, 1]",
   "[0, -1, -2]",
   "[]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def func5(n: int):\n    i = 1\n    sum = 0\n    while i <= n:\n        sum += i\n        i += 1\n    return sum",
  "changed_function": "def func5(i: int):\n    j = 1\n    sum = 0\n    while j <= i:\n        sum += j\n        j += 1\n    return sum",
  "function_name": "func5",
  "inputs": [
   "1",
   "5",
   "10",
   "100",
   "-1"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "i",
  "original_function": "def func6(x: int):\n    i = 1\n    while i <= x:\n        if x % i == 0:\n            print(i)\n        i += 1",
  "changed_function": "def func6(i: int):\n    j = 1\n    while j <= i:\n        if i % j == 0:\n            print(j)\n        j += 1",
  "function_name": "func6",
  "inputs": [
   "1",
   "5",
   "10",
   "100",
   "-1"
  ]
 },
 {
  "target_argument": "T",
  "change_to": "s",
  "original_function": "def func7(T: tuple):\n    s = 0\n    for t in T:\n        s += t\n    return s",
  "changed_function": "def func7(s: tuple):\n    i = 0\n    for t in s:\n        i += t\n    return i",
  "function_name": "func7",
  "inputs": [
   "(1, 2, 3, 4)",
   "(0, 1)",
   "(1, 0, -1, 1)",
   "(0, -1, -2)",
   "()"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "i",
  "original_function": "def func8(x: int):\n    i = 0\n    while i < x:\n        if i % 2 == 0:\n            print (i)\n        i += 1",
  "changed_function": "def func8(i: int):\n    j = 0\n    while j < i:\n        if j % 2 == 0:\n            print (j)\n        j += 1",
  "function_name": "func8",
  "inputs": [
   "10",
   "5",
   "7",
   "1",
   "-2"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "t",
  "original_function": "def func9(l: list):\n    t = 0\n    for i in l:\n        t += i\n    return t",
  "changed_function": "def func9(t: list):\n    n = 0\n    for i in t:\n        n += i\n    return n",
  "function_name": "func9",
  "inputs": [
   "[1, 2, 3, 4]",
   "[0, 1]",
   "[1, 0, -1, 1]",
   "[0, -1, -2]",
   "[]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def func10(a: str):\n    x = ''\n    for c in a:\n        if c.isupper():\n            x += c.lower()\n        else:\n            x += c.upper()\n    return x",
  "changed_function": "def func10(x: str):\n    y = ''\n    for c in x:\n        if c.isupper():\n            y += c.lower()\n        else:\n            y += c.upper()\n    return y",
  "function_name": "func10",
  "inputs": [
   "\"hello world\"",
   "\"This is a string\"",
   "\"  \"",
   "\"NO SPACE\"",
   "\"One space\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def bar(n: int):\n  if n > 10:\n    return n\n  else:\n    n = n * 2\n    return n",
  "changed_function": "def bar(x: int):\n  if x > 10:\n    return x\n  else:\n    n = x * 2\n    return n",
  "function_name": "bar",
  "inputs": [
   "12",
   "5",
   "1",
   "10",
   "100"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "k",
  "original_function": "def baz(y: bool):\n  if y:\n    return [1,2,3]\n  else:\n    return (4, 5)\n  y = 6\n  return y",
  "changed_function": "def baz(k: bool):\n  if k:\n    return [1,2,3]\n  else:\n    return (4, 5)\n  y = 6\n  return y",
  "function_name": "baz",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "False"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "s",
  "original_function": "def foo(x: int):\n  x = x - 1\n  x = x * 10\n  return x",
  "changed_function": "def foo(s: int):\n  x = s - 1\n  x = x * 10\n  return x",
  "function_name": "foo",
  "inputs": [
   "2",
   "3",
   "4",
   "1",
   "5"
  ]
 },
 {
  "target_argument": "str1",
  "change_to": "s",
  "original_function": "def one(str1: str):\n  s = ''\n  for i in range(len(str1)):\n    if i % 2 == 0:\n      s += str1[i].upper()\n    else:\n      s += str1[i]\n  return s",
  "changed_function": "def one(s: str):\n  str1 = ''\n  for i in range(len(s)):\n    if i % 2 == 0:\n      str1 += s[i].upper()\n    else:\n      str1 += s[i]\n  return str1",
  "function_name": "one",
  "inputs": [
   "\"Hello\"",
   "\"World\"",
   "\"Python\"",
   "\"abcdef\"",
   "\"123456"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def two(x: list):\n  n = len(x)\n  if n % 2 == 0:\n    return x\n  else:\n    x.append(0)\n    return x",
  "changed_function": "def two(z: list):\n  n = len(z)\n  if n % 2 == 0:\n    return z\n  else:\n    z.append(0)\n    return z",
  "function_name": "two",
  "inputs": [
   "[1,2,3]",
   "[4,5,6]",
   "[7,8,9]",
   "[10,11]",
   "[12,13,14]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "t",
  "original_function": "def three(x: str):\n  s = x\n  t = x + ' ' + x\n  if len(t) > 10:\n    return t\n  else:\n    return s",
  "changed_function": "def three(t: str):\n  s = t\n  x = t + ' ' + t\n  if len(x) > 10:\n    return x\n  else:\n    return s",
  "function_name": "three",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"abcdef\"",
   "\"1234567890"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def four(s: str):\n  s = s.lower()\n  return s",
  "changed_function": "def four(a: str):\n  s = a.lower()\n  return s",
  "function_name": "four",
  "inputs": [
   "\"Hello\"",
   "\"World\"",
   "\"Python\"",
   "\"abcdef\"",
   "\"123456"
  ]
 },
 {
  "target_argument": "lst",
  "change_to": "x",
  "original_function": "def five(lst: list):\n  x = len(lst)\n  if x > 5:\n    return x\n  else:\n    return lst",
  "changed_function": "def five(x: list):\n  lst = len(x)\n  if lst > 5:\n    return lst\n  else:\n    return x",
  "function_name": "five",
  "inputs": [
   "[1,2,3,4,5,6]",
   "[7,8,9]",
   "[10,11,12]",
   "[13,14,15,16,17]",
   "[18,19,20,21,22,23,24]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def six(x: int):\n  a = 0\n  for i in range(x):\n    a += i\n  return a",
  "changed_function": "def six(a: int):\n  x = 0\n  for i in range(a):\n    x += i\n  return x",
  "function_name": "six",
  "inputs": [
   "5",
   "10",
   "1",
   "100",
   "1000"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def seven(n: int):\n  if n == 0:\n    return 1\n  else:\n    return n * seven(n-1)",
  "changed_function": "def seven(i: int):\n  if i == 0:\n    return 1\n  else:\n    return i * seven(i-1)",
  "function_name": "seven",
  "inputs": [
   "5",
   "3",
   "1",
   "0",
   "4"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "x",
  "original_function": "def  calculate_area(y: int):\n  x = y + 2\n  y = 3\n  return (x + y * x)",
  "changed_function": "def  calculate_area(x: int):\n  a = x + 2\n  y = 3\n  return (a + y * a)",
  "function_name": "calculate_area",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "x",
  "original_function": "def  calculate_surface_area(l: int):\n  y = l * 2\n  z = 2\n  l = z + 1\n  return (l + z * y)",
  "changed_function": "def  calculate_surface_area(x: int):\n  y = x * 2\n  z = 2\n  x = z + 1\n  return (x + z * y)",
  "function_name": "calculate_surface_area",
  "inputs": [
   "10",
   "20",
   "30",
   "40",
   "50"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def  check_prime(n: int):\n  x = 2\n  while (x * x <= n):\n    if (n % x == 0):\n      return False\n    x = x + 1\n  return True",
  "changed_function": "def  check_prime(x: int):\n  a = 2\n  while (a * a <= x):\n    if (x % a == 0):\n      return False\n    a = a + 1\n  return True",
  "function_name": "check_prime",
  "inputs": [
   "2",
   "3",
   "5",
   "7",
   "11"
  ]
 },
 {
  "target_argument": "str1",
  "change_to": "str2",
  "original_function": "def  is_palindrome(str1: str):\n  str2 = str1[::-1]\n  if (str1 == str2):\n    return True\n  else:\n    return False",
  "changed_function": "def  is_palindrome(str2: str):\n  str1 = str2[::-1]\n  if (str2 == str1):\n    return True\n  else:\n    return False",
  "function_name": "is_palindrome",
  "inputs": [
   "\"madam\"",
   "\"racecar\"",
   "\"level\"",
   "\"hello\"",
   "\"world\""
  ]
 },
 {
  "target_argument": "i",
  "change_to": "x",
  "original_function": "def  print_even_numbers(i: int):\n  x = 1\n  while (x <= i):\n    if (x % 2 == 0):\n      print(x)\n    x = x + 1",
  "changed_function": "def  print_even_numbers(x: int):\n  a = 1\n  while (a <= x):\n    if (a % 2 == 0):\n      print(a)\n    a = a + 1",
  "function_name": "print_even_numbers",
  "inputs": [
   "10",
   "20",
   "30",
   "40",
   "50"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def  find_max(x: int):\n  n = x\n  while (x > 0):\n    if (n < x % 10):\n      n = x % 10\n    x = x // 10\n  return n",
  "changed_function": "def  find_max(n: int):\n  x = n\n  while (n > 0):\n    if (x < n % 10):\n      x = n % 10\n    n = n // 10\n  return x",
  "function_name": "find_max",
  "inputs": [
   "12345",
   "67890",
   "10234",
   "56789",
   "98765"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def  reverse_list(n: list):\n  i = 0\n  j = len(n) - 1\n  while (i < j):\n    n[i], n[j] = n[j], n[i]\n    i = i + 1\n    j = j - 1\n  return n",
  "changed_function": "def  reverse_list(i: list):\n  n = 0\n  j = len(i) - 1\n  while (n < j):\n    i[n], i[j] = i[j], i[n]\n    n = n + 1\n    j = j - 1\n  return i",
  "function_name": "reverse_list",
  "inputs": [
   "[1,2,3,4,5]",
   "[6,7,8,9,10]",
   "[11,12,13,14,15]",
   "[16,17,18,19,20]",
   "[21,22,23,24,25]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def  count_vowels(x: str):\n  y = 0\n  for i in x:\n    if i in \"aeiouAEIOU\":\n      y = y + 1\n  return y",
  "changed_function": "def  count_vowels(y: str):\n  x = 0\n  for i in y:\n    if i in \"aeiouAEIOU\":\n      x = x + 1\n  return x",
  "function_name": "count_vowels",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"javascript\"",
   "\"programming\""
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "nums",
  "original_function": "def  find_missing_number(arr: list):\n  n = len(arr)\n  total_sum = (n + 1) * (n + 2) // 2\n  actual_sum = sum(arr)\n  return total_sum - actual_sum",
  "changed_function": "def  find_missing_number(nums: list):\n  n = len(nums)\n  total_sum = (n + 1) * (n + 2) // 2\n  actual_sum = sum(nums)\n  return total_sum - actual_sum",
  "function_name": "find_missing_number",
  "inputs": [
   "[1, 2, 3, 4, 6]",
   "[1, 2, 3, 5, 6]",
   "[1, 2, 3, 4, 5, 6, 8]",
   "[1, 2, 4, 5, 6]",
   "[1, 2, 3, 4, 5, 6, 7, 9]"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "n",
  "original_function": "def fun1(text: str):\n  n = 1\n  if len(text) > 5:\n    return text\n  else:\n    return ''\n  n = text\n  return n",
  "changed_function": "def fun1(n: str):\n  m = 1\n  if len(n) > 5:\n    return n\n  else:\n    return ''\n  m = n\n  return m",
  "function_name": "fun1",
  "inputs": [
   "''",
   "\"Hello\"",
   "\"this is a long string\"",
   "\"this is a bit longer\"",
   "\"an extremely long string! this is longer than 5 characters\""
  ]
 },
 {
  "target_argument": "data",
  "change_to": "s",
  "original_function": "def fun2(data: list):\n  s = 0\n  for i in range(len(data)):\n    s += data[i]\n  return s",
  "changed_function": "def fun2(s: list):\n  t = 0\n  for i in range(len(s)):\n    t += s[i]\n  return t",
  "function_name": "fun2",
  "inputs": [
   "[1,2,3,4]",
   "[1,2,3,4,5,6,7,8,9,10]",
   "[2,4,6,8]",
   "[0,2,4,6,8]",
   "[10, 20, 30]"
  ]
 },
 {
  "target_argument": "string",
  "change_to": "m",
  "original_function": "def fun3(string: str):\n  m = string\n  string = string.upper()\n  if m in string:\n    return True\n  else:\n    return False",
  "changed_function": "def fun3(m: str):\n  n = m\n  m = m.upper()\n  if n in m:\n    return True\n  else:\n    return False",
  "function_name": "fun3",
  "inputs": [
   "\"hello\"",
   "\"Hello\"",
   "\"wOrLd\"",
   "\"wOrLd\"",
   "\"this is a long string\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def fun4(n: int):\n  x = 0\n  for i in range(n):\n    x += i\n  return x",
  "changed_function": "def fun4(x: int):\n  y = 0\n  for i in range(x):\n    y += i\n  return y",
  "function_name": "fun4",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def fun5(x: int):\n  y = x * 2\n  if y > 10:\n    return True\n  else:\n    return False",
  "changed_function": "def fun5(y: int):\n  z = y * 2\n  if z > 10:\n    return True\n  else:\n    return False",
  "function_name": "fun5",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def fun6(x: int):\n  a = x * 2\n  if a > 10:\n    return True\n  else:\n    return False",
  "changed_function": "def fun6(a: int):\n  b = a * 2\n  if b > 10:\n    return True\n  else:\n    return False",
  "function_name": "fun6",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def fun7(a: str):\n  b = a\n  a = a.upper()\n  if b in a:\n    return True\n  else:\n    return False",
  "changed_function": "def fun7(b: str):\n  c = b\n  b = b.upper()\n  if c in b:\n    return True\n  else:\n    return False",
  "function_name": "fun7",
  "inputs": [
   "\"hello\"",
   "\"Hello\"",
   "\"wOrLd\"",
   "\"wOrLd\"",
   "\"this is a long string\""
  ]
 },
 {
  "target_argument": "data",
  "change_to": "x",
  "original_function": "def fun8(data: list):\n  x = 0\n  for i in range(len(data)):\n    x += data[i]\n  return x",
  "changed_function": "def fun8(x: list):\n  y = 0\n  for i in range(len(x)):\n    y += x[i]\n  return y",
  "function_name": "fun8",
  "inputs": [
   "[1,2,3,4]",
   "[1,2,3,4,5,6,7,8,9,10]",
   "[2,4,6,8]",
   "[0,2,4,6,8]",
   "[10, 20, 30]"
  ]
 },
 {
  "target_argument": "list1",
  "change_to": "n",
  "original_function": "def fun9(list1: list):\n  n = 0\n  for x in list1:\n    if x > 5:\n      n += x\n  return n",
  "changed_function": "def fun9(n: list):\n  m = 0\n  for x in n:\n    if x > 5:\n      m += x\n  return m",
  "function_name": "fun9",
  "inputs": [
   "[1,2,3,4,5,6,7,8,9,10]",
   "[1,2,3,4]",
   "[2,4,6,8]",
   "[0,2,4,6,8]",
   "[10, 20, 30]"
  ]
 },
 {
  "target_argument": "str1",
  "change_to": "x",
  "original_function": "def fun10(str1: str):\n  x = str1\n  x = x.upper()\n  return x",
  "changed_function": "def fun10(x: str):\n  y = x\n  y = y.upper()\n  return y",
  "function_name": "fun10",
  "inputs": [
   "\"hello\"",
   "\"Hello\"",
   "\"wOrLd\"",
   "\"wOrLd\"",
   "\"this is a long string\""
  ]
 },
 {
  "target_argument": "f",
  "change_to": "s",
  "original_function": "def find_max_string_length(f: str):\n    max_length = 0\n    for s in f.split():\n        if len(s) > max_length:\n            max_length = len(s)\n    return max_length",
  "changed_function": "def find_max_string_length(s: str):\n    max_length = 0\n    for t in s.split():\n        if len(t) > max_length:\n            max_length = len(t)\n    return max_length",
  "function_name": "find_max_string_length",
  "inputs": [
   " \"This is a test string\"",
   " \"Another sentence with different lengths\"",
   " \"Short words\"",
   " \"  Lots of spaces here  \"",
   " \"This is one very long string with some words\" "
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def count_odd_numbers(n: int):\n    count = 0\n    for i in range(n):\n        if i % 2 != 0:\n            count += 1\n    return count",
  "changed_function": "def count_odd_numbers(i: int):\n    count = 0\n    for j in range(i):\n        if j % 2 != 0:\n            count += 1\n    return count",
  "function_name": "count_odd_numbers",
  "inputs": [
   "10",
   "25",
   "5",
   "1",
   "0"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "l",
  "original_function": "def reverse_string(s: str):\n    return s[::-1]",
  "changed_function": "def reverse_string(l: str):\n    return l[::-1]",
  "function_name": "reverse_string",
  "inputs": [
   " \"hello\"",
   " \"python\"",
   " \"programming\"",
   " \"12345\"",
   " \"racecar\" "
  ]
 },
 {
  "target_argument": "a",
  "change_to": "k",
  "original_function": "def find_duplicates_in_list(a: list):\n    duplicates = []\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] == a[j] and a[i] not in duplicates:\n                duplicates.append(a[i])\n    return duplicates",
  "changed_function": "def find_duplicates_in_list(k: list):\n    duplicates = []\n    for i in range(len(k)):\n        for j in range(i + 1, len(k)):\n            if k[i] == k[j] and k[i] not in duplicates:\n                duplicates.append(k[i])\n    return duplicates",
  "function_name": "find_duplicates_in_list",
  "inputs": [
   " [1, 2, 3, 4, 5, 1, 2]",
   " [\"apple\", \"banana\", \"cherry\", \"apple\", \"orange\"]",
   " [True, False, True, True, False]",
   " [1, 1, 1, 2, 2, 3, 3, 3]",
   " [\"a\", \"b\", \"c\", \"d\", \"a\", \"b\"] "
  ]
 },
 {
  "target_argument": "text",
  "change_to": "s",
  "original_function": "def count_words_in_text(text: str):\n    words = text.split()\n    return len(words)",
  "changed_function": "def count_words_in_text(s: str):\n    words = s.split()\n    return len(words)",
  "function_name": "count_words_in_text",
  "inputs": [
   " \"This is a sentence with five words.\"",
   " \"One word only.\"",
   " \"  Lots of spaces   \"",
   " \"This is a test string with multiple words.\"",
   " \"A very long sentence with many words.\" "
  ]
 },
 {
  "target_argument": "numbers",
  "change_to": "n",
  "original_function": "def sum_of_even_numbers(numbers: list):\n    sum = 0\n    for n in numbers:\n        if n % 2 == 0:\n            sum += n\n    return sum",
  "changed_function": "def sum_of_even_numbers(n: list):\n    sum = 0\n    for i in n:\n        if i % 2 == 0:\n            sum += i\n    return sum",
  "function_name": "sum_of_even_numbers",
  "inputs": [
   " [1, 2, 3, 4, 5]",
   " [10, 20, 30, 40, 50]",
   " [1, 3, 5, 7, 9]",
   " [2, 4, 6, 8, 10]",
   " [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] "
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def calculate_average(x: list):\n    if len(x) == 0:\n        return 0\n    total = 0\n    for n in x:\n        total += n\n    return total / len(x)",
  "changed_function": "def calculate_average(n: list):\n    if len(n) == 0:\n        return 0\n    total = 0\n    for i in n:\n        total += i\n    return total / len(n)",
  "function_name": "calculate_average",
  "inputs": [
   " [1, 2, 3, 4, 5]",
   " [10, 20, 30, 40, 50]",
   " []",
   " [1, 3, 5, 7, 9]",
   " [2, 4, 6, 8, 10] "
  ]
 },
 {
  "target_argument": "text",
  "change_to": "s",
  "original_function": "def find_longest_word(text: str):\n    words = text.split()\n    longest_word = ''\n    for s in words:\n        if len(s) > len(longest_word):\n            longest_word = s\n    return longest_word",
  "changed_function": "def find_longest_word(s: str):\n    words = s.split()\n    longest_word = ''\n    for t in words:\n        if len(t) > len(longest_word):\n            longest_word = t\n    return longest_word",
  "function_name": "find_longest_word",
  "inputs": [
   " \"This is a sentence with a long word.\"",
   " \"One word only.\"",
   " \"  Lots of spaces   \"",
   " \"This is a test string with some words.\"",
   " \"A very long sentence with many words.\" "
  ]
 },
 {
  "target_argument": "numbers",
  "change_to": "n",
  "original_function": "def find_smallest_number(numbers: list):\n    smallest = numbers[0]\n    for n in numbers:\n        if n < smallest:\n            smallest = n\n    return smallest",
  "changed_function": "def find_smallest_number(n: list):\n    smallest = n[0]\n    for i in n:\n        if i < smallest:\n            smallest = i\n    return smallest",
  "function_name": "find_smallest_number",
  "inputs": [
   " [5, 2, 8, 1, 9]",
   " [10, 20, 30, 40, 50]",
   " [1, 3, 5, 7, 9]",
   " [2, 4, 6, 8, 10]",
   " [100, 50, 25, 75, 10] "
  ]
 },
 {
  "target_argument": "sentence",
  "change_to": "s",
  "original_function": "def count_vowels_in_sentence(sentence: str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for s in sentence:\n        if s in vowels:\n            count += 1\n    return count",
  "changed_function": "def count_vowels_in_sentence(s: str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for t in s:\n        if t in vowels:\n            count += 1\n    return count",
  "function_name": "count_vowels_in_sentence",
  "inputs": [
   " \"This is a sentence.\"",
   " \"How many vowels are in this sentence?\"",
   " \"The quick brown fox jumps over the lazy dog.\"",
   " \"This sentence has some vowels.\"",
   " \"A long sentence with many vowels.\" "
  ]
 },
 {
  "target_argument": "numbers",
  "change_to": "n",
  "original_function": "def sum_even_numbers(numbers: list):\n  sum = 0\n  for n in numbers:\n    if n % 2 == 0:\n      sum += n\n  return sum",
  "changed_function": "def sum_even_numbers(n: list):\n  sum = 0\n  for number in n:\n    if number % 2 == 0:\n      sum += number\n  return sum",
  "function_name": "sum_even_numbers",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 20, 30, 40, 50]",
   "[1, 3, 5, 7, 9]",
   "[2, 4, 6, 8, 10]",
   "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
  ]
 },
 {
  "target_argument": "list_of_strings",
  "change_to": "s",
  "original_function": "def combine_strings(list_of_strings: list):\n  combined_string = ''\n  for s in list_of_strings:\n    combined_string += s\n  return combined_string",
  "changed_function": "def combine_strings(s: list):\n  combined_string = ''\n  for string in s:\n    combined_string += string\n  return combined_string",
  "function_name": "combine_strings",
  "inputs": [
   "['Hello', ' ', 'world']",
   "['This', ' ', 'is', ' ', 'a', ' ', 'test']",
   "['1', '2', '3', '4', '5']",
   "['a', 'b', 'c', 'd', 'e']",
   "['Python', ' ', 'is', ' ', 'awesome']"
  ]
 },
 {
  "target_argument": "input_list",
  "change_to": "n",
  "original_function": "def find_max(input_list: list):\n  max_value = input_list[0]\n  for n in input_list:\n    if n > max_value:\n      max_value = n\n  return max_value",
  "changed_function": "def find_max(n: list):\n  max_value = n[0]\n  for input_list in n:\n    if input_list > max_value:\n      max_value = input_list\n  return max_value",
  "function_name": "find_max",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 20, 30, 40, 50]",
   "[1, 3, 5, 7, 9]",
   "[2, 4, 6, 8, 10]",
   "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
  ]
 },
 {
  "target_argument": "numbers",
  "change_to": "n",
  "original_function": "def find_average(numbers: list):\n  sum = 0\n  for n in numbers:\n    sum += n\n  return sum / len(numbers)",
  "changed_function": "def find_average(n: list):\n  sum = 0\n  for number in n:\n    sum += number\n  return sum / len(n)",
  "function_name": "find_average",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 20, 30, 40, 50]",
   "[1, 3, 5, 7, 9]",
   "[2, 4, 6, 8, 10]",
   "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
  ]
 },
 {
  "target_argument": "number",
  "change_to": "n",
  "original_function": "def is_prime(number: int):\n  if number <= 1:\n    return False\n  for n in range(2, int(number**0.5) + 1):\n    if number % n == 0:\n      return False\n  return True",
  "changed_function": "def is_prime(number: int):\n  if number <= 1:\n    return False\n  for n in range(2, int(number**0.5) + 1):\n    if number % n == 0:\n      return False\n  return True",
  "function_name": "is_prime",
  "inputs": [
   "2",
   "3",
   "4",
   "5",
   "7"
  ]
 },
 {
  "target_argument": "numbers",
  "change_to": "n",
  "original_function": "def find_smallest(numbers: list):\n  smallest = numbers[0]\n  for n in numbers:\n    if n < smallest:\n      smallest = n\n  return smallest",
  "changed_function": "def find_smallest(n: list):\n  smallest = n[0]\n  for numbers in n:\n    if numbers < smallest:\n      smallest = numbers\n  return smallest",
  "function_name": "find_smallest",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 20, 30, 40, 50]",
   "[1, 3, 5, 7, 9]",
   "[2, 4, 6, 8, 10]",
   "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def is_even_woodall(n):\n  if (n % 2 == 0):\n    return False\n  if (n == 1):\n    return True\n  x = n + 1\n  p = 0\n  while (x % 2 == 0):\n    x = x / 2\n    p = p + 1\n    if (p == x):\n      return True\n  return False",
  "changed_function": "def is_even_woodall(x):\n  if (x % 2 == 0):\n    return False\n  if (x == 1):\n    return True\n  n = x + 1\n  p = 0\n  while (n % 2 == 0):\n    n = n / 2\n    p = p + 1\n    if (p == n):\n      return True\n  return False",
  "function_name": "is_even_woodall",
  "inputs": [
   "1",
   "2",
   "3",
   "7",
   "15"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "s",
  "original_function": "def find_max_substring(x):\n  if len(x) <= 1:\n    return x\n  max_len = 1\n  start = 0\n  end = 0\n  for i in range(len(x)):\n    for j in range(i + 1, len(x) + 1):\n      substring = x[i:j]\n      if len(substring) > max_len:\n        max_len = len(substring)\n        start = i\n        end = j\n  return x[start:end]",
  "changed_function": "def find_max_substring(s):\n  if len(s) <= 1:\n    return s\n  max_len = 1\n  start = 0\n  end = 0\n  for i in range(len(s)):\n    for j in range(i + 1, len(s) + 1):\n      substring = s[i:j]\n      if len(substring) > max_len:\n        max_len = len(substring)\n        start = i\n        end = j\n  return s[start:end]",
  "function_name": "find_max_substring",
  "inputs": [
   "'abc'",
   "'aaaa'",
   "'abcabcbb'",
   "'bbbbb'",
   "'pwwkew'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def count_prime_numbers(n):\n  if n <= 1:\n    return 0\n  primes = [True] * (n + 1)\n  primes[0] = primes[1] = False\n  for i in range(2, int(n ** 0.5) + 1):\n    if primes[i]:\n      for j in range(i * i, n + 1, i):\n        primes[j] = False\n  count = 0\n  for i in range(2, n + 1):\n    if primes[i]:\n      count += 1\n  return count",
  "changed_function": "def count_prime_numbers(k):\n  if k <= 1:\n    return 0\n  primes = [True] * (k + 1)\n  primes[0] = primes[1] = False\n  for i in range(2, int(k ** 0.5) + 1):\n    if primes[i]:\n      for j in range(i * i, k + 1, i):\n        primes[j] = False\n  count = 0\n  for i in range(2, k + 1):\n    if primes[i]:\n      count += 1\n  return count",
  "function_name": "count_prime_numbers",
  "inputs": [
   "10",
   "20",
   "50",
   "100",
   "200"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n - 1)",
  "changed_function": "def factorial(i):\n  if i == 0:\n    return 1\n  else:\n    return i * factorial(i - 1)",
  "function_name": "factorial",
  "inputs": [
   "5",
   "10",
   "1",
   "3",
   "7"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "j",
  "original_function": "def is_palindrome(n):\n  s = str(n)\n  return s == s[::-1]",
  "changed_function": "def is_palindrome(j):\n  s = str(j)\n  return s == s[::-1]",
  "function_name": "is_palindrome",
  "inputs": [
   "121",
   "12321",
   "10",
   "11111",
   "123321"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "n",
  "original_function": "def find_first_non_repeating_character(s):\n  char_counts = {}\n  for char in s:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n  for char in s:\n    if char_counts[char] == 1:\n      return char\n  return None",
  "changed_function": "def find_first_non_repeating_character(n):\n  char_counts = {}\n  for char in n:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n  for char in n:\n    if char_counts[char] == 1:\n      return char\n  return None",
  "function_name": "find_first_non_repeating_character",
  "inputs": [
   "'abcabcbb'",
   "'leetcode'",
   "'loveleetcode'",
   "'aabb'",
   "'hello'"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "s",
  "original_function": "def is_power_of_two(x):\n  if x <= 0:\n    return False\n  while x % 2 == 0:\n    x //= 2\n  return x == 1",
  "changed_function": "def is_power_of_two(s):\n  if s <= 0:\n    return False\n  while s % 2 == 0:\n    s //= 2\n  return s == 1",
  "function_name": "is_power_of_two",
  "inputs": [
   "1",
   "16",
   "2",
   "8",
   "10"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def sum_of_digits(n):\n  if n < 0:\n    n = -n\n  sum = 0\n  while n > 0:\n    digit = n % 10\n    sum += digit\n    n //= 10\n  return sum",
  "changed_function": "def sum_of_digits(k):\n  if k < 0:\n    k = -k\n  sum = 0\n  while k > 0:\n    digit = k % 10\n    sum += digit\n    k //= 10\n  return sum",
  "function_name": "sum_of_digits",
  "inputs": [
   "123",
   "456",
   "789",
   "1000",
   "12345"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "x",
  "original_function": "def find_missing_number(nums):\n  n = len(nums) + 1\n  total_sum = n * (n - 1) // 2\n  current_sum = sum(nums)\n  return total_sum - current_sum",
  "changed_function": "def find_missing_number(x):\n  n = len(x) + 1\n  total_sum = n * (n - 1) // 2\n  current_sum = sum(x)\n  return total_sum - current_sum",
  "function_name": "find_missing_number",
  "inputs": [
   "[1, 2, 0]",
   "[3, 0, 1]",
   "[9, 6, 4, 2, 3, 5, 7, 0, 1]",
   "[0, 1]",
   "[1, 0, 2, 4, 5]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def sum_even_numbers(a: int):\n  x = 0\n  for i in range(a):\n    if i % 2 == 0:\n      x += i\n  return x",
  "changed_function": "def sum_even_numbers(x: int):\n  y = 0\n  for i in range(x):\n    if i % 2 == 0:\n      y += i\n  return y",
  "function_name": "sum_even_numbers",
  "inputs": [
   "10",
   "5",
   "20",
   "1",
   "15"
  ]
 },
 {
  "target_argument": "str",
  "change_to": "x",
  "original_function": "def count_vowels(str: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for letter in str:\n    if letter in vowels:\n      count += 1\n  return count",
  "changed_function": "def count_vowels(x: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for letter in x:\n    if letter in vowels:\n      count += 1\n  return count",
  "function_name": "count_vowels",
  "inputs": [
   "'hello'",
   "'world'",
   "'programming'",
   "'python'",
   "'javascript'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def print_even_numbers(n: int):\n  for x in range(n):\n    if x % 2 == 0:\n      print(x)",
  "changed_function": "def print_even_numbers(x: int):\n  for y in range(x):\n    if y % 2 == 0:\n      print(y)",
  "function_name": "print_even_numbers",
  "inputs": [
   "10",
   "5",
   "20",
   "1",
   "15"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def is_palindrome(a: str):\n  a = a.lower()\n  x = a[::-1]\n  if a == x:\n    return True\n  return False",
  "changed_function": "def is_palindrome(x: str):\n  x = x.lower()\n  y = x[::-1]\n  if x == y:\n    return True\n  return False",
  "function_name": "is_palindrome",
  "inputs": [
   "'racecar'",
   "'hello'",
   "'madam'",
   "'python'",
   "'12321'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def factorial(n: int):\n  x = 1\n  if n < 0:\n    return 'Factorial does not exist for negative numbers.'\n  elif n == 0:\n    return 1\n  else:\n    for i in range(1, n + 1):\n      x *= i\n  return x",
  "changed_function": "def factorial(x: int):\n  y = 1\n  if x < 0:\n    return 'Factorial does not exist for negative numbers.'\n  elif x == 0:\n    return 1\n  else:\n    for i in range(1, x + 1):\n      y *= i\n  return y",
  "function_name": "factorial",
  "inputs": [
   "5",
   "0",
   "10",
   "-1",
   "3"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "x",
  "original_function": "def reverse_list(l: list):\n  x = l[::-1]\n  return x",
  "changed_function": "def reverse_list(x: list):\n  y = x[::-1]\n  return y",
  "function_name": "reverse_list",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 20, 30]",
   [
    "a",
    "b",
    "c"
   ],
   "[1, 2, 3, 2, 1]",
   "[True, False, True]"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "x",
  "original_function": "def find_max_in_list(l: list):\n  if not l:\n    return None\n  x = l[0]\n  for i in l:\n    if i > x:\n      x = i\n  return x",
  "changed_function": "def find_max_in_list(x: list):\n  if not x:\n    return None\n  y = x[0]\n  for i in x:\n    if i > y:\n      y = i\n  return y",
  "function_name": "find_max_in_list",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 20, 30]",
   [
    1,
    2,
    3,
    4,
    5
   ],
   "[5, 4, 3, 2, 1]",
   "[1, 2, 3, 1, 2]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def remove_duplicates(a: list):\n  x = []\n  for i in a:\n    if i not in x:\n      x.append(i)\n  return x",
  "changed_function": "def remove_duplicates(x: list):\n  y = []\n  for i in x:\n    if i not in y:\n      y.append(i)\n  return y",
  "function_name": "remove_duplicates",
  "inputs": [
   "[1, 2, 3, 2, 1]",
   "[10, 20, 30, 10, 20]",
   [
    "a",
    "b",
    "c",
    "a",
    "b"
   ],
   [
    1,
    1,
    1,
    2,
    2
   ],
   [
    1,
    2,
    3,
    4,
    5
   ]
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def find_first_duplicate(n: list):\n    num_set = set()\n    no_duplicate = -1\n    for i in range(len(n)):\n        if n[i] in num_set:\n            return n[i]\n        else:\n            num_set.add(n[i])\n    return no_duplicate",
  "changed_function": "def find_first_duplicate(x: list):\n    num_set = set()\n    no_duplicate = -1\n    for i in range(len(x)):\n        if x[i] in num_set:\n            return x[i]\n        else:\n            num_set.add(x[i])\n    return no_duplicate",
  "function_name": "find_first_duplicate",
  "inputs": [
   "[1,2,3,4,5]",
   "[1,2,3,2,1]",
   "[1,1,2,3,4,5]",
   "[1,2,2,3,4]",
   "[2,2,1,3,3]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "n",
  "original_function": "def is_palindrome(s: str):\n    return s == s[::-1]",
  "changed_function": "def is_palindrome(n: str):\n    return n == n[::-1]",
  "function_name": "is_palindrome",
  "inputs": [
   "'racecar'",
   "'madam'",
   "'apple'",
   "'noon'",
   "'civic'"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "m",
  "original_function": "def sum_of_squares(arr: list):\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i] * arr[i]\n    return total",
  "changed_function": "def sum_of_squares(m: list):\n    total = 0\n    for i in range(len(m)):\n        total += m[i] * m[i]\n    return total",
  "function_name": "sum_of_squares",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[1, 1, 1]"
  ]
 },
 {
  "target_argument": "numbers",
  "change_to": "i",
  "original_function": "def find_missing_number(numbers: list):\n    n = len(numbers) + 1\n    total_sum = n * (n + 1) // 2\n    for number in numbers:\n        total_sum -= number\n    return total_sum",
  "changed_function": "def find_missing_number(i: list):\n    n = len(i) + 1\n    total_sum = n * (n + 1) // 2\n    for number in i:\n        total_sum -= number\n    return total_sum",
  "function_name": "find_missing_number",
  "inputs": [
   "[1, 2, 3, 5]",
   "[1, 2, 4, 5]",
   "[1, 3, 4, 5]",
   "[1, 2, 3, 4]",
   "[1, 2, 0, 4]"
  ]
 },
 {
  "target_argument": "data",
  "change_to": "i",
  "original_function": "def count_vowels(data: str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in data:\n        if char in vowels:\n            count += 1\n    return count",
  "changed_function": "def count_vowels(i: str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in i:\n        if char in vowels:\n            count += 1\n    return count",
  "function_name": "count_vowels",
  "inputs": [
   "'hello world'",
   "'python'",
   "'programming'",
   "'computer science'",
   "'data structures'"
  ]
 },
 {
  "target_argument": "string",
  "change_to": "x",
  "original_function": "def reverse_string(string: str):\n    return string[::-1]",
  "changed_function": "def reverse_string(x: str):\n    return x[::-1]",
  "function_name": "reverse_string",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'data structures'"
  ]
 },
 {
  "target_argument": "input",
  "change_to": "c",
  "original_function": "def is_prime(input: int):\n    if input <= 1:\n        return False\n    for i in range(2, int(input**0.5) + 1):\n        if input % i == 0:\n            return False\n    return True",
  "changed_function": "def is_prime(c: int):\n    if c <= 1:\n        return False\n    for i in range(2, int(c**0.5) + 1):\n        if c % i == 0:\n            return False\n    return True",
  "function_name": "is_prime",
  "inputs": [
   "2",
   "3",
   "4",
   "5",
   "7"
  ]
 },
 {
  "target_argument": "words",
  "change_to": "t",
  "original_function": "def longest_word(words: list):\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word",
  "changed_function": "def longest_word(t: list):\n    longest_word = ''\n    for word in t:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word",
  "function_name": "longest_word",
  "inputs": [
   "['apple', 'banana', 'cherry']",
   "['cat', 'dog', 'elephant']",
   "['red', 'green', 'blue']",
   "['short', 'medium', 'long']",
   "['tiny', 'small', 'huge']"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def count_occurrences(a: list):\n    occurrences = {}\n    for item in a:\n        if item in occurrences:\n            occurrences[item] += 1\n        else:\n            occurrences[item] = 1\n    return occurrences",
  "changed_function": "def count_occurrences(x: list):\n    occurrences = {}\n    for item in x:\n        if item in occurrences:\n            occurrences[item] += 1\n        else:\n            occurrences[item] = 1\n    return occurrences",
  "function_name": "count_occurrences",
  "inputs": [
   "[1, 2, 2, 3, 3, 3]",
   "[4, 5, 5, 6, 6, 6]",
   "[7, 8, 8, 9, 9, 9]",
   "[10, 11, 11, 12, 12, 12]",
   "[1, 1, 1, 2, 2, 2]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def fibonacci(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
  "changed_function": "def fibonacci(i: int):\n    if i <= 1:\n        return i\n    else:\n        return fibonacci(i-1) + fibonacci(i-2)",
  "function_name": "fibonacci",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "list1",
  "change_to": "n",
  "original_function": "def maximum_Sum(list1):\n    maxi = -100000\n    for x in list1:\n        sum = 0\n        for y in x:\n            sum+= y\n        maxi = max(sum,maxi)\n    return maxi",
  "changed_function": "def maximum_Sum(n):\n    maxi = -100000\n    for x in n:\n        sum = 0\n        for y in x:\n            sum+= y\n        maxi = max(sum,maxi)\n    return maxi",
  "function_name": "maximum_Sum",
  "inputs": [
   "[[1,2,3],[4,5,6]]",
   "[[7,8,9],[10,11,12]]",
   "[[13,14,15],[16,17,18]]",
   "[[19,20,21],[22,23,24]]",
   "[[25,26,27],[28,29,30]]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def  count_vowels(a):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for letter in a:\n        if letter in vowels:\n            count += 1\n    return count",
  "changed_function": "def  count_vowels(n):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for letter in n:\n        if letter in vowels:\n            count += 1\n    return count",
  "function_name": "count_vowels",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"javascript\""
  ]
 },
 {
  "target_argument": "lst",
  "change_to": "x",
  "original_function": "def remove_duplicates(lst):\n    unique_lst = []\n    for x in lst:\n        if x not in unique_lst:\n            unique_lst.append(x)\n    return unique_lst",
  "changed_function": "def remove_duplicates(x):\n    unique_lst = []\n    for n in x:\n        if n not in unique_lst:\n            unique_lst.append(n)\n    return unique_lst",
  "function_name": "remove_duplicates",
  "inputs": [
   "[1,2,2,3,4,4,5]",
   "[1,1,2,3,3,4,5]",
   "[1,2,3,4,5,6,7]",
   "[8,8,9,10,11,12,12]",
   "[13,14,15,16,17,18,19]"
  ]
 },
 {
  "target_argument": "input_string",
  "change_to": "n",
  "original_function": "def reverse_string(input_string):\n    return input_string[::-1]",
  "changed_function": "def reverse_string(n):\n    return n[::-1]",
  "function_name": "reverse_string",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"javascript\""
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "x",
  "original_function": "def find_second_largest(arr):\n    if len(arr) < 2:\n        return None\n    largest = max(arr[0], arr[1])\n    second_largest = min(arr[0], arr[1])\n    for x in arr[2:]:\n        if x > largest:\n            second_largest = largest\n            largest = x\n        elif x > second_largest and x != largest:\n            second_largest = x\n    if second_largest == min(arr[0], arr[1]):\n        return None\n    return second_largest",
  "changed_function": "def find_second_largest(x):\n    if len(x) < 2:\n        return None\n    largest = max(x[0], x[1])\n    second_largest = min(x[0], x[1])\n    for n in x[2:]:\n        if n > largest:\n            second_largest = largest\n            largest = n\n        elif n > second_largest and n != largest:\n            second_largest = n\n    if second_largest == min(x[0], x[1]):\n        return None\n    return second_largest",
  "function_name": "find_second_largest",
  "inputs": [
   "[1,2,3,4,5]",
   "[6,7,8,9,10]",
   "[11,12,13,14,15]",
   "[16,17,18,19,20]",
   "[21,22,23,24,25]"
  ]
 },
 {
  "target_argument": "list1",
  "change_to": "s",
  "original_function": "def check_if_sorted(list1):\n    n = len(list1)\n    if n == 0 or n == 1:\n        return True\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
  "changed_function": "def check_if_sorted(s):\n    n = len(s)\n    if n == 0 or n == 1:\n        return True\n    for i in range(n-1):\n        if s[i] > s[i+1]:\n            return False\n    return True",
  "function_name": "check_if_sorted",
  "inputs": [
   "[1,2,3,4,5]",
   "[6,7,8,9,10]",
   "[1,3,5,7,9]",
   "[2,4,6,8,10]",
   "[1,4,7,10,13]"
  ]
 },
 {
  "target_argument": "numbers",
  "change_to": "x",
  "original_function": "def is_prime(numbers):\n    if numbers <= 1:\n        return False\n    for x in range(2, int(numbers**0.5) + 1):\n        if numbers % x == 0:\n            return False\n    return True",
  "changed_function": "def is_prime(x):\n    if x <= 1:\n        return False\n    for n in range(2, int(x**0.5) + 1):\n        if x % n == 0:\n            return False\n    return True",
  "function_name": "is_prime",
  "inputs": [
   "2",
   "3",
   "5",
   "7",
   "11"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "y",
  "original_function": "def count_words(text):\n    words = text.split()\n    return len(words)",
  "changed_function": "def count_words(y):\n    words = y.split()\n    return len(words)",
  "function_name": "count_words",
  "inputs": [
   "\"This is a test sentence.\"",
   "\"Another example of a sentence.\"",
   "\"Short sentence.\"",
   "\"Long sentence with many words.\"",
   "\"One word.\""
  ]
 },
 {
  "target_argument": "text",
  "change_to": "x",
  "original_function": "def  capitalize_first_letter(text):\n    return text[0].upper() + text[1:]",
  "changed_function": "def  capitalize_first_letter(x):\n    return x[0].upper() + x[1:]",
  "function_name": "capitalize_first_letter",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"javascript\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def  sum_list(a):\n    total = 0\n    for n in a:\n        total += n\n    return total",
  "changed_function": "def  sum_list(n):\n    total = 0\n    for x in n:\n        total += x\n    return total",
  "function_name": "sum_list",
  "inputs": [
   "[1,2,3,4,5]",
   "[6,7,8,9,10]",
   "[11,12,13,14,15]",
   "[16,17,18,19,20]",
   "[21,22,23,24,25]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def func1(x: int):\n    n = 10\n    return (x * x) + n",
  "changed_function": "def func1(n: int):\n    a = 10\n    return (n * n) + a",
  "function_name": "func1",
  "inputs": [
   "5",
   "10",
   "20",
   "50",
   "100"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "s",
  "original_function": "def func2(l: list):\n    s = len(l)\n    if s > 5:\n        return True\n    else:\n        return False",
  "changed_function": "def func2(s: list):\n    t = len(s)\n    if t > 5:\n        return True\n    else:\n        return False",
  "function_name": "func2",
  "inputs": [
   "[1, 2, 3, 4, 5, 6, 7]",
   "[1, 2, 3]",
   "[1, 2, 3, 4, 5]",
   "[1, 2, 3, 4, 5, 6]",
   "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def func3(n: int):\n    m = 10\n    for i in range(0, n):\n        m = m + i\n    return m",
  "changed_function": "def func3(m: int):\n    n = 10\n    for i in range(0, m):\n        n = n + i\n    return n",
  "function_name": "func3",
  "inputs": [
   "10",
   "5",
   "20",
   "1",
   "100"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def func4(a: bool):\n    n = 0\n    if a:\n        return 1\n    else:\n        return n",
  "changed_function": "def func4(n: bool):\n    a = 0\n    if n:\n        return 1\n    else:\n        return a",
  "function_name": "func4",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def func5(x: int):\n    y = 5\n    n = 10\n    return (x * y) + n",
  "changed_function": "def func5(n: int):\n    y = 5\n    x = 10\n    return (n * y) + x",
  "function_name": "func5",
  "inputs": [
   "5",
   "10",
   "20",
   "50",
   "100"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def func6(s: str):\n    a = 10\n    return s + str(a)",
  "changed_function": "def func6(a: str):\n    s = 10\n    return a + str(s)",
  "function_name": "func6",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"code\""
  ]
 },
 {
  "target_argument": "y",
  "change_to": "x",
  "original_function": "def func7(y: int):\n    x = 10\n    z = 5\n    return x + y + z",
  "changed_function": "def func7(x: int):\n    y = 10\n    z = 5\n    return y + x + z",
  "function_name": "func7",
  "inputs": [
   "5",
   "10",
   "20",
   "50",
   "100"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "n",
  "original_function": "def func8(s: str):\n    n = 0\n    for i in s:\n        n += 1\n    return n",
  "changed_function": "def func8(n: str):\n    s = 0\n    for i in n:\n        s += 1\n    return s",
  "function_name": "func8",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"code\""
  ]
 },
 {
  "target_argument": "s",
  "change_to": "n",
  "original_function": "def func9(s: str):\n    n = 0\n    for i in range(0, len(s)):\n        if s[i] == 'a':\n            n += 1\n    return n",
  "changed_function": "def func9(n: str):\n    s = 0\n    for i in range(0, len(n)):\n        if n[i] == 'a':\n            s += 1\n    return s",
  "function_name": "func9",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"code\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def func10(a: int):\n    x = 1\n    if a > 10:\n        x = x + 1\n    return x",
  "changed_function": "def func10(x: int):\n    a = 1\n    if x > 10:\n        a = a + 1\n    return a",
  "function_name": "func10",
  "inputs": [
   "10",
   "20",
   "5",
   "100",
   "50"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "i",
  "original_function": "def foo(f: int):\n  i = 0\n  for n in range(f):\n    i += n\n  return i",
  "changed_function": "def foo(i: int):\n  j = 0\n  for n in range(i):\n    j += n\n  return j",
  "function_name": "foo",
  "inputs": [
   "5",
   "10",
   "1",
   "3",
   "20"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "t",
  "original_function": "def bar(x: int):\n  t = x\n  if x < 0:\n    t = -x\n  return t",
  "changed_function": "def bar(t: int):\n  s = t\n  if t < 0:\n    s = -t\n  return s",
  "function_name": "bar",
  "inputs": [
   "5",
   "10",
   "-1",
   "-5",
   "0"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "x",
  "original_function": "def baz(l: list):\n  x = 0\n  for i in range(len(l)):\n    x += l[i]\n  return x",
  "changed_function": "def baz(x: list):\n  y = 0\n  for i in range(len(x)):\n    y += x[i]\n  return y",
  "function_name": "baz",
  "inputs": [
   "[1,2,3]",
   "[4,5,6]",
   "[]",
   "[1,2,3,4,5]",
   "[10,20,30]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "l",
  "original_function": "def qux(s: str):\n  l = 0\n  for i in s:\n    if i.isdigit():\n      l += 1\n  return l",
  "changed_function": "def qux(l: str):\n  m = 0\n  for i in l:\n    if i.isdigit():\n      m += 1\n  return m",
  "function_name": "qux",
  "inputs": [
   "'abc123'",
   "'123456'",
   "'hello world'",
   "'1a2b3c'",
   "'test123'"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def quux(a: list):\n  x = 0\n  for i in a:\n    if i % 2 == 0:\n      x += i\n  return x",
  "changed_function": "def quux(x: list):\n  y = 0\n  for i in x:\n    if i % 2 == 0:\n      y += i\n  return y",
  "function_name": "quux",
  "inputs": [
   "[1,2,3,4]",
   "[5,6,7,8]",
   "[10,11,12,13]",
   "[1,3,5,7]",
   "[2,4,6,8]"
  ]
 },
 {
  "target_argument": "t",
  "change_to": "f",
  "original_function": "def foobar(t: tuple):\n  f = 0\n  for i in t:\n    if isinstance(i, int):\n      f += i\n  return f",
  "changed_function": "def foobar(f: tuple):\n  g = 0\n  for i in f:\n    if isinstance(i, int):\n      g += i\n  return g",
  "function_name": "foobar",
  "inputs": [
   "(1,2,3,4)",
   "(5,6,7,8)",
   "(1,2,'a','b')",
   "(1,2,3,4.5)",
   "(10,20,30,40)"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "x",
  "original_function": "def barfoo(s: str):\n  x = ''\n  for i in s:\n    if i.isupper():\n      x += i\n  return x",
  "changed_function": "def barfoo(x: str):\n  y = ''\n  for i in x:\n    if i.isupper():\n      y += i\n  return y",
  "function_name": "barfoo",
  "inputs": [
   "'HelloWorld'",
   "'PythonIsFun'",
   "'ABCDEFG'",
   "'aBcDeFg'",
   "'1234567'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def bazqux(n: int):\n  i = 1\n  for j in range(2, n + 1):\n    i *= j\n  return i",
  "changed_function": "def bazqux(i: int):\n  j = 1\n  for k in range(2, i + 1):\n    j *= k\n  return j",
  "function_name": "bazqux",
  "inputs": [
   "5",
   "10",
   "3",
   "7",
   "1"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "i",
  "original_function": "def quuxbaz(b: bool):\n  i = 0\n  if b:\n    i = 1\n  return i",
  "changed_function": "def quuxbaz(i: bool):\n  j = 0\n  if i:\n    j = 1\n  return j",
  "function_name": "quuxbaz",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "i",
  "original_function": "def foobarbaz(a: list):\n  i = 0\n  while i < len(a):\n    if a[i] == 0:\n      a[i] = 1\n    i += 1\n  return a",
  "changed_function": "def foobarbaz(i: list):\n  j = 0\n  while j < len(i):\n    if i[j] == 0:\n      i[j] = 1\n    j += 1\n  return i",
  "function_name": "foobarbaz",
  "inputs": [
   "[1,2,3,4]",
   "[5,6,0,8]",
   "[10,0,12,13]",
   "[1,3,5,7]",
   "[0,0,0,0]"
  ]
 },
 {
  "target_argument": "num",
  "change_to": "i",
  "original_function": "def func_1(num: int):\n  if num > 5:\n    res = 1\n  else:\n    res = num * 2\n  return (res)\n",
  "changed_function": "def func_1(i: int):\n  if i > 5:\n    res_1 = 1\n  else:\n    res_1 = i * 2\n  return (res_1)\n",
  "function_name": "func_1",
  "inputs": [
   "1",
   "6",
   "10",
   "0",
   "-2"
  ]
 },
 {
  "target_argument": "str_1",
  "change_to": "s",
  "original_function": "def func_2(str_1: str):\n  count = 0\n  for s in str_1:\n    if s.isupper():\n      count = count + 1\n  return (count)\n",
  "changed_function": "def func_2(s: str):\n  count = 0\n  for s_1 in s:\n    if s_1.isupper():\n      count = count + 1\n  return (count)\n",
  "function_name": "func_2",
  "inputs": [
   "\"Hello World\"",
   "\"aBcDeFg\"",
   "\"hello\"",
   "\"A\"",
   "\"WORLD\""
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "a",
  "original_function": "def func_3(arr: list):\n  sum = 0\n  for a in arr:\n    sum = sum + a\n  return (sum)\n",
  "changed_function": "def func_3(a: list):\n  sum_1 = 0\n  for a_1 in a:\n    sum_1 = sum_1 + a_1\n  return (sum_1)\n",
  "function_name": "func_3",
  "inputs": [
   "[1,2,3,4]",
   "[1,2,3,4,5]",
   "[-1,-2,0,3]",
   "[5]",
   "[0,0,0,0,0]"
  ]
 },
 {
  "target_argument": "bool_val",
  "change_to": "b",
  "original_function": "def func_4(bool_val: bool):\n  if bool_val == True:\n    res = 1\n  else:\n    res = -1\n  return (res)\n",
  "changed_function": "def func_4(b: bool):\n  if b == True:\n    res_1 = 1\n  else:\n    res_1 = -1\n  return (res_1)\n",
  "function_name": "func_4",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "tup",
  "change_to": "t",
  "original_function": "def func_5(tup: tuple):\n  res = 0\n  for t in tup:\n    res = res + t\n  return (res)\n",
  "changed_function": "def func_5(t: tuple):\n  res_1 = 0\n  for t_1 in t:\n    res_1 = res_1 + t_1\n  return (res_1)\n",
  "function_name": "func_5",
  "inputs": [
   "(1, 2, 3)",
   "(10, 20, 30)",
   "(-1,-1,-1)",
   "(0,0,0)",
   "(1,2)"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "s",
  "original_function": "def func_6(l: list):\n  s = 0\n  for i in range(0, len(l)):\n    s = s + l[i]\n  return (s)\n",
  "changed_function": "def func_6(s: list):\n  s_1 = 0\n  for i in range(0, len(s)):\n    s_1 = s_1 + s[i]\n  return (s_1)\n",
  "function_name": "func_6",
  "inputs": [
   "[1,2,3,4]",
   "[1,2,3,4,5]",
   "[-1,-2,0,3]",
   "[5]",
   "[0,0,0,0,0]"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "l",
  "original_function": "def func_7(arr: list):\n  l = 0\n  for i in range(0, len(arr)):\n    l = l + arr[i]\n  return (l)\n",
  "changed_function": "def func_7(l: list):\n  l_1 = 0\n  for i in range(0, len(l)):\n    l_1 = l_1 + l[i]\n  return (l_1)\n",
  "function_name": "func_7",
  "inputs": [
   "[1,2,3,4]",
   "[1,2,3,4,5]",
   "[-1,-2,0,3]",
   "[5]",
   "[0,0,0,0,0]"
  ]
 },
 {
  "target_argument": "num",
  "change_to": "x",
  "original_function": "def func_8(num: int):\n  x = 1\n  if num % 2 == 0:\n    x = 2\n  return (x)\n",
  "changed_function": "def func_8(x: int):\n  x_1 = 1\n  if x % 2 == 0:\n    x_1 = 2\n  return (x_1)\n",
  "function_name": "func_8",
  "inputs": [
   "1",
   "2",
   "5",
   "6",
   "8"
  ]
 },
 {
  "target_argument": "list_1",
  "change_to": "x",
  "original_function": "def func_9(list_1: list):\n  x = 0\n  for i in range(0, len(list_1)):\n    x = x + list_1[i]\n  return (x)\n",
  "changed_function": "def func_9(x: list):\n  x_1 = 0\n  for i in range(0, len(x)):\n    x_1 = x_1 + x[i]\n  return (x_1)\n",
  "function_name": "func_9",
  "inputs": [
   "[1,2,3]",
   "[1,1,1]",
   "[-1, -1, -1]",
   "[1,2,3,4]",
   "[5,5,5,5]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def func_10(s: str):\n  t = 0\n  for c in s:\n    t = t + ord(c)\n  return (t)\n",
  "changed_function": "def func_10(t: str):\n  t_1 = 0\n  for c in t:\n    t_1 = t_1 + ord(c)\n  return (t_1)\n",
  "function_name": "func_10",
  "inputs": [
   "\"Hello World\"",
   "\"aBcDeFg\"",
   "\"hello\"",
   "\"A\"",
   "\"WORLD\""
  ]
 },
 {
  "target_argument": "lst",
  "change_to": "i",
  "original_function": "def test(lst: list):\n    i = []\n    for l in lst:\n        if len(l) > 3:\n            i.append(l)\n    return i",
  "changed_function": "def test(i: list):\n    j = []\n    for l in i:\n        if len(l) > 3:\n            j.append(l)\n    return j",
  "function_name": "test",
  "inputs": [
   "['hello', 'world', 'long_string', 'another']",
   "['a', 'b', 'c', 'd', 'e']",
   "['a', 'b']",
   "['apple', 'banana', 'cherry']",
   "['one', 'two', 'three', 'four']"
  ]
 },
 {
  "target_argument": "num",
  "change_to": "i",
  "original_function": "def num_check(num: int):\n    i = 0\n    if num < 0:\n        return False\n    while num > 0:\n        i = i + 1\n        num = num - 1\n    return i % 2 == 0",
  "changed_function": "def num_check(i: int):\n    j = 0\n    if i < 0:\n        return False\n    while i > 0:\n        j = j + 1\n        i = i - 1\n    return j % 2 == 0",
  "function_name": "num_check",
  "inputs": [
   "5",
   "10",
   "1",
   "0",
   "-2"
  ]
 },
 {
  "target_argument": "txt",
  "change_to": "t",
  "original_function": "def char_count(txt: str):\n    t = {}\n    for char in txt:\n        if char in t:\n            t[char] += 1\n        else:\n            t[char] = 1\n    return t",
  "changed_function": "def char_count(t: str):\n    s = {}\n    for char in t:\n        if char in s:\n            s[char] += 1\n        else:\n            s[char] = 1\n    return s",
  "function_name": "char_count",
  "inputs": [
   "'hello'",
   "'world'",
   "'programming'",
   "'python'",
   "'data'"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "i",
  "original_function": "def reverse_string(s: str):\n    i = ''\n    for char in s:\n        i = char + i\n    return i",
  "changed_function": "def reverse_string(i: str):\n    j = ''\n    for char in i:\n        j = char + j\n    return j",
  "function_name": "reverse_string",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'coding'",
   "'reverse'"
  ]
 },
 {
  "target_argument": "input_list",
  "change_to": "x",
  "original_function": "def find_max(input_list: list):\n    x = input_list[0]\n    for num in input_list:\n        if num > x:\n            x = num\n    return x",
  "changed_function": "def find_max(x: list):\n    y = x[0]\n    for num in x:\n        if num > y:\n            y = num\n    return y",
  "function_name": "find_max",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 5, 8, 12, 3]",
   "[-1, 0, 2, 5, -3]",
   "[100, 200, 300, 400, 500]",
   "[1, 1, 1, 1, 1]"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "a",
  "original_function": "def sum_even(arr: list):\n    a = 0\n    for num in arr:\n        if num % 2 == 0:\n            a += num\n    return a",
  "changed_function": "def sum_even(a: list):\n    b = 0\n    for num in a:\n        if num % 2 == 0:\n            b += num\n    return b",
  "function_name": "sum_even",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[2, 4, 6, 8, 10]",
   "[1, 3, 5, 7, 9]",
   "[10, 20, 30, 40, 50]",
   "[1, 2, 3, 4, 5, 6]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def factorial(n: int):\n    x = 1\n    for i in range(1, n + 1):\n        x *= i\n    return x",
  "changed_function": "def factorial(x: int):\n    y = 1\n    for i in range(1, x + 1):\n        y *= i\n    return y",
  "function_name": "factorial",
  "inputs": [
   "5",
   "10",
   "3",
   "7",
   "1"
  ]
 },
 {
  "target_argument": "sentence",
  "change_to": "s",
  "original_function": "def word_count(sentence: str):\n    s = sentence.split()\n    return len(s)",
  "changed_function": "def word_count(s: str):\n    t = s.split()\n    return len(t)",
  "function_name": "word_count",
  "inputs": [
   "'This is a sentence.'",
   "'Hello world!'",
   "'One two three.'",
   "'Python is fun!'",
   "'The quick brown fox jumps over the lazy dog.'"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "t",
  "original_function": "def count_occurrences(a: list):\n    t = {} \n    for item in a:\n        if item in t:\n            t[item] += 1\n        else:\n            t[item] = 1\n    return t",
  "changed_function": "def count_occurrences(t: list):\n    s = {} \n    for item in t:\n        if item in s:\n            s[item] += 1\n        else:\n            s[item] = 1\n    return s",
  "function_name": "count_occurrences",
  "inputs": [
   "[1, 2, 3, 2, 1, 4, 5, 4]",
   "['apple', 'banana', 'apple', 'cherry', 'banana']",
   "[True, False, True, True, False]",
   "['a', 'b', 'c', 'a', 'b', 'd']",
   "[1, 1, 1, 2, 2, 2, 3, 3, 3]"
  ]
 },
 {
  "target_argument": "str_list",
  "change_to": "s",
  "original_function": "def sort_strings(str_list: list):\n    s = sorted(str_list, key=len)\n    return s",
  "changed_function": "def sort_strings(s: list):\n    t = sorted(s, key=len)\n    return t",
  "function_name": "sort_strings",
  "inputs": [
   "['hello', 'world', 'python', 'coding']",
   "['apple', 'banana', 'cherry', 'grape']",
   "['a', 'b', 'c', 'd', 'e']",
   "['short', 'medium', 'long', 'very_long']",
   "['one', 'two', 'three', 'four']"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def find_max_subarray_sum(n: list):\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(len(n)):\n        max_ending_here = max(0, max_ending_here + n[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
  "changed_function": "def find_max_subarray_sum(k: list):\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(len(k)):\n        max_ending_here = max(0, max_ending_here + k[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
  "function_name": "find_max_subarray_sum",
  "inputs": [
   "[1, 2, -3, 4, -5, 6]",
   "[2, -1, 4, -2, 5]",
   "[5, -3, 2, -1, 4]",
   "[10, -1, 5, -3, 8]",
   "[0, 1, 2, -3, 4]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "i",
  "original_function": "def count_vowels(s: str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count",
  "changed_function": "def count_vowels(i: str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for s in i:\n        if s in vowels:\n            count += 1\n    return count",
  "function_name": "count_vowels",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"programming\"",
   "\"python\"",
   "\"data structures\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def remove_duplicates(a: list):\n    new_list = []\n    for i in a:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list",
  "changed_function": "def remove_duplicates(b: list):\n    new_list = []\n    for i in b:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list",
  "function_name": "remove_duplicates",
  "inputs": [
   "[1, 2, 2, 3, 4, 4, 5]",
   "[1, 1, 2, 3, 3, 4, 4]",
   "[5, 4, 3, 2, 1]",
   "[1, 2, 3, 1, 2, 3]",
   "[0, 0, 1, 1, 2, 2]"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "k",
  "original_function": "def is_palindrome(m: str):\n    m = m.lower()\n    return m == m[::-1]",
  "changed_function": "def is_palindrome(k: str):\n    k = k.lower()\n    return k == k[::-1]",
  "function_name": "is_palindrome",
  "inputs": [
   "\"racecar\"",
   "\"level\"",
   "\"madam\"",
   "\"hello\"",
   "\"world\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "s",
  "original_function": "def factorial(n: int):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)",
  "changed_function": "def factorial(s: int):\n    if s == 0:\n        return 1\n    else:\n        return s * factorial(s - 1)",
  "function_name": "factorial",
  "inputs": [
   "5",
   "10",
   "0",
   "7",
   "3"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "s",
  "original_function": "def find_missing_number(arr: list):\n    n = len(arr) + 1\n    total_sum = n * (n + 1) // 2\n    sum_of_elements = sum(arr)\n    return total_sum - sum_of_elements",
  "changed_function": "def find_missing_number(s: list):\n    n = len(s) + 1\n    total_sum = n * (n + 1) // 2\n    sum_of_elements = sum(s)\n    return total_sum - sum_of_elements",
  "function_name": "find_missing_number",
  "inputs": [
   "[1, 2, 4, 5]",
   "[1, 2, 3, 5]",
   "[1, 3, 4, 5]",
   "[2, 3, 4, 5]",
   "[1, 2, 3, 4, 6, 7, 8, 9, 10]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "k",
  "original_function": "def fibonacci(x: int):\n    if x <= 1:\n        return x\n    else:\n        return fibonacci(x - 1) + fibonacci(x - 2)",
  "changed_function": "def fibonacci(k: int):\n    if k <= 1:\n        return k\n    else:\n        return fibonacci(k - 1) + fibonacci(k - 2)",
  "function_name": "fibonacci",
  "inputs": [
   "10",
   "5",
   "0",
   "7",
   "15"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "k",
  "original_function": "def sum_of_squares(nums: list):\n    sum = 0\n    for i in nums:\n        sum += i * i\n    return sum",
  "changed_function": "def sum_of_squares(k: list):\n    sum = 0\n    for i in k:\n        sum += i * i\n    return sum",
  "function_name": "sum_of_squares",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[1, 3, 5, 7]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "s",
  "original_function": "def reverse_string(a: str):\n    return a[::-1]",
  "changed_function": "def reverse_string(s: str):\n    return s[::-1]",
  "function_name": "reverse_string",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"programming\"",
   "\"python\"",
   "\"data structures\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def is_prime(x: int):\n    if x <= 1:\n        return False\n    for n in range(2, int(x**0.5) + 1):\n        if x % n == 0:\n            return False\n    return True",
  "changed_function": "def is_prime(n: int):\n    if n <= 1:\n        return False\n    for k in range(2, int(n**0.5) + 1):\n        if n % k == 0:\n            return False\n    return True",
  "function_name": "is_prime",
  "inputs": [
   "2",
   "7",
   "11",
   "15",
   "23"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def func1(a: int):\n    n = 0\n    for i in range(a):\n        n = n + i\n    if n > 10:\n        return True\n    else:\n        return False",
  "changed_function": "def func1(n: int):\n    b = 0\n    for i in range(n):\n        b = b + i\n    if b > 10:\n        return True\n    else:\n        return False",
  "function_name": "func1",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def func2(s: str):\n    a = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            a = a + 1\n    return a",
  "changed_function": "def func2(s: str):\n    b = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            b = b + 1\n    return b",
  "function_name": "func2",
  "inputs": [
   "'apple'",
   "'banana'",
   "'cherry'",
   "'date'",
   "'elderberry'"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "a",
  "original_function": "def func3(b: bool):\n    a = 0\n    if b:\n        a = 1\n    return a",
  "changed_function": "def func3(a: bool):\n    b = 0\n    if a:\n        b = 1\n    return b",
  "function_name": "func3",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "s",
  "original_function": "def func4(l: list):\n    s = 0\n    for i in l:\n        s = s + i\n    return s",
  "changed_function": "def func4(s: list):\n    t = 0\n    for i in s:\n        t = t + i\n    return t",
  "function_name": "func4",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "t",
  "change_to": "i",
  "original_function": "def func5(t: tuple):\n    i = 0\n    for x in t:\n        i = i + x\n    return i",
  "changed_function": "def func5(i: tuple):\n    j = 0\n    for x in i:\n        j = j + x\n    return j",
  "function_name": "func5",
  "inputs": [
   "(1, 2, 3)",
   "(4, 5, 6)",
   "(7, 8, 9)",
   "(10, 11, 12)",
   "(13, 14, 15)"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def func6(x: int):\n    n = 0\n    while x > 0:\n        n = n + x % 10\n        x = x // 10\n    return n",
  "changed_function": "def func6(n: int):\n    a = 0\n    while n > 0:\n        a = a + n % 10\n        n = n // 10\n    return a",
  "function_name": "func6",
  "inputs": [
   "123",
   "456",
   "789",
   "101112",
   "131415"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "n",
  "original_function": "def func7(s: str):\n    n = 0\n    for i in range(len(s)):\n        n = n + ord(s[i])\n    return n",
  "changed_function": "def func7(s: str):\n    a = 0\n    for i in range(len(s)):\n        a = a + ord(s[i])\n    return a",
  "function_name": "func7",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'language'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "a",
  "original_function": "def func8(n: int):\n    a = 1\n    for i in range(2, n):\n        if n % i == 0:\n            a = 0\n    return a",
  "changed_function": "def func8(a: int):\n    b = 1\n    for i in range(2, a):\n        if a % i == 0:\n            b = 0\n    return b",
  "function_name": "func8",
  "inputs": [
   "2",
   "3",
   "5",
   "7",
   "11"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def func9(a: list):\n    x = 0\n    for i in range(len(a)):\n        x = x + a[i]\n    return x",
  "changed_function": "def func9(x: list):\n    y = 0\n    for i in range(len(x)):\n        y = y + x[i]\n    return y",
  "function_name": "func9",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "t",
  "change_to": "n",
  "original_function": "def func10(t: int):\n    n = 1\n    for i in range(2, t):\n        if t % i == 0:\n            n = 0\n    return n",
  "changed_function": "def func10(n: int):\n    m = 1\n    for i in range(2, n):\n        if n % i == 0:\n            m = 0\n    return m",
  "function_name": "func10",
  "inputs": [
   "2",
   "3",
   "5",
   "7",
   "11"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "n",
  "original_function": "def check_Equality(s):\n    return (ord(s[0]) == ord(s[len(s) - 1]));\ndef count_Substring_With_Equal_Ends(s):\n    result = 0;\n    n = len(s);\n    for i in range(n):\n        for j in range(1,n-i+1):\n            if (check_Equality(s[i:i+j])):\n                result+=1;\n    return result;",
  "changed_function": "def check_Equality(n):\n    return (ord(n[0]) == ord(n[len(n) - 1]));\ndef count_Substring_With_Equal_Ends(n):\n    result = 0;\n    x = len(n);\n    for i in range(x):\n        for j in range(1,x-i+1):\n            if (check_Equality(n[i:i+j])):\n                result+=1;\n    return result;",
  "function_name": "count_Substring_With_Equal_Ends",
  "inputs": [
   "\"abc\"",
   "\"aba\"",
   "\"abca\"",
   "\"ababa\"",
   "\"aabaa\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "s",
  "original_function": "def func_one(n):\n    result = 0\n    for i in range(n):\n        for j in range(i+1):\n            result += (i-j)**2\n    return result",
  "changed_function": "def func_one(s):\n    result = 0\n    for i in range(s):\n        for j in range(i+1):\n            result += (i-j)**2\n    return result",
  "function_name": "func_one",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def func_two(n):\n    result = 0\n    for i in range(n):\n        if i % 2 == 0:\n            result += i\n        else:\n            result -= i\n    return result",
  "changed_function": "def func_two(i):\n    result = 0\n    n = range(i)\n    for j in n:\n        if j % 2 == 0:\n            result += j\n        else:\n            result -= j\n    return result",
  "function_name": "func_two",
  "inputs": [
   "10",
   "20",
   "30",
   "40",
   "50"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def func_three(s):\n    i = 0\n    result = \"\"\n    while (i<len(s)):\n        if (s[i].isdigit()):\n            result = result + s[i]\n        i+=1\n    return result",
  "changed_function": "def func_three(t):\n    i = 0\n    result = \"\"\n    while (i<len(t)):\n        if (t[i].isdigit()):\n            result = result + t[i]\n        i+=1\n    return result",
  "function_name": "func_three",
  "inputs": [
   "\"a1b2c3\"",
   "\"123abc\"",
   "\"ab1c2\"",
   "\"a1b2c34\"",
   "\"123abcde\""
  ]
 },
 {
  "target_argument": "l",
  "change_to": "s",
  "original_function": "def func_seven(l):\n    result = 0\n    for i in range(len(l)):\n        result+= l[i]*l[i]\n    return result",
  "changed_function": "def func_seven(s):\n    result = 0\n    for i in range(len(s)):\n        result+= s[i]*s[i]\n    return result",
  "function_name": "func_seven",
  "inputs": [
   "[1,2,3,4]",
   "[5,6,7,8]",
   "[1,3,5,7]",
   "[2,4,6,8]",
   "[9,8,7,6]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "s",
  "original_function": "def func_eight(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a",
  "changed_function": "def func_eight(s):\n    a = 0\n    b = 1\n    for i in range(s):\n        a, b = b, a + b\n    return a",
  "function_name": "func_eight",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def func_nine(n):\n    n_list = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            n_list.append(i)\n    return n_list",
  "changed_function": "def func_nine(i):\n    n_list = []\n    for j in range(1,i+1):\n        if i%j == 0:\n            n_list.append(j)\n    return n_list",
  "function_name": "func_nine",
  "inputs": [
   "12",
   "24",
   "36",
   "48",
   "60"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "s",
  "original_function": "def func_ten(n):\n    result = 0\n    for i in range(n):\n        result+=i*(i+1)\n    return result",
  "changed_function": "def func_ten(s):\n    result = 0\n    for i in range(s):\n        result+=i*(i+1)\n    return result",
  "function_name": "func_ten",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def f(x: int):\n  n = 2\n  y = 0\n  while x > 0:\n    n = n * x\n    x = x - 1\n  y = y + 1\n  return (n, y)",
  "changed_function": "def f(n: int):\n  x = 2\n  y = 0\n  while n > 0:\n    x = x * n\n    n = n - 1\n  y = y + 1\n  return (x, y)",
  "function_name": "f",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "n",
  "original_function": "def g(m: int):\n  k = 10\n  n = m\n  while n > 0:\n    k = k + n\n    n = n - 1\n  return k",
  "changed_function": "def g(n: int):\n  k = 10\n  m = n\n  while m > 0:\n    k = k + m\n    m = m - 1\n  return k",
  "function_name": "g",
  "inputs": [
   "10",
   "20",
   "30",
   "40",
   "50"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def h(x: int):\n  y = 0\n  z = x + 5\n  while y < 10:\n    z = z + 2\n    y = y + 1\n  return z",
  "changed_function": "def h(z: int):\n  y = 0\n  x = z + 5\n  while y < 10:\n    x = x + 2\n    y = y + 1\n  return x",
  "function_name": "h",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "t",
  "original_function": "def j(x: bool):\n  t = x\n  if x:\n    t = True\n  return t",
  "changed_function": "def j(t: bool):\n  x = t\n  if t:\n    x = True\n  return x",
  "function_name": "j",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def k(x: str):\n  y = x\n  z = x + 'a'\n  return z",
  "changed_function": "def k(z: str):\n  y = z\n  x = z + 'a'\n  return x",
  "function_name": "k",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'language'"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def l(x: list):\n  a = x\n  a.append('a')\n  a.append('b')\n  a.append('c')\n  return a",
  "changed_function": "def l(a: list):\n  x = a\n  x.append('a')\n  x.append('b')\n  x.append('c')\n  return x",
  "function_name": "l",
  "inputs": [
   "[]",
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "p",
  "original_function": "def m(x: list):\n  p = [x]\n  x.append(1)\n  return p",
  "changed_function": "def m(p: list):\n  x = [p]\n  p.append(1)\n  return x",
  "function_name": "m",
  "inputs": [
   "[1]",
   "[2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def n(x: int):\n  y = x\n  while x > 0:\n    x = x - 1\n  if x == 0:\n    y = 0\n  return y",
  "changed_function": "def n(y: int):\n  x = y\n  while y > 0:\n    y = y - 1\n  if y == 0:\n    x = 0\n  return x",
  "function_name": "n",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def o(x: int):\n  z = x + 1\n  while z > 0:\n    z = z - 1\n  return z",
  "changed_function": "def o(z: int):\n  x = z + 1\n  while x > 0:\n    x = x - 1\n  return x",
  "function_name": "o",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "x",
  "original_function": "def p(y: int):\n  x = y\n  x = x + 10\n  return x",
  "changed_function": "def p(x: int):\n  y = x\n  y = y + 10\n  return y",
  "function_name": "p",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "r",
  "original_function": "def check_palindrome(l: str):\n    n = len(l)\n    for i in range(n // 2):\n        if l[i] != l[n - i - 1]:\n            return False\n    return True",
  "changed_function": "def check_palindrome(r: str):\n    n = len(r)\n    for i in range(n // 2):\n        if r[i] != r[n - i - 1]:\n            return False\n    return True",
  "function_name": "check_palindrome",
  "inputs": [
   "'racecar'",
   "'level'",
   "'madam'",
   "'abccba'",
   "'rotor'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def find_max(n: list):\n    if len(n) == 0:\n        return None\n    max_val = n[0]\n    for i in range(1, len(n)):\n        if n[i] > max_val:\n            max_val = n[i]\n    return max_val",
  "changed_function": "def find_max(m: list):\n    if len(m) == 0:\n        return None\n    max_val = m[0]\n    for i in range(1, len(m)):\n        if m[i] > max_val:\n            max_val = m[i]\n    return max_val",
  "function_name": "find_max",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[1, 3, 5, 2, 4]",
   "[2, 4, 6, 1, 3]",
   "[3, 1, 4, 2, 5]"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "x",
  "original_function": "def reverse_list(l: list):\n    n = len(l)\n    for i in range(n // 2):\n        l[i], l[n - i - 1] = l[n - i - 1], l[i]\n    return l",
  "changed_function": "def reverse_list(x: list):\n    n = len(x)\n    for i in range(n // 2):\n        x[i], x[n - i - 1] = x[n - i - 1], x[i]\n    return x",
  "function_name": "reverse_list",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[1, 3, 5, 2, 4]",
   "[2, 4, 6, 1, 3]",
   "[3, 1, 4, 2, 5]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def is_prime(x: int):\n    if x <= 1:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True",
  "changed_function": "def is_prime(n: int):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
  "function_name": "is_prime",
  "inputs": [
   "2",
   "3",
   "5",
   "7",
   "11"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def count_occurrences(n: str, s: str):\n    count = 0\n    for i in range(len(s) - len(n) + 1):\n        if s[i:i + len(n)] == n:\n            count += 1\n    return count",
  "changed_function": "def count_occurrences(x: str, s: str):\n    count = 0\n    for i in range(len(s) - len(x) + 1):\n        if s[i:i + len(x)] == x:\n            count += 1\n    return count",
  "function_name": "count_occurrences",
  "inputs": [
   "'hello', 'world'",
   "'world', 'helloworld'",
   "'is', 'this is a test'",
   "'the', 'the quick brown fox'",
   "'a', 'banana'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "l",
  "original_function": "def find_smallest_missing_positive(n: list):\n    n.sort()\n    i = 1\n    while i <= len(n) and n[i - 1] <= 0:\n        i += 1\n    if i > len(n):\n        return len(n) + 1\n    for j in range(i, len(n)):\n        if n[j] != j + 1:\n            return j + 1\n    return len(n) + 1",
  "changed_function": "def find_smallest_missing_positive(l: list):\n    l.sort()\n    i = 1\n    while i <= len(l) and l[i - 1] <= 0:\n        i += 1\n    if i > len(l):\n        return len(l) + 1\n    for j in range(i, len(l)):\n        if l[j] != j + 1:\n            return j + 1\n    return len(l) + 1",
  "function_name": "find_smallest_missing_positive",
  "inputs": [
   "[1, 2, 0]",
   "[3, 4, -1, 1]",
   "[7, 8, 9, 11, 12]",
   "[1, 2, 3, 5]",
   "[-2, -1, 1, 2, 3]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "i",
  "original_function": "def check_anagrams(x: str, y: str):\n    if len(x) != len(y):\n        return False\n    x = sorted(x)\n    y = sorted(y)\n    return x == y",
  "changed_function": "def check_anagrams(i: str, y: str):\n    if len(i) != len(y):\n        return False\n    i = sorted(i)\n    y = sorted(y)\n    return i == y",
  "function_name": "check_anagrams",
  "inputs": [
   "'listen', 'silent'",
   "'dog', 'god'",
   "'cat', 'act'",
   "'racecar', 'raccer'",
   "'hello', 'world'"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "s",
  "original_function": "def check_subset(x: list, y: list):\n    for i in x:\n        if i not in y:\n            return False\n    return True",
  "changed_function": "def check_subset(s: list, y: list):\n    for i in s:\n        if i not in y:\n            return False\n    return True",
  "function_name": "check_subset",
  "inputs": [
   "[1, 2, 3], [1, 2, 3, 4, 5]",
   "[4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]",
   "[10, 20, 30], [10, 20, 30, 40, 50]",
   "[1, 2, 3, 4], [1, 2, 3, 4, 5, 6]",
   "[7, 8, 9, 10], [7, 8, 9]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def find_sum_of_digits(n: int):\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum",
  "function_name": "find_sum_of_digits",
  "inputs": [
   "123",
   "456",
   "789",
   "101",
   "999"
  ],
  "changed_function": "def find_sum_of_digits(m: int):\n    sum = 0\n    while m > 0:\n        digit = m % 10\n        sum += digit\n        m //= 10\n    return sum"
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def myfunc(x: int):\n  a = 1\n  if x == 1:\n    return 2\n  elif x == 2:\n    return 3\n  else:\n    return 4\n  y = 5\n  z = 6\n  return y + z",
  "changed_function": "def myfunc(n: int):\n  a = 1\n  if n == 1:\n    return 2\n  elif n == 2:\n    return 3\n  else:\n    return 4\n  y = 5\n  z = 6\n  return y + z",
  "function_name": "myfunc",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def func1(n: int):\n  if n < 0:\n    return -1\n  elif n == 0:\n    return 0\n  else:\n    return 1\n  x = 10\n  return x + n",
  "changed_function": "def func1(n: int):\n  if n < 0:\n    return -1\n  elif n == 0:\n    return 0\n  else:\n    return 1\n  a = 10\n  return a + n",
  "function_name": "func1",
  "inputs": [
   "-1",
   "0",
   "1",
   "2",
   "3"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "x",
  "original_function": "def func2(b: str):\n  if b == \"hello\":\n    return \"world\"\n  elif b == \"world\":\n    return \"hello\"\n  else:\n    return \"unknown\"\n  x = 10\n  return x",
  "changed_function": "def func2(b: str):\n  if b == \"hello\":\n    return \"world\"\n  elif b == \"world\":\n    return \"hello\"\n  else:\n    return \"unknown\"\n  a = 10\n  return a",
  "function_name": "func2",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"unknown\"",
   "\"goodbye\"",
   "\"hi\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def func3(a: bool):\n  if a:\n    return True\n  else:\n    return False\n  n = 10\n  return n",
  "changed_function": "def func3(a: bool):\n  if a:\n    return True\n  else:\n    return False\n  m = 10\n  return m",
  "function_name": "func3",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "False"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def func4(n: int):\n  for i in range(n):\n    if i == n:\n      return True\n  k = 10\n  return k",
  "changed_function": "def func4(n: int):\n  for i in range(n):\n    if i == n:\n      return True\n  j = 10\n  return j",
  "function_name": "func4",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "x",
  "original_function": "def func5(y: list):\n  x = 0\n  for i in y:\n    x += i\n  return x",
  "changed_function": "def func5(y: list):\n  a = 0\n  for i in y:\n    a += i\n  return a",
  "function_name": "func5",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "t",
  "change_to": "x",
  "original_function": "def func6(t: tuple):\n  x = 0\n  for i in t:\n    x += i\n  return x",
  "changed_function": "def func6(t: tuple):\n  a = 0\n  for i in t:\n    a += i\n  return a",
  "function_name": "func6",
  "inputs": [
   "(1, 2, 3)",
   "(4, 5, 6)",
   "(7, 8, 9)",
   "(10, 11, 12)",
   "(13, 14, 15)"
  ]
 },
 {
  "target_argument": "k",
  "change_to": "z",
  "original_function": "def func7(k: int):\n  z = 0\n  while k > 0:\n    z += k\n    k -= 1\n  return z",
  "changed_function": "def func7(k: int):\n  a = 0\n  while k > 0:\n    a += k\n    k -= 1\n  return a",
  "function_name": "func7",
  "inputs": [
   "10",
   "5",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def func8(x: str):\n  if x == \"apple\":\n    return \"fruit\"\n  elif x == \"banana\":\n    return \"fruit\"\n  else:\n    return \"unknown\"\n  n = 10\n  return n",
  "changed_function": "def func8(x: str):\n  if x == \"apple\":\n    return \"fruit\"\n  elif x == \"banana\":\n    return \"fruit\"\n  else:\n    return \"unknown\"\n  m = 10\n  return m",
  "function_name": "func8",
  "inputs": [
   "\"apple\"",
   "\"banana\"",
   "\"orange\"",
   "\"grape\"",
   "\"watermelon\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "z",
  "original_function": "def func9(a: int):\n  if a < 0:\n    return \"negative\"\n  elif a == 0:\n    return \"zero\"\n  else:\n    return \"positive\"\n  z = 10\n  return z",
  "changed_function": "def func9(a: int):\n  if a < 0:\n    return \"negative\"\n  elif a == 0:\n    return \"zero\"\n  else:\n    return \"positive\"\n  b = 10\n  return b",
  "function_name": "func9",
  "inputs": [
   "-1",
   "0",
   "1",
   "2",
   "3"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "p",
  "original_function": "def func1(n: int):\n    k = 0\n    p = 0\n    while n > 0:\n        k += 1\n        p += k\n        n -= 1\n    return p",
  "changed_function": "def func1(p: int):\n    k = 0\n    q = 0\n    while p > 0:\n        k += 1\n        q += k\n        p -= 1\n    return q",
  "function_name": "func1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def func2(n: int):\n    sum = 0\n    m = 1\n    while m <= n:\n        sum += m\n        m += 1\n    return sum",
  "changed_function": "def func2(m: int):\n    sum = 0\n    k = 1\n    while k <= m:\n        sum += k\n        k += 1\n    return sum",
  "function_name": "func2",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "m",
  "original_function": "def func3(x: int):\n    m = x\n    while m > 1:\n        if m % 2 == 0:\n            m //= 2\n        else:\n            m = 3 * m + 1\n    return m",
  "changed_function": "def func3(m: int):\n    n = m\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    return n",
  "function_name": "func3",
  "inputs": [
   "10",
   "15",
   "20",
   "25",
   "30"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "s",
  "original_function": "def func4(n: int):\n    s = 0\n    for i in range(n):\n        s += i\n    return s",
  "changed_function": "def func4(s: int):\n    t = 0\n    for i in range(s):\n        t += i\n    return t",
  "function_name": "func4",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "t",
  "original_function": "def func5(a: bool):\n    if a == True:\n        t = 1\n    else:\n        t = 0\n    return t",
  "changed_function": "def func5(t: bool):\n    if t == True:\n        s = 1\n    else:\n        s = 0\n    return s",
  "function_name": "func5",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "t",
  "original_function": "def func6(n: str):\n    t = ''\n    for i in range(len(n)):\n        t += n[i]\n    return t",
  "changed_function": "def func6(t: str):\n    s = ''\n    for i in range(len(t)):\n        s += t[i]\n    return s",
  "function_name": "func6",
  "inputs": [
   "'abc'",
   "'def'",
   "'ghi'",
   "'jkl'",
   "'mno'"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def func7(a: int):\n    b = a\n    while b > 0:\n        print(b)\n        b -= 1\n    return b",
  "changed_function": "def func7(b: int):\n    c = b\n    while c > 0:\n        print(c)\n        c -= 1\n    return c",
  "function_name": "func7",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func8(x: int):\n    y = 0\n    for i in range(x):\n        if i % 2 == 0:\n            y += 1\n    return y",
  "changed_function": "def func8(y: int):\n    z = 0\n    for i in range(y):\n        if i % 2 == 0:\n            z += 1\n    return z",
  "function_name": "func8",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "y",
  "original_function": "def func9(a: list):\n    y = 0\n    for i in range(len(a)):\n        if a[i] > 0:\n            y += 1\n    return y",
  "changed_function": "def func9(y: list):\n    z = 0\n    for i in range(len(y)):\n        if y[i] > 0:\n            z += 1\n    return z",
  "function_name": "func9",
  "inputs": [
   "[1,2,3]",
   "[4,5,6]",
   "[7,8,9]",
   "[10,11,12]",
   "[13,14,15]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "b",
  "original_function": "def func10(n: tuple):\n    b = 0\n    for i in range(len(n)):\n        if n[i] == 0:\n            b += 1\n    return b",
  "changed_function": "def func10(b: tuple):\n    c = 0\n    for i in range(len(b)):\n        if b[i] == 0:\n            c += 1\n    return c",
  "function_name": "func10",
  "inputs": [
   "(1,2,0)",
   "(3,4,0)",
   "(5,6,0)",
   "(7,8,0)",
   "(9,10,0)"
  ]
 },
 {
  "target_argument": "num",
  "change_to": "n",
  "original_function": "def count_even_odd(num: int):\n    even_count = 0\n    odd_count = 0\n    for n in range(num):\n        if n % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count",
  "changed_function": "def count_even_odd(n: int):\n    even_count = 0\n    odd_count = 0\n    for num in range(n):\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count",
  "function_name": "count_even_odd",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "list1",
  "change_to": "s",
  "original_function": "def remove_duplicates(list1: list):\n    s = []\n    for item in list1:\n        if item not in s:\n            s.append(item)\n    return s",
  "changed_function": "def remove_duplicates(s: list):\n    t = []\n    for item in s:\n        if item not in t:\n            t.append(item)\n    return t",
  "function_name": "remove_duplicates",
  "inputs": [
   "[1, 2, 2, 3, 4, 4, 5]",
   "[1, 1, 1, 2, 2, 2]",
   "[1, 2, 3, 4, 5, 6, 7]",
   "[10, 20, 30, 10, 20, 30]",
   "[1, 2, 3, 1, 2, 3, 1]"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "n",
  "original_function": "def sum_of_squares(nums: list):\n    n = 0\n    for num in nums:\n        n += num * num\n    return n",
  "changed_function": "def sum_of_squares(n: list):\n    nums = 0\n    for num in n:\n        nums += num * num\n    return nums",
  "function_name": "sum_of_squares",
  "inputs": [
   "[1, 2, 3, 4]",
   "[5, 6, 7, 8, 9]",
   "[10, 20, 30, 40, 50]",
   "[1, 1, 1, 1, 1]",
   "[2, 4, 6, 8, 10]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def factorial(n: int):\n    x = 1\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 1\n    else:\n        for i in range(1, n + 1):\n            x *= i\n        return x",
  "changed_function": "def factorial(x: int):\n    n = 1\n    if x < 0:\n        return -1\n    elif x == 0:\n        return 1\n    else:\n        for i in range(1, x + 1):\n            n *= i\n        return n",
  "function_name": "factorial",
  "inputs": [
   "5",
   "10",
   "0",
   "1",
   "7"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "s",
  "original_function": "def count_words(text: str):\n    words = text.split()\n    return len(words)",
  "changed_function": "def count_words(s: str):\n    words = s.split()\n    return len(words)",
  "function_name": "count_words",
  "inputs": [
   "\"This is a test sentence.\"",
   "\"Hello, world!\"",
   "\"One two three four five\"",
   "\"The quick brown fox jumps over the lazy dog.\"",
   "\"1234567890\""
  ]
 },
 {
  "target_argument": "numbers",
  "change_to": "x",
  "original_function": "def find_largest(numbers: list):\n    if not numbers:\n        return None\n    x = numbers[0]\n    for number in numbers:\n        if number > x:\n            x = number\n    return x",
  "changed_function": "def find_largest(x: list):\n    if not x:\n        return None\n    numbers = x[0]\n    for number in x:\n        if number > numbers:\n            numbers = number\n    return numbers",
  "function_name": "find_largest",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 5, 20, 15, 25]",
   "[1, 1, 1, 1, 1]",
   "[100, 50, 75, 125, 200]",
   "[5, 10, 15, 20, 25]"
  ]
 },
 {
  "target_argument": "string",
  "change_to": "s",
  "original_function": "def reverse_string(string: str):\n    return string[::-1]",
  "changed_function": "def reverse_string(s: str):\n    return s[::-1]",
  "function_name": "reverse_string",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"1234567890\""
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "a",
  "original_function": "def is_palindrome(arr: list):\n    a = arr[::-1]\n    return a == arr",
  "changed_function": "def is_palindrome(a: list):\n    arr = a[::-1]\n    return arr == a",
  "function_name": "is_palindrome",
  "inputs": [
   "[1, 2, 3, 2, 1]",
   "[1, 2, 3, 4, 5]",
   "[1, 1, 1, 1, 1]",
   "[10, 20, 30, 20, 10]",
   "[5, 4, 3, 4, 5]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def find_max_min(a: list):\n    if len(a) == 0:\n        return None, None\n    max_value = a[0]\n    min_value = a[0]\n    for x in a[1:]:\n        if x > max_value:\n            max_value = x\n        if x < min_value:\n            min_value = x\n    return max_value, min_value",
  "changed_function": "def find_max_min(x: list):\n    if len(x) == 0:\n        return None, None\n    max_value = x[0]\n    min_value = x[0]\n    for a in x[1:]:\n        if a > max_value:\n            max_value = a\n        if a < min_value:\n            min_value = a\n    return max_value, min_value",
  "function_name": "find_max_min",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 5, 20, 15, 25]",
   "[1, 1, 1, 1, 1]",
   "[100, 50, 75, 125, 200]",
   "[5, 10, 15, 20, 25]"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "a",
  "original_function": "def div_even_odd(f: list):\n    first_even = next((el for el in f if el%2==0),-1)\n    first_odd = next((el for el in f if el%2!=0),-1)\n    if first_odd == -1:\n        return -1\n    return (first_even/first_odd)",
  "changed_function": "def div_even_odd(a: list):\n    first_even = next((el for el in a if el%2==0),-1)\n    first_odd = next((el for el in a if el%2!=0),-1)\n    if first_odd == -1:\n        return -1\n    return (first_even/first_odd)",
  "function_name": "div_even_odd",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[2, 4, 6]",
   "[1, 3, 5, 7, 9]",
   "[2, 2, 4, 4]",
   "[1, 3, 2, 4, 5]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "n",
  "original_function": "def count_consecutive_vowels(s: str):\n    count = 0\n    n = 0\n    for i in range(len(s)):\n        if s[i] in 'aeiouAEIOU':\n            n += 1\n        else:\n            count = max(count, n)\n            n = 0\n    count = max(count, n)\n    return count",
  "changed_function": "def count_consecutive_vowels(n: str):\n    count = 0\n    s = 0\n    for i in range(len(n)):\n        if n[i] in 'aeiouAEIOU':\n            s += 1\n        else:\n            count = max(count, s)\n            s = 0\n    count = max(count, s)\n    return count",
  "function_name": "count_consecutive_vowels",
  "inputs": [
   "\"hello world\"",
   "\"This is a test!\"",
   "\"aeiou\"",
   "\"1234567890\"",
   "\"AEIOUaeiou\""
  ]
 },
 {
  "target_argument": "f",
  "change_to": "i",
  "original_function": "def longest_increasing_subsequence(f: list):\n    n = len(f)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if f[i] > f[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)",
  "changed_function": "def longest_increasing_subsequence(i: list):\n    n = len(i)\n    dp = [1] * n\n    for f in range(1, n):\n        for j in range(f):\n            if i[f] > i[j] and dp[f] < dp[j] + 1:\n                dp[f] = dp[j] + 1\n    return max(dp)",
  "function_name": "longest_increasing_subsequence",
  "inputs": [
   "[1, 3, 2, 4, 5]",
   "[10, 9, 2, 5, 3, 7, 101, 18]",
   "[1, 2, 3, 4, 5, 6]",
   "[3, 2, 1, 4, 5, 6]",
   "[10, 1, 10, 2, 10]"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "i",
  "original_function": "def is_palindrome(p: str):\n    return p == p[::-1]",
  "changed_function": "def is_palindrome(i: str):\n    return i == i[::-1]",
  "function_name": "is_palindrome",
  "inputs": [
   "\"racecar\"",
   "\"madam\"",
   "\"level\"",
   "\"hello\"",
   "\"12321\""
  ]
 },
 {
  "target_argument": "f",
  "change_to": "k",
  "original_function": "def sum_of_squares(f: list):\n    return sum([i**2 for i in f])",
  "changed_function": "def sum_of_squares(k: list):\n    return sum([i**2 for i in k])",
  "function_name": "sum_of_squares",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 9, 2, 5, 3, 7, 101, 18]",
   "[1, 2, 3, 4, 5, 6]",
   "[3, 2, 1, 4, 5, 6]",
   "[10, 1, 10, 2, 10]"
  ]
 },
 {
  "target_argument": "k",
  "change_to": "s",
  "original_function": "def find_missing_number(k: list):\n    n = len(k) + 1\n    s = sum(range(1, n+1))\n    return s - sum(k)",
  "changed_function": "def find_missing_number(s: list):\n    n = len(s) + 1\n    k = sum(range(1, n+1))\n    return k - sum(s)",
  "function_name": "find_missing_number",
  "inputs": [
   "[1, 2, 4, 5]",
   "[1, 2, 3, 5]",
   "[1, 3, 4, 5, 6, 7]",
   "[2, 3, 4, 5, 6]",
   "[1, 2, 3, 5, 6]"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "s",
  "original_function": "def is_sorted(l: list):\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True",
  "changed_function": "def is_sorted(s: list):\n    for i in range(len(s) - 1):\n        if s[i] > s[i + 1]:\n            return False\n    return True",
  "function_name": "is_sorted",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 9, 2, 5, 3, 7, 101, 18]",
   "[1, 2, 3, 4, 5, 6]",
   "[3, 2, 1, 4, 5, 6]",
   "[10, 1, 10, 2, 10]"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "a",
  "original_function": "def count_vowels(m: str):\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for a in m:\n        if a in vowels:\n            count += 1\n    return count",
  "changed_function": "def count_vowels(a: str):\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for m in a:\n        if m in vowels:\n            count += 1\n    return count",
  "function_name": "count_vowels",
  "inputs": [
   "\"hello world\"",
   "\"This is a test!\"",
   "\"aeiou\"",
   "\"1234567890\"",
   "\"AEIOUaeiou\""
  ]
 },
 {
  "target_argument": "l",
  "change_to": "s",
  "original_function": "def find_second_largest(l: list):\n    if len(l) < 2:\n        return None\n    first_max = max(l)\n    second_max = float('-inf')\n    for s in l:\n        if s != first_max and s > second_max:\n            second_max = s\n    if second_max == float('-inf'):\n        return None\n    return second_max",
  "changed_function": "def find_second_largest(s: list):\n    if len(s) < 2:\n        return None\n    first_max = max(s)\n    second_max = float('-inf')\n    for l in s:\n        if l != first_max and l > second_max:\n            second_max = l\n    if second_max == float('-inf'):\n        return None\n    return second_max",
  "function_name": "find_second_largest",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 9, 2, 5, 3, 7, 101, 18]",
   "[1, 2, 3, 4, 5, 6]",
   "[3, 2, 1, 4, 5, 6]",
   "[10, 1, 10, 2, 10]"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "i",
  "original_function": "def find_first_non_repeating_char(l: str):\n    char_counts = {}\n    for i in l:\n        if i in char_counts:\n            char_counts[i] += 1\n        else:\n            char_counts[i] = 1\n    for i in l:\n        if char_counts[i] == 1:\n            return i\n    return None",
  "changed_function": "def find_first_non_repeating_char(i: str):\n    char_counts = {}\n    for l in i:\n        if l in char_counts:\n            char_counts[l] += 1\n        else:\n            char_counts[l] = 1\n    for l in i:\n        if char_counts[l] == 1:\n            return l\n    return None",
  "function_name": "find_first_non_repeating_char",
  "inputs": [
   "\"abcabcbb\"",
   "\"leetcode\"",
   "\"loveleetcode\"",
   "\"aabb\"",
   "\"hello world\""
  ]
 },
 {
  "target_argument": "f",
  "change_to": "k",
  "original_function": "def func1(f: int):\n  b = [1,2]\n  a = 0\n  if len(b) > 1:\n    a = 3 * f\n  k = a + 2\n  return [k, f + 1]",
  "changed_function": "def func1(k: int):\n  b = [1,2]\n  a = 0\n  if len(b) > 1:\n    a = 3 * k\n  c = a + 2\n  return [c, k + 1]",
  "function_name": "func1",
  "inputs": [
   "1",
   "5",
   "10",
   "2",
   "-2"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "f",
  "original_function": "def func2(n: int):\n  r = n + 1\n  f = []\n  for i in range(n):\n    f.append(i * 2)\n  return f, r",
  "changed_function": "def func2(f: int):\n  r = f + 1\n  n = []\n  for i in range(f):\n    n.append(i * 2)\n  return n, r",
  "function_name": "func2",
  "inputs": [
   "3",
   "7",
   "2",
   "5",
   "1"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "b",
  "original_function": "def func3(x: int):\n  a = 0\n  b = []\n  for i in range(x):\n    b.append(i)\n    a += i\n  return a, b",
  "changed_function": "def func3(b: int):\n  a = 0\n  c = []\n  for i in range(b):\n    c.append(i)\n    a += i\n  return a, c",
  "function_name": "func3",
  "inputs": [
   "8",
   "2",
   "1",
   "5",
   "3"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "b",
  "original_function": "def func4(p: bool):\n  if p:\n    return 1\n  else:\n    b = [1,2]\n    return b, 2",
  "changed_function": "def func4(b: bool):\n  if b:\n    return 1\n  else:\n    c = [1,2]\n    return c, 2",
  "function_name": "func4",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "t",
  "change_to": "k",
  "original_function": "def func5(t: str):\n  k = len(t)\n  return k * 2",
  "changed_function": "def func5(k: str):\n  t = len(k)\n  return t * 2",
  "function_name": "func5",
  "inputs": [
   "\"abc\"",
   "\"hello\"",
   "\"world\"",
   "\"test\"",
   "\"python\""
  ]
 },
 {
  "target_argument": "c",
  "change_to": "k",
  "original_function": "def func6(c: str):\n  k = []\n  for i in range(len(c)):\n    k.append(c[i].upper())\n  return k",
  "changed_function": "def func6(k: str):\n  c = []\n  for i in range(len(k)):\n    c.append(k[i].upper())\n  return c",
  "function_name": "func6",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"coding\"",
   "\"example\""
  ]
 },
 {
  "target_argument": "y",
  "change_to": "b",
  "original_function": "def func7(y: int):\n  b = 1\n  for i in range(y):\n    b *= i + 1\n  return b",
  "changed_function": "def func7(b: int):\n  c = 1\n  for i in range(b):\n    c *= i + 1\n  return c",
  "function_name": "func7",
  "inputs": [
   "4",
   "5",
   "3",
   "2",
   "1"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def func8(a: int):\n  x = 1\n  while a > 1:\n    x *= a\n    a -= 1\n  return x",
  "changed_function": "def func8(x: int):\n  a = 1\n  while x > 1:\n    a *= x\n    x -= 1\n  return a",
  "function_name": "func8",
  "inputs": [
   "5",
   "3",
   "7",
   "2",
   "4"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "f",
  "original_function": "def func9(a: list):\n  f = 0\n  for x in a:\n    if x > f:\n      f = x\n  return f",
  "changed_function": "def func9(f: list):\n  a = 0\n  for x in f:\n    if x > a:\n      a = x\n  return a",
  "function_name": "func9",
  "inputs": [
   "[1,2,3]",
   "[4,1,5]",
   "[2,8,1]",
   "[9,0,2]",
   "[3,5,7]"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "f",
  "original_function": "def func10(y: list):\n  f = 0\n  for i in y:\n    f += i * i\n  return f",
  "changed_function": "def func10(f: list):\n  y = 0\n  for i in f:\n    y += i * i\n  return y",
  "function_name": "func10",
  "inputs": [
   "[1,2,3]",
   "[4,1,5]",
   "[2,8,1]",
   "[9,0,2]",
   "[3,5,7]"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "x",
  "original_function": "def foo(f: int):\n  x = f + 1\n  if x > 5:\n    y = 2 * x\n  else:\n    y = 3 * x\n  return y * f",
  "changed_function": "def foo(x: int):\n  n = x + 1\n  if n > 5:\n    y = 2 * n\n  else:\n    y = 3 * n\n  return y * x",
  "function_name": "foo",
  "inputs": [
   "5",
   "10",
   "-2",
   "1",
   "0"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "y",
  "original_function": "def bar(n: int):\n  x = 1\n  while x < n:\n    x += 1\n  return x",
  "changed_function": "def bar(y: int):\n  x = 1\n  while x < y:\n    x += 1\n  return x",
  "function_name": "bar",
  "inputs": [
   "1",
   "10",
   "5",
   "20",
   "3"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "i",
  "original_function": "def baz(s: str):\n  i = 0\n  for char in s:\n    if char == 'a':\n      i += 1\n  return i",
  "changed_function": "def baz(i: str):\n  j = 0\n  for char in i:\n    if char == 'a':\n      j += 1\n  return j",
  "function_name": "baz",
  "inputs": [
   "\"apple\"",
   "\"banana\"",
   "\"orange\"",
   "\"grape\"",
   "\"watermelon\""
  ]
 },
 {
  "target_argument": "t",
  "change_to": "a",
  "original_function": "def qux(t: list):\n  a = len(t)\n  if a > 5:\n    return t[:a//2]\n  else:\n    return t",
  "changed_function": "def qux(a: list):\n  b = len(a)\n  if b > 5:\n    return a[:b//2]\n  else:\n    return a",
  "function_name": "qux",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[1, 2, 3, 4, 5, 6]",
   "[1, 2]",
   "[1, 2, 3, 4, 5, 6, 7, 8]",
   "[1, 2, 3]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "t",
  "original_function": "def quux(x: int):\n  t = 0\n  while x > 0:\n    t += x % 10\n    x //= 10\n  return t",
  "changed_function": "def quux(t: int):\n  s = 0\n  while t > 0:\n    s += t % 10\n    t //= 10\n  return s",
  "function_name": "quux",
  "inputs": [
   "1234",
   "5678",
   "9012",
   "3456",
   "7890"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "n",
  "original_function": "def foobar(b: bool):\n  if b:\n    n = 1\n    return n\n  else:\n    return 0",
  "changed_function": "def foobar(n: bool):\n  if n:\n    t = 1\n    return t\n  else:\n    return 0",
  "function_name": "foobar",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "False"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "x",
  "original_function": "def foobaz(l: list):\n  x = 0\n  for i in range(len(l)):\n    x += l[i]\n  return x",
  "changed_function": "def foobaz(x: list):\n  n = 0\n  for i in range(len(x)):\n    n += x[i]\n  return n",
  "function_name": "foobaz",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "d",
  "change_to": "b",
  "original_function": "def barfoo(d: str):\n  b = ''\n  for c in d:\n    if c.islower():\n      b += c.upper()\n    else:\n      b += c\n  return b",
  "changed_function": "def barfoo(b: str):\n  a = ''\n  for c in b:\n    if c.islower():\n      a += c.upper()\n    else:\n      a += c\n  return a",
  "function_name": "barfoo",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"javascript\"",
   "\"c++\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "s",
  "original_function": "def quxbaz(a: list):\n  s = 0\n  for i in range(len(a)):\n    s += a[i] * a[i]\n  return s",
  "changed_function": "def quxbaz(s: list):\n  t = 0\n  for i in range(len(s)):\n    t += s[i] * s[i]\n  return t",
  "function_name": "quxbaz",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "t",
  "change_to": "i",
  "original_function": "def quuxbaz(t: tuple):\n  i = 0\n  for x in t:\n    i += x\n  return i",
  "changed_function": "def quuxbaz(i: tuple):\n  j = 0\n  for x in i:\n    j += x\n  return j",
  "function_name": "quuxbaz",
  "inputs": [
   "(1, 2, 3)",
   "(4, 5, 6)",
   "(7, 8, 9)",
   "(10, 11, 12)",
   "(13, 14, 15)"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def sum_squares_odd(x: list[int]):\n  n = 0\n  for i in x:\n    if i % 2 != 0:\n      n += i * i\n  return n",
  "changed_function": "def sum_squares_odd(n: list[int]):\n  k = 0\n  for i in n:\n    if i % 2 != 0:\n      k += i * i\n  return k",
  "function_name": "sum_squares_odd",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[1, 3, 5, 7, 9]",
   "[2, 4, 6, 8, 10]",
   "[0, 1, 2, 3, 4]",
   "[10, 20, 30, 40, 50]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def count_vowels(a: str):\n  b = 0\n  for char in a:\n    if char.lower() in 'aeiou':\n      b += 1\n  return b",
  "changed_function": "def count_vowels(b: str):\n  c = 0\n  for char in b:\n    if char.lower() in 'aeiou':\n      c += 1\n  return c",
  "function_name": "count_vowels",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"language\""
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def find_max_substring_length(s: str):\n  t = 0\n  max_length = 0\n  for i in range(len(s)):\n    if s[i] == 'a':\n      t += 1\n    else:\n      t = 0\n    max_length = max(max_length, t)\n  return max_length",
  "changed_function": "def find_max_substring_length(t: str):\n  u = 0\n  max_length = 0\n  for i in range(len(t)):\n    if t[i] == 'a':\n      u += 1\n    else:\n      u = 0\n    max_length = max(max_length, u)\n  return max_length",
  "function_name": "find_max_substring_length",
  "inputs": [
   "\"ababa\"",
   "\"aaaa\"",
   "\"bcdef\"",
   "\"abcabc\"",
   "\"aaaaab\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "t",
  "original_function": "def is_sorted(x: list[int]):\n  t = True\n  for i in range(1, len(x)):\n    if x[i] < x[i - 1]:\n      t = False\n      break\n  return t",
  "changed_function": "def is_sorted(t: list[int]):\n  u = True\n  for i in range(1, len(t)):\n    if t[i] < t[i - 1]:\n      u = False\n      break\n  return u",
  "function_name": "is_sorted",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[1, 3, 2, 4, 5]",
   "[10, 9, 8, 7, 6]",
   "[1, 2, 3, 2, 4]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "x",
  "original_function": "def remove_duplicates(s: list[int]):\n  x = []\n  for i in s:\n    if i not in x:\n      x.append(i)\n  return x",
  "changed_function": "def remove_duplicates(x: list[int]):\n  y = []\n  for i in x:\n    if i not in y:\n      y.append(i)\n  return y",
  "function_name": "remove_duplicates",
  "inputs": [
   "[1, 2, 3, 2, 4, 1]",
   "[5, 4, 3, 2, 1, 2]",
   "[1, 1, 1, 1, 1]",
   "[10, 20, 10, 30, 20]",
   "[1, 2, 2, 3, 4, 4, 5]"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "list",
  "original_function": "def find_first_missing_positive(arr: list[int]):\n  list = set(arr)\n  for i in range(1, len(arr) + 2):\n    if i not in list:\n      return i\n  return len(arr) + 1",
  "changed_function": "def find_first_missing_positive(list: list[int]):\n  k = set(list)\n  for i in range(1, len(list) + 2):\n    if i not in k:\n      return i\n  return len(list) + 1",
  "function_name": "find_first_missing_positive",
  "inputs": [
   "[1, 2, 0]",
   "[3, 4, -1, 1]",
   "[7, 8, 9, 11, 12]",
   "[1, 2, 3, 4, 5, 6]",
   "[1, 1, 1, 1, 1, 1]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "str",
  "original_function": "def reverse_words(s: str):\n  str = s.split()\n  str.reverse()\n  return ' '.join(str)",
  "changed_function": "def reverse_words(str: str):\n  t = str.split()\n  t.reverse()\n  return ' '.join(t)",
  "function_name": "reverse_words",
  "inputs": [
   "\"hello world\"",
   "\"the quick brown fox\"",
   "\"this is a test\"",
   "\"reverse words\"",
   "\"example sentence\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def is_palindrome(a: str):\n  n = a.lower().replace(' ', '')\n  return n == n[::-1]",
  "changed_function": "def is_palindrome(n: str):\n  k = n.lower().replace(' ', '')\n  return k == k[::-1]",
  "function_name": "is_palindrome",
  "inputs": [
   "\"racecar\"",
   "\"level\"",
   "\"madam\"",
   "\"A man, a plan, a canal: Panama\"",
   "\"rotor\""
  ]
 },
 {
  "target_argument": "text",
  "change_to": "str",
  "original_function": "def count_words(text: str):\n  str = text.lower().split()\n  word_counts = {}\n  for word in str:\n    if word in word_counts:\n      word_counts[word] += 1\n    else:\n      word_counts[word] = 1\n  return word_counts",
  "changed_function": "def count_words(str: str):\n  t = str.lower().split()\n  word_counts = {}\n  for word in t:\n    if word in word_counts:\n      word_counts[word] += 1\n    else:\n      word_counts[word] = 1\n  return word_counts",
  "function_name": "count_words",
  "inputs": [
   "\"This is a test sentence.\"",
   "\"The quick brown fox jumps over the lazy dog.\"",
   "\"This is a sentence with repeated words.\"",
   "\"One two three four five.\"",
   "\"Hello world!\" "
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def count_occurrences(x: list):\n  n = 0\n  for i in x:\n    if i == 1:\n      n += 1\n  return n",
  "changed_function": "def count_occurrences(n: list):\n  t = 0\n  for i in n:\n    if i == 1:\n      t += 1\n  return t",
  "function_name": "count_occurrences",
  "inputs": [
   "[1, 2, 3, 1, 1]",
   "[1, 1, 1, 1, 1]",
   "[2, 2, 2, 2]",
   "[0, 1, 1, 0, 1, 0, 1, 1, 0]",
   "[1, 0, 0, 1]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "m",
  "original_function": "def find_longest_word(s: str):\n  m = 0\n  for word in s.split():\n    if len(word) > m:\n      m = len(word)\n  return m",
  "changed_function": "def find_longest_word(m: str):\n  n = 0\n  for word in m.split():\n    if len(word) > n:\n      n = len(word)\n  return n",
  "function_name": "find_longest_word",
  "inputs": [
   "\"this is a test string\"",
   "\"another example\"",
   "\"shortest word\"",
   "\"very long long long string\"",
   "\"hello world\""
  ]
 },
 {
  "target_argument": "numbers",
  "change_to": "a",
  "original_function": "def sum_even_numbers(numbers: list):\n  a = 0\n  for number in numbers:\n    if number % 2 == 0:\n      a += number\n  return a",
  "changed_function": "def sum_even_numbers(a: list):\n  b = 0\n  for number in a:\n    if number % 2 == 0:\n      b += number\n  return b",
  "function_name": "sum_even_numbers",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[2, 4, 6, 8]",
   "[1, 3, 5, 7]",
   "[0, 2, 4, 6]",
   "[10, 20, 30, 40]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def is_palindrome(x: str):\n  n = x[::-1]\n  return x == n",
  "changed_function": "def is_palindrome(n: str):\n  t = n[::-1]\n  return n == t",
  "function_name": "is_palindrome",
  "inputs": [
   "\"racecar\"",
   "\"level\"",
   "\"hello\"",
   "\"madam\"",
   "\"abccba\""
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "n",
  "original_function": "def find_min_max(nums: list):\n  n = nums[0]\n  for num in nums:\n    if num < n:\n      n = num\n  return n",
  "changed_function": "def find_min_max(n: list):\n  t = n[0]\n  for num in n:\n    if num < t:\n      t = num\n  return t",
  "function_name": "find_min_max",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 20, 30, 40, 50]",
   "[5, 4, 3, 2, 1]",
   "[1, 1, 1, 1, 1]",
   "[10, 5, 20, 15, 25]"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "t",
  "original_function": "def count_vowels(text: str):\n  t = 0\n  for char in text:\n    if char.lower() in 'aeiou':\n      t += 1\n  return t",
  "changed_function": "def count_vowels(t: str):\n  n = 0\n  for char in t:\n    if char.lower() in 'aeiou':\n      n += 1\n  return n",
  "function_name": "count_vowels",
  "inputs": [
   "\"This is a test\"",
   "\"Another Example\"",
   "\"How many vowels?\"",
   "\"Quick brown fox\"",
   "\"The quick brown fox\""
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "a",
  "original_function": "def find_duplicates(arr: list):\n  a = []\n  for num in arr:\n    if arr.count(num) > 1 and num not in a:\n      a.append(num)\n  return a",
  "changed_function": "def find_duplicates(a: list):\n  b = []\n  for num in a:\n    if a.count(num) > 1 and num not in b:\n      b.append(num)\n  return b",
  "function_name": "find_duplicates",
  "inputs": [
   "[1, 2, 3, 1, 4, 2, 5]",
   "[1, 1, 1, 2, 2, 2]",
   "[1, 2, 3, 4, 5]",
   "[0, 1, 0, 2, 0, 3]",
   "[1, 1, 2, 2, 3, 3]"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "s",
  "original_function": "def reverse_words(text: str):\n  s = text.split()\n  s.reverse()\n  return ' '.join(s)",
  "changed_function": "def reverse_words(s: str):\n  t = s.split()\n  t.reverse()\n  return ' '.join(t)",
  "function_name": "reverse_words",
  "inputs": [
   "\"This is a test\"",
   "\"Another Example\"",
   "\"How many vowels?\"",
   "\"Quick brown fox\"",
   "\"The quick brown fox\""
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "n",
  "original_function": "def find_second_largest(arr: list):\n  n = arr[0]\n  for num in arr:\n    if num > n:\n      n = num\n  for num in arr:\n    if num > n:\n      n = num\n  return n",
  "changed_function": "def find_second_largest(n: list):\n  t = n[0]\n  for num in n:\n    if num > t:\n      t = num\n  for num in n:\n    if num > t:\n      t = num\n  return t",
  "function_name": "find_second_largest",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 20, 30, 40, 50]",
   "[5, 4, 3, 2, 1]",
   "[1, 1, 1, 1, 1]",
   "[10, 5, 20, 15, 25]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "n",
  "original_function": "def check_palindrome(s: str):\n  n = len(s)\n  for i in range(n // 2):\n    if s[i] != s[n - i - 1]:\n      return False\n  return True",
  "changed_function": "def check_palindrome(n: str):\n  s = len(n)\n  for i in range(s // 2):\n    if n[i] != n[s - i - 1]:\n      return False\n  return True",
  "function_name": "check_palindrome",
  "inputs": [
   " \"racecar\"",
   " \"level\"",
   " \"rotor\"",
   " \"madam\"",
   " \"noon\""
  ]
 },
 {
  "target_argument": "l",
  "change_to": "x",
  "original_function": "def count_even_numbers(l: list):\n  x = 0\n  for i in l:\n    if i % 2 == 0:\n      x += 1\n  return x",
  "changed_function": "def count_even_numbers(x: list):\n  l = 0\n  for i in x:\n    if i % 2 == 0:\n      l += 1\n  return l",
  "function_name": "count_even_numbers",
  "inputs": [
   " [2, 4, 6, 8, 10]",
   " [1, 3, 5, 7, 9]",
   " [2, 3, 4, 5, 6]",
   " [1, 2, 3, 4, 5, 6]",
   " [0, 2, 4, 6, 8]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def sum_squares(n: int):\n  x = 0\n  for i in range(1, n + 1):\n    x += i * i\n  return x",
  "changed_function": "def sum_squares(x: int):\n  n = 0\n  for i in range(1, x + 1):\n    n += i * i\n  return n",
  "function_name": "sum_squares",
  "inputs": [
   " 5",
   " 10",
   " 2",
   " 7",
   " 3"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def is_prime(x: int):\n  if x <= 1:\n    return False\n  y = 2\n  while y * y <= x:\n    if x % y == 0:\n      return False\n    y += 1\n  return True",
  "changed_function": "def is_prime(y: int):\n  if y <= 1:\n    return False\n  x = 2\n  while x * x <= y:\n    if y % x == 0:\n      return False\n    x += 1\n  return True",
  "function_name": "is_prime",
  "inputs": [
   " 2",
   " 3",
   " 4",
   " 5",
   " 7"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "s",
  "original_function": "def fibonacci(n: int):\n  if n <= 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    s = fibonacci(n - 1) + fibonacci(n - 2)\n    return s",
  "changed_function": "def fibonacci(s: int):\n  if s <= 0:\n    return 0\n  elif s == 1:\n    return 1\n  else:\n    n = fibonacci(s - 1) + fibonacci(s - 2)\n    return n",
  "function_name": "fibonacci",
  "inputs": [
   " 5",
   " 10",
   " 2",
   " 7",
   " 3"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "t",
  "original_function": "def reverse_string(text: str):\n  t = ''\n  for i in range(len(text) - 1, -1, -1):\n    t += text[i]\n  return t",
  "changed_function": "def reverse_string(t: str):\n  text = ''\n  for i in range(len(t) - 1, -1, -1):\n    text += t[i]\n  return text",
  "function_name": "reverse_string",
  "inputs": [
   " \"hello\"",
   " \"world\"",
   " \"python\"",
   " \"javascript\"",
   " \"programming\""
  ]
 },
 {
  "target_argument": "l",
  "change_to": "t",
  "original_function": "def find_max(l: list):\n  t = l[0]\n  for i in l:\n    if i > t:\n      t = i\n  return t",
  "changed_function": "def find_max(t: list):\n  l = t[0]\n  for i in t:\n    if i > l:\n      l = i\n  return l",
  "function_name": "find_max",
  "inputs": [
   " [1, 2, 3, 4, 5]",
   " [10, 5, 8, 2, 1]",
   " [1, 5, 2, 8, 4]",
   " [9, 2, 1, 4, 8]",
   " [2, 1, 9, 3, 5]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "n",
  "original_function": "def remove_duplicates(s: list):\n  n = []\n  for i in s:\n    if i not in n:\n      n.append(i)\n  return n",
  "changed_function": "def remove_duplicates(n: list):\n  s = []\n  for i in n:\n    if i not in s:\n      s.append(i)\n  return s",
  "function_name": "remove_duplicates",
  "inputs": [
   " [1, 2, 3, 2, 1, 4, 5, 4]",
   " [1, 1, 2, 2, 3, 3]",
   " [1, 2, 2, 3, 4, 4, 5, 5]",
   " [1, 2, 3, 4, 5, 6, 7, 8, 9]",
   " [1, 1, 1, 1, 1]"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "n",
  "original_function": "def func1(b: bool):\n  n = 5\n  if b:\n    return n\n  else:\n    return 10",
  "changed_function": "def func1(n: bool):\n  m = 5\n  if n:\n    return m\n  else:\n    return 10",
  "function_name": "func1",
  "inputs": [
   "True",
   "False",
   "10 > 5",
   "10 < 5",
   "10 == 10"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def func2(n: int):\n  x = 1\n  while x <= n:\n    x = x + 1\n  return x",
  "changed_function": "def func2(x: int):\n  y = 1\n  while y <= x:\n    y = y + 1\n  return y",
  "function_name": "func2",
  "inputs": [
   "10",
   "5",
   "2",
   "1",
   "0"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func3(x: int):\n  y = 1\n  if x % 2 == 0:\n    return y\n  else:\n    return x * y",
  "changed_function": "def func3(y: int):\n  z = 1\n  if y % 2 == 0:\n    return z\n  else:\n    return y * z",
  "function_name": "func3",
  "inputs": [
   "10",
   "5",
   "2",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def func4(a: str):\n  b = ''\n  for i in a:\n    if i.isdigit():\n      b = b + i\n  return b",
  "changed_function": "def func4(b: str):\n  c = ''\n  for i in b:\n    if i.isdigit():\n      c = c + i\n  return c",
  "function_name": "func4",
  "inputs": [
   "'abc123def'",
   "'12345'",
   "'hello world'",
   "'1a2b3c'",
   "' ' "
  ]
 },
 {
  "target_argument": "l",
  "change_to": "x",
  "original_function": "def func5(l: list):\n  x = 0\n  for i in l:\n    x = x + i\n  return x",
  "changed_function": "def func5(x: list):\n  y = 0\n  for i in x:\n    y = y + i\n  return y",
  "function_name": "func5",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[]",
   "[1, 2, 3, 4]"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "a",
  "original_function": "def func6(p: int):\n  a = 0\n  while p > 0:\n    a = a + 1\n    p = p - 1\n  return a",
  "changed_function": "def func6(a: int):\n  b = 0\n  while a > 0:\n    b = b + 1\n    a = a - 1\n  return b",
  "function_name": "func6",
  "inputs": [
   "10",
   "5",
   "2",
   "1",
   "0"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "a",
  "original_function": "def func7(y: str):\n  a = 0\n  for i in y:\n    if i == ' ': \n      a = a + 1\n  return a",
  "changed_function": "def func7(a: str):\n  b = 0\n  for i in a:\n    if i == ' ': \n      b = b + 1\n  return b",
  "function_name": "func7",
  "inputs": [
   "'hello world'",
   "'this is a sentence'",
   "' '",
   "'  '",
   "'hello'"
  ]
 },
 {
  "target_argument": "k",
  "change_to": "y",
  "original_function": "def func8(k: int):\n  y = 1\n  for i in range(k):\n    y = y * i\n  return y",
  "changed_function": "def func8(y: int):\n  z = 1\n  for i in range(y):\n    z = z * i\n  return z",
  "function_name": "func8",
  "inputs": [
   "5",
   "10",
   "2",
   "1",
   "0"
  ]
 },
 {
  "target_argument": "t",
  "change_to": "x",
  "original_function": "def func9(t: int):\n  x = 0\n  for i in range(t):\n    x = x + i\n  return x",
  "changed_function": "def func9(x: int):\n  y = 0\n  for i in range(x):\n    y = y + i\n  return y",
  "function_name": "func9",
  "inputs": [
   "5",
   "10",
   "2",
   "1",
   "0"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def func10(s: str):\n  a = 0\n  for i in s:\n    if i.isupper():\n      a = a + 1\n  return a",
  "changed_function": "def func10(a: str):\n  b = 0\n  for i in a:\n    if i.isupper():\n      b = b + 1\n  return b",
  "function_name": "func10",
  "inputs": [
   "'Hello World'",
   "'Python is fun'",
   "'  '",
   "'ABC'",
   "'123'"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def fun1(x: int):\n  n = 1\n  while x > 1:\n    n = n * x\n    x = x - 1\n  return n",
  "changed_function": "def fun1(n: int):\n  y = 1\n  while n > 1:\n    y = y * n\n    n = n - 1\n  return y",
  "function_name": "fun1",
  "inputs": [
   "5",
   "10",
   "1",
   "2",
   "3"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def fun2(n: int):\n  x = [1, 2, 3]\n  for i in range(n):\n    x.append(i)\n  return x",
  "changed_function": "def fun2(x: int):\n  n = [1, 2, 3]\n  for i in range(x):\n    n.append(i)\n  return n",
  "function_name": "fun2",
  "inputs": [
   "3",
   "5",
   "1",
   "7",
   "10"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "x",
  "original_function": "def fun3(y: bool):\n  x = 0\n  if y:\n    x = 1\n  else:\n    x = 2\n  return x",
  "changed_function": "def fun3(x: bool):\n  y = 0\n  if x:\n    y = 1\n  else:\n    y = 2\n  return y",
  "function_name": "fun3",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "False"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "i",
  "original_function": "def fun4(s: str):\n  i = 0\n  for c in s:\n    i += ord(c)\n  return i",
  "changed_function": "def fun4(i: str):\n  s = 0\n  for c in i:\n    s += ord(c)\n  return s",
  "function_name": "fun4",
  "inputs": [
   "\"abc\"",
   "\"hello\"",
   "\"world\"",
   "\"123\"",
   "\"python\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def fun5(n: int):\n  m = 0\n  while n > 0:\n    m = m + n % 10\n    n = n // 10\n  return m",
  "changed_function": "def fun5(m: int):\n  n = 0\n  while m > 0:\n    n = n + m % 10\n    m = m // 10\n  return n",
  "function_name": "fun5",
  "inputs": [
   "123",
   "456",
   "789",
   "100",
   "500"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def fun6(a: int):\n  x = 0\n  for i in range(a):\n    x += i\n  return x",
  "changed_function": "def fun6(x: int):\n  a = 0\n  for i in range(x):\n    a += i\n  return a",
  "function_name": "fun6",
  "inputs": [
   "5",
   "10",
   "1",
   "20",
   "30"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def fun7(a: list):\n  x = 0\n  for i in a:\n    x += i\n  return x",
  "changed_function": "def fun7(x: list):\n  a = 0\n  for i in x:\n    a += i\n  return a",
  "function_name": "fun7",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "i",
  "original_function": "def fun8(a: int):\n  i = 0\n  while i < a:\n    print(i)\n    i = i + 1",
  "changed_function": "def fun8(i: int):\n  a = 0\n  while a < i:\n    print(a)\n    a = a + 1",
  "function_name": "fun8",
  "inputs": [
   "5",
   "10",
   "1",
   "2",
   "3"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def fun9(a: tuple):\n  x = 0\n  for i in a:\n    x = x + i\n  return x",
  "changed_function": "def fun9(x: tuple):\n  a = 0\n  for i in x:\n    a = a + i\n  return a",
  "function_name": "fun9",
  "inputs": [
   "(1, 2, 3)",
   "(4, 5, 6)",
   "(7, 8, 9)",
   "(10, 11, 12)",
   "(13, 14, 15)"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def fun10(a: int):\n  n = 0\n  while a > 0:\n    n = n * a % 10\n    a = a // 10\n  return n",
  "changed_function": "def fun10(n: int):\n  a = 0\n  while n > 0:\n    a = a * n % 10\n    n = n // 10\n  return a",
  "function_name": "fun10",
  "inputs": [
   "1234",
   "5678",
   "9012",
   "3456",
   "7890"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "count",
  "original_function": "def count_ones_in_binary(n: int):\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count",
  "changed_function": "def count_ones_in_binary(count: int):\n    temp = 0\n    while count > 0:\n        if count % 2 == 1:\n            temp += 1\n        count //= 2\n    return temp",
  "function_name": "count_ones_in_binary",
  "inputs": [
   "10",
   "5",
   "12",
   "1",
   "21"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "nums",
  "original_function": "def remove_duplicates_from_sorted_array(arr: list):\n    n = len(arr)\n    if n == 0:\n        return 0\n    i = 0\n    for j in range(1, n):\n        if arr[j] != arr[i]:\n            i += 1\n            arr[i] = arr[j]\n    return i + 1",
  "changed_function": "def remove_duplicates_from_sorted_array(nums: list):\n    n = len(nums)\n    if n == 0:\n        return 0\n    i = 0\n    for j in range(1, n):\n        if nums[j] != nums[i]:\n            i += 1\n            nums[i] = nums[j]\n    return i + 1",
  "function_name": "remove_duplicates_from_sorted_array",
  "inputs": [
   "[1,1,2]",
   "[0,0,1,1,1,2,2,3,3,4]",
   "[1,2,3,4]",
   "[1,1,1,1]",
   "[2,2,3,4]"
  ]
 },
 {
  "target_argument": "num",
  "change_to": "k",
  "original_function": "def is_power_of_two(num: int):\n    if num <= 0:\n        return False\n    while num % 2 == 0:\n        num //= 2\n    return num == 1",
  "changed_function": "def is_power_of_two(k: int):\n    if k <= 0:\n        return False\n    while k % 2 == 0:\n        k //= 2\n    return k == 1",
  "function_name": "is_power_of_two",
  "inputs": [
   "1",
   "16",
   "3",
   "8",
   "10"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def count_set_bits(n: int):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
  "changed_function": "def count_set_bits(k: int):\n    count = 0\n    while k > 0:\n        count += k & 1\n        k >>= 1\n    return count",
  "function_name": "count_set_bits",
  "inputs": [
   "10",
   "5",
   "12",
   "1",
   "21"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "arr",
  "original_function": "def find_missing_number(nums: list):\n    n = len(nums)\n    total_sum = (n * (n + 1)) // 2\n    for num in nums:\n        total_sum -= num\n    return total_sum",
  "changed_function": "def find_missing_number(arr: list):\n    n = len(arr)\n    total_sum = (n * (n + 1)) // 2\n    for num in arr:\n        total_sum -= num\n    return total_sum",
  "function_name": "find_missing_number",
  "inputs": [
   "[1,2,0]",
   "[3,0,1]",
   "[9,6,4,2,3,5,7,0,1]",
   "[0,1,2,4]",
   "[0,2,3,4,5]"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "arr",
  "original_function": "def find_max_consecutive_ones(nums: list):\n    max_count = 0\n    current_count = 0\n    for num in nums:\n        if num == 1:\n            current_count += 1\n        else:\n            max_count = max(max_count, current_count)\n            current_count = 0\n    return max(max_count, current_count)",
  "changed_function": "def find_max_consecutive_ones(arr: list):\n    max_count = 0\n    current_count = 0\n    for num in arr:\n        if num == 1:\n            current_count += 1\n        else:\n            max_count = max(max_count, current_count)\n            current_count = 0\n    return max(max_count, current_count)",
  "function_name": "find_max_consecutive_ones",
  "inputs": [
   "[1,1,0,1,1,1]",
   "[1,0,1,1,0,1]",
   "[0,0,1,1,1,1]",
   "[1,0,0,1,1]",
   "[0,0,0,1,1]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def is_prime(n: int):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
  "changed_function": "def is_prime(x: int):\n    if x <= 1:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True",
  "function_name": "is_prime",
  "inputs": [
   "2",
   "3",
   "4",
   "7",
   "11"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "s",
  "original_function": "def count_words_in_text(text: str):\n    words = text.split()\n    return len(words)",
  "changed_function": "def count_words_in_text(s: str):\n    words = s.split()\n    return len(words)",
  "function_name": "count_words_in_text",
  "inputs": [
   "\"Hello world\"",
   "\"This is a test string\"",
   "\"One two three\"",
   "\"Python programming\"",
   "\"Data structures and algorithms\""
  ]
 },
 {
  "target_argument": "b",
  "change_to": "a",
  "original_function": "def fun2(b: bool):\n  a = ''\n  if b:\n    a = 'yes'\n  else:\n    a = 'no'\n  return a",
  "changed_function": "def fun2(a: bool):\n  b = ''\n  if a:\n    b = 'yes'\n  else:\n    b = 'no'\n  return b",
  "function_name": "fun2",
  "inputs": [
   "True",
   "False",
   "1",
   "0",
   "None"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "s",
  "original_function": "def fun3(x: str):\n  s = ''\n  for i in x:\n    if i.isupper():\n      s = s + i.lower()\n    else:\n      s = s + i.upper()\n  return s",
  "changed_function": "def fun3(s: str):\n  x = ''\n  for i in s:\n    if i.isupper():\n      x = x + i.lower()\n    else:\n      x = x + i.upper()\n  return x",
  "function_name": "fun3",
  "inputs": [
   "'hello'",
   "'World'",
   "'Python'",
   "'123'",
   "'ABC'"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "x",
  "original_function": "def fun4(s: str):\n  x = ''\n  for i in range(len(s) - 1, -1, -1):\n    x = x + s[i]\n  return x",
  "changed_function": "def fun4(x: str):\n  s = ''\n  for i in range(len(x) - 1, -1, -1):\n    s = s + x[i]\n  return s",
  "function_name": "fun4",
  "inputs": [
   "'abc'",
   "'123'",
   "'hello'",
   "'world'",
   "'python'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def fun5(n: int):\n  x = 0\n  for i in range(n):\n    x = x + i\n  return x",
  "changed_function": "def fun5(x: int):\n  n = 0\n  for i in range(x):\n    n = n + i\n  return n",
  "function_name": "fun5",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "t",
  "change_to": "x",
  "original_function": "def fun6(t: tuple):\n  x = 0\n  for i in t:\n    x = x + i\n  return x",
  "changed_function": "def fun6(x: tuple):\n  t = 0\n  for i in x:\n    t = t + i\n  return t",
  "function_name": "fun6",
  "inputs": [
   "(1, 2, 3)",
   "(4, 5, 6)",
   "(7, 8, 9)",
   "(10, 11, 12)",
   "(1, 2, 'a')"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def fun7(a: list):\n  n = []\n  for i in a:\n    if i % 2 == 0:\n      n.append(i)\n  return n",
  "changed_function": "def fun7(n: list):\n  a = []\n  for i in n:\n    if i % 2 == 0:\n      a.append(i)\n  return a",
  "function_name": "fun7",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[6, 7, 8, 9, 10]",
   "[11, 12, 13, 14, 15]",
   "[2, 4, 6, 8, 10]",
   "[1, 3, 5, 7, 9]"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "n",
  "original_function": "def fun8(m: list):\n  n = 0\n  for i in m:\n    if i > n:\n      n = i\n  return n",
  "changed_function": "def fun8(n: list):\n  m = 0\n  for i in n:\n    if i > m:\n      m = i\n  return m",
  "function_name": "fun8",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[1, 3, 5, 7, 9]",
   "[2, 4, 6, 8, 10]",
   "[10, 9, 8, 7, 6]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "x",
  "original_function": "def fun9(s: str):\n  x = 0\n  for i in s:\n    if i.isdigit():\n      x = x + int(i)\n  return x",
  "changed_function": "def fun9(x: str):\n  s = 0\n  for i in x:\n    if i.isdigit():\n      s = s + int(i)\n  return s",
  "function_name": "fun9",
  "inputs": [
   "'123'",
   "'abc123'",
   "'1a2b3c'",
   "'hello123'",
   "'world123'"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "a",
  "original_function": "def fun10(b: str):\n  a = ''\n  for i in range(len(b)):\n    if i % 2 == 0:\n      a = a + b[i].upper()\n    else:\n      a = a + b[i]\n  return a",
  "changed_function": "def fun10(a: str):\n  b = ''\n  for i in range(len(a)):\n    if i % 2 == 0:\n      b = b + a[i].upper()\n    else:\n      b = b + a[i]\n  return b",
  "function_name": "fun10",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'javascript'",
   "'programming'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def check_rectangle(n: int):\n  if n <= 0:\n    return False\n  if n == 1:\n    return True\n  else:\n    return (lambda x: x > 1)(n - 1)",
  "changed_function": "def check_rectangle(x: int):\n  if x <= 0:\n    return False\n  if x == 1:\n    return True\n  else:\n    return (lambda n: n > 1)(x - 1)",
  "function_name": "check_rectangle",
  "inputs": [
   "5",
   "1",
   "-2",
   "10",
   "0"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "b",
  "original_function": "def is_prime(z: int):\n  if z <= 1:\n    return False\n  for n in range(2, int(z ** 0.5) + 1):\n    if z % n == 0:\n      return False\n  return True",
  "changed_function": "def is_prime(b: int):\n  if b <= 1:\n    return False\n  for n in range(2, int(b ** 0.5) + 1):\n    if b % n == 0:\n      return False\n  return True",
  "function_name": "is_prime",
  "inputs": [
   "10",
   "2",
   "11",
   "7",
   "3"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "x",
  "original_function": "def sum_squares(b: int):\n  result = 0\n  for i in range(1, b + 1):\n    result += i * i\n  return result",
  "changed_function": "def sum_squares(x: int):\n  result = 0\n  for i in range(1, x + 1):\n    result += i * i\n  return result",
  "function_name": "sum_squares",
  "inputs": [
   "5",
   "1",
   "10",
   "7",
   "3"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "a",
  "original_function": "def is_sorted(y: list):\n  for i in range(len(y) - 1):\n    if y[i] > y[i + 1]:\n      return False\n  return True",
  "changed_function": "def is_sorted(a: list):\n  for i in range(len(a) - 1):\n    if a[i] > a[i + 1]:\n      return False\n  return True",
  "function_name": "is_sorted",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[1, 3, 2, 4, 5]",
   "[1, 1, 1, 1, 1]",
   "[5, 5, 4, 4, 3]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def factorial(x: int):\n  if x == 0:\n    return 1\n  else:\n    return x * factorial(x - 1)",
  "changed_function": "def factorial(z: int):\n  if z == 0:\n    return 1\n  else:\n    return z * factorial(z - 1)",
  "function_name": "factorial",
  "inputs": [
   "5",
   "0",
   "3",
   "7",
   "10"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "m",
  "original_function": "def sum_even_numbers(x: int):\n  sum = 0\n  for i in range(1, x + 1):\n    if i % 2 == 0:\n      sum += i\n  return sum",
  "changed_function": "def sum_even_numbers(m: int):\n  sum = 0\n  for i in range(1, m + 1):\n    if i % 2 == 0:\n      sum += i\n  return sum",
  "function_name": "sum_even_numbers",
  "inputs": [
   "10",
   "5",
   "2",
   "7",
   "1"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def sum_squares(n: int):\n  x = n*n\n  return x",
  "changed_function": "def sum_squares(x: int):\n  n = x*x\n  return n",
  "function_name": "sum_squares",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def double_if_even(n: int):\n  if n % 2 == 0:\n    n = n * 2\n  return n",
  "changed_function": "def double_if_even(x: int):\n  if x % 2 == 0:\n    n = x * 2\n  return n",
  "function_name": "double_if_even",
  "inputs": [
   "2",
   "3",
   "4",
   "5",
   "6"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def greet_with_name(n: str):\n  x = \"Hello, \" + n + \"!\"\n  return x",
  "changed_function": "def greet_with_name(x: str):\n  n = \"Hello, \" + x + \"!\"\n  return n",
  "function_name": "greet_with_name",
  "inputs": [
   "\"John\"",
   "\"Mary\"",
   "\"Peter\"",
   "\"Alice\"",
   "\"Bob\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def check_palindrome(n: str):\n  x = n[::-1]\n  if x == n:\n    return True\n  else:\n    return False",
  "changed_function": "def check_palindrome(x: str):\n  n = x[::-1]\n  if n == x:\n    return True\n  else:\n    return False",
  "function_name": "check_palindrome",
  "inputs": [
   "\"racecar\"",
   "\"level\"",
   "\"madam\"",
   "\"hello\"",
   "\"world\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def find_max_in_list(n: list):\n  x = n[0]\n  for i in n:\n    if i > x:\n      x = i\n  return x",
  "changed_function": "def find_max_in_list(x: list):\n  n = x[0]\n  for i in x:\n    if i > n:\n      n = i\n  return n",
  "function_name": "find_max_in_list",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[1, 3, 2, 4, 5]",
   "[5, 2, 4, 1, 3]",
   "[3, 1, 4, 2, 5]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def count_occurrences(n: str, x: str):\n  count = 0\n  for i in range(len(n)):\n    if n[i] == x:\n      count += 1\n  return count",
  "changed_function": "def count_occurrences(x: str, n: str):\n  count = 0\n  for i in range(len(x)):\n    if x[i] == n:\n      count += 1\n  return count",
  "function_name": "count_occurrences",
  "inputs": [
   "\"hello world\", \"o\"",
   "\"hello world\", \"l\"",
   "\"hello world\", \"w\"",
   "\"hello world\", \"h\"",
   "\"hello world\", \"d\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def sum_of_even_numbers(n: list):\n  x = 0\n  for i in n:\n    if i % 2 == 0:\n      x += i\n  return x",
  "changed_function": "def sum_of_even_numbers(x: list):\n  n = 0\n  for i in x:\n    if i % 2 == 0:\n      n += i\n  return n",
  "function_name": "sum_of_even_numbers",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[2, 4, 6, 8, 10]",
   "[1, 3, 5, 7, 9]",
   "[2, 3, 4, 5, 6]",
   "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def find_second_largest(n: list):\n  x = sorted(n)\n  return x[-2]",
  "changed_function": "def find_second_largest(x: list):\n  n = sorted(x)\n  return n[-2]",
  "function_name": "find_second_largest",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[1, 3, 2, 4, 5]",
   "[5, 2, 4, 1, 3]",
   "[3, 1, 4, 2, 5]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def check_anagram(n: str, x: str):\n  if sorted(n) == sorted(x):\n    return True\n  else:\n    return False",
  "changed_function": "def check_anagram(x: str, n: str):\n  if sorted(x) == sorted(n):\n    return True\n  else:\n    return False",
  "function_name": "check_anagram",
  "inputs": [
   "\"listen\", \"silent\"",
   "\"hello\", \"world\"",
   "\"racecar\", \"carrace\"",
   "\"apple\", \"papel\"",
   "\"python\", \"typhon\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def reverse_list(n: list):\n  x = n[::-1]\n  return x",
  "changed_function": "def reverse_list(x: list):\n  n = x[::-1]\n  return n",
  "function_name": "reverse_list",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[1, 3, 2, 4, 5]",
   "[5, 2, 4, 1, 3]",
   "[3, 1, 4, 2, 5]"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "n",
  "original_function": "def foo(f: str):\n  n = 1\n  if f == 'a':\n    return n\n  elif f == 'b':\n    return 2 * n\n  else:\n    return 3 * n",
  "changed_function": "def foo(n: str):\n  n1 = 1\n  if n == 'a':\n    return n1\n  elif n == 'b':\n    return 2 * n1\n  else:\n    return 3 * n1",
  "function_name": "foo",
  "inputs": [
   " 'a'",
   " 'b'",
   " 'c'",
   " 'd'",
   " 'e'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "f",
  "original_function": "def bar(n: int):\n  f = []\n  for i in range(n):\n    f.append(i)\n  return f",
  "changed_function": "def bar(f: int):\n  n = []\n  for i in range(f):\n    n.append(i)\n  return n",
  "function_name": "bar",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def baz(a: list):\n  x = 0\n  for i in a:\n    x += i\n  return x",
  "changed_function": "def baz(x: list):\n  a = 0\n  for i in x:\n    a += i\n  return a",
  "function_name": "baz",
  "inputs": [
   " [1,2,3]",
   " [4,5,6]",
   " [7,8,9]",
   " [10,11,12]",
   " [13,14,15]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def qux(x: bool):\n  y = 10\n  if x:\n    return y + 1\n  else:\n    return y - 1",
  "changed_function": "def qux(y: bool):\n  x = 10\n  if y:\n    return x + 1\n  else:\n    return x - 1",
  "function_name": "qux",
  "inputs": [
   " True",
   " False",
   " True",
   " False",
   " True"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "b",
  "original_function": "def quux(y: int):\n  b = 0\n  while y > 0:\n    b += y\n    y -= 1\n  return b",
  "changed_function": "def quux(b: int):\n  y = 0\n  while b > 0:\n    y += b\n    b -= 1\n  return y",
  "function_name": "quux",
  "inputs": [
   " 5",
   " 10",
   " 15",
   " 20",
   " 25"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "x",
  "original_function": "def foobar(z: tuple):\n  x = 0\n  for i in z:\n    x += i\n  return x",
  "changed_function": "def foobar(x: tuple):\n  z = 0\n  for i in x:\n    z += i\n  return z",
  "function_name": "foobar",
  "inputs": [
   " (1,2,3)",
   " (4,5,6)",
   " (7,8,9)",
   " (10,11,12)",
   " (13,14,15)"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def foobaz(a: int):\n  n = 0\n  if a % 2 == 0:\n    n += 1\n  if a % 3 == 0:\n    n += 2\n  return n",
  "changed_function": "def foobaz(n: int):\n  a = 0\n  if n % 2 == 0:\n    a += 1\n  if n % 3 == 0:\n    a += 2\n  return a",
  "function_name": "foobaz",
  "inputs": [
   " 6",
   " 12",
   " 18",
   " 24",
   " 30"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def quxbar(x: str):\n  a = 0\n  for i in x:\n    a += ord(i)\n  return a",
  "changed_function": "def quxbar(a: str):\n  x = 0\n  for i in a:\n    x += ord(i)\n  return x",
  "function_name": "quxbar",
  "inputs": [
   " 'hello'",
   " 'world'",
   " 'python'",
   " 'coding'",
   " 'alpha'"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def quxbaz(s: str):\n  t = ''\n  for i in s:\n    t += chr(ord(i) + 1)\n  return t",
  "changed_function": "def quxbaz(t: str):\n  s = ''\n  for i in t:\n    s += chr(ord(i) + 1)\n  return s",
  "function_name": "quxbaz",
  "inputs": [
   " 'abc'",
   " 'def'",
   " 'ghi'",
   " 'jkl'",
   " 'mno'"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "n",
  "original_function": "def fooqux(y: list):\n  n = []\n  for i in y:\n    if i % 2 == 0:\n      n.append(i)\n  return n",
  "changed_function": "def fooqux(n: list):\n  y = []\n  for i in n:\n    if i % 2 == 0:\n      y.append(i)\n  return y",
  "function_name": "fooqux",
  "inputs": [
   " [1,2,3,4,5]",
   " [6,7,8,9,10]",
   " [11,12,13,14,15]",
   " [16,17,18,19,20]",
   " [21,22,23,24,25]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def f(n: int):\n  res = 0\n  for i in range(n):\n    res += i\n  return res",
  "changed_function": "def f(i: int):\n  res = 0\n  for j in range(i):\n    res += j\n  return res",
  "function_name": "f",
  "inputs": [
   "5",
   "10",
   "1",
   "20",
   "15"
  ]
 },
 {
  "target_argument": "list1",
  "change_to": "j",
  "original_function": "def g(list1: list):\n  for i in range(len(list1)):\n    j = list1[i]\n    if j > 10:\n      list1[i] = 0\n    else:\n      list1[i] = 1\n  return list1",
  "changed_function": "def g(j: list):\n  for i in range(len(j)):\n    k = j[i]\n    if k > 10:\n      j[i] = 0\n    else:\n      j[i] = 1\n  return j",
  "function_name": "g",
  "inputs": [
   "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
   "[10, 20, 30]",
   "[1, 2, 10, 5]",
   "[11, 12, 13, 14]",
   "[1, 3, 5, 7, 9]"
  ]
 },
 {
  "target_argument": "num",
  "change_to": "i",
  "original_function": "def h(num: int):\n  total = 0\n  for i in range(num):\n    if i % 2 == 0:\n      total += i\n  return total",
  "changed_function": "def h(i: int):\n  total = 0\n  for j in range(i):\n    if j % 2 == 0:\n      total += j\n  return total",
  "function_name": "h",
  "inputs": [
   "10",
   "20",
   "5",
   "1",
   "30"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "i",
  "original_function": "def i(s: str):\n  count = 0\n  for i in s:\n    if i.isupper():\n      count += 1\n  return count",
  "changed_function": "def i(i: str):\n  count = 0\n  for j in i:\n    if j.isupper():\n      count += 1\n  return count",
  "function_name": "i",
  "inputs": [
   "\"Hello World\"",
   "\"This is a Test\"",
   "\"aBcDeFg\"",
   "\"1234567\"",
   "\"hello world\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def j(n: int):\n  if n <= 1:\n    return 1\n  else:\n    return n * j(n-1)",
  "changed_function": "def j(i: int):\n  if i <= 1:\n    return 1\n  else:\n    return i * j(i-1)",
  "function_name": "j",
  "inputs": [
   "5",
   "10",
   "3",
   "1",
   "7"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "i",
  "original_function": "def k(arr: list):\n  max_value = arr[0]\n  for i in range(len(arr)):\n    if arr[i] > max_value:\n      max_value = arr[i]\n  return max_value",
  "changed_function": "def k(i: list):\n  max_value = i[0]\n  for j in range(len(i)):\n    if i[j] > max_value:\n      max_value = i[j]\n  return max_value",
  "function_name": "k",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 20, 30, 40, 50]",
   "[5, 4, 3, 2, 1]",
   "[100, 50, 20, 10]",
   "[1, 10, 100, 1000]"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "i",
  "original_function": "def l(nums: list):\n  for i in range(len(nums) - 1):\n    for j in range(i + 1, len(nums)):\n      if nums[i] > nums[j]:\n        nums[i], nums[j] = nums[j], nums[i]\n  return nums",
  "changed_function": "def l(i: list):\n  for j in range(len(i) - 1):\n    for k in range(j + 1, len(i)):\n      if i[j] > i[k]:\n        i[j], i[k] = i[k], i[j]\n  return i",
  "function_name": "l",
  "inputs": [
   "[5, 2, 4, 6, 1, 3]",
   "[10, 9, 8, 7, 6, 5]",
   "[1, 3, 5, 7, 9]",
   "[100, 50, 20, 10]",
   "[1, 2, 3, 4, 5, 6, 7, 8, 9]"
  ]
 },
 {
  "target_argument": "list_a",
  "change_to": "i",
  "original_function": "def m(list_a: list):\n  new_list = []\n  for i in list_a:\n    if i % 2 == 0:\n      new_list.append(i)\n  return new_list",
  "changed_function": "def m(i: list):\n  new_list = []\n  for j in i:\n    if j % 2 == 0:\n      new_list.append(j)\n  return new_list",
  "function_name": "m",
  "inputs": [
   "[1, 2, 3, 4, 5, 6, 7]",
   "[10, 20, 30, 40, 50]",
   "[1, 3, 5, 7, 9]",
   "[2, 4, 6, 8, 10]",
   "[100, 50, 20, 10, 5]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def n(n: int):\n  res = 0\n  for i in range(n):\n    res += i\n    if res > 10:\n      break\n  return res",
  "changed_function": "def n(i: int):\n  res = 0\n  for j in range(i):\n    res += j\n    if res > 10:\n      break\n  return res",
  "function_name": "n",
  "inputs": [
   "15",
   "10",
   "5",
   "20",
   "30"
  ]
 },
 {
  "target_argument": "list_b",
  "change_to": "i",
  "original_function": "def o(list_b: list):\n  result = 0\n  for i in list_b:\n    result += i\n  return result",
  "changed_function": "def o(i: list):\n  result = 0\n  for j in i:\n    result += j\n  return result",
  "function_name": "o",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 20, 30, 40, 50]",
   "[5, 4, 3, 2, 1]",
   "[100, 50, 20, 10]",
   "[1, 10, 100, 1000]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def square_sum(n: int):\n  sum = 0\n  for i in range(n):\n    sum += i * i\n  return sum",
  "changed_function": "def square_sum(x: int):\n  sum = 0\n  for i in range(x):\n    sum += i * i\n  return sum",
  "function_name": "square_sum",
  "inputs": [
   "10",
   "5",
   "20",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def factorial(n: int):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n - 1)",
  "changed_function": "def factorial(k: int):\n  if k == 0:\n    return 1\n  else:\n    return k * factorial(k - 1)",
  "function_name": "factorial",
  "inputs": [
   "5",
   "10",
   "3",
   "7",
   "1"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def fibonacci(n: int):\n  if n <= 1:\n    return n\n  else:\n    return fibonacci(n - 1) + fibonacci(n - 2)",
  "changed_function": "def fibonacci(i: int):\n  if i <= 1:\n    return i\n  else:\n    return fibonacci(i - 1) + fibonacci(i - 2)",
  "function_name": "fibonacci",
  "inputs": [
   "10",
   "5",
   "8",
   "3",
   "15"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "a",
  "original_function": "def sum_of_squares(n: int):\n  sum = 0\n  for i in range(1, n + 1):\n    sum += i * i\n  return sum",
  "changed_function": "def sum_of_squares(a: int):\n  sum = 0\n  for i in range(1, a + 1):\n    sum += i * i\n  return sum",
  "function_name": "sum_of_squares",
  "inputs": [
   "5",
   "10",
   "3",
   "7",
   "1"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "y",
  "original_function": "def count_even(n: int):\n  count = 0\n  for i in range(n):\n    if i % 2 == 0:\n      count += 1\n  return count",
  "changed_function": "def count_even(y: int):\n  count = 0\n  for i in range(y):\n    if i % 2 == 0:\n      count += 1\n  return count",
  "function_name": "count_even",
  "inputs": [
   "10",
   "5",
   "8",
   "15",
   "20"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def sum_of_digits(n: int):\n  sum = 0\n  while n > 0:\n    digit = n % 10\n    sum += digit\n    n //= 10\n  return sum",
  "changed_function": "def sum_of_digits(x: int):\n  sum = 0\n  while x > 0:\n    digit = x % 10\n    sum += digit\n    x //= 10\n  return sum",
  "function_name": "sum_of_digits",
  "inputs": [
   "123",
   "456",
   "789",
   "100",
   "555"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def power_of_two(n: int):\n  if n == 0:\n    return 1\n  else:\n    return 2 * power_of_two(n - 1)",
  "changed_function": "def power_of_two(i: int):\n  if i == 0:\n    return 1\n  else:\n    return 2 * power_of_two(i - 1)",
  "function_name": "power_of_two",
  "inputs": [
   "5",
   "10",
   "3",
   "7",
   "1"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "n",
  "original_function": "def find_Max_Num(arr: list):\n    n = len(arr)\n    arr.sort(reverse = True)\n    num = arr[0]\n    for i in range(1,n):\n        num = num * 10 + arr[i]\n    return num",
  "changed_function": "def find_Max_Num(n: list):\n    x = len(n)\n    n.sort(reverse = True)\n    num = n[0]\n    for i in range(1,x):\n        num = num * 10 + n[i]\n    return num",
  "function_name": "find_Max_Num",
  "inputs": [
   "[-1, 5, 3, 1]",
   "[1, 1, 2, 1, 3, 2, 3, 2]",
   "[1]",
   "[1, 1, 1, 1, 1]",
   "[2, 5, 2, 3, 6]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "x",
  "original_function": "def remove_duplicate(s: str):\n    t = ''\n    for x in s:\n        if x not in t:\n            t += x\n    return t",
  "changed_function": "def remove_duplicate(x: str):\n    t = ''\n    for n in x:\n        if n not in t:\n            t += n\n    return t",
  "function_name": "remove_duplicate",
  "inputs": [
   "'aabbcde'",
   "'aabbcc'",
   "'abcdef'",
   "'aaaaaaaaaa'",
   "'a'"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "x",
  "original_function": "def find_max_sum_subarray(nums: list):\n    n = len(nums)\n    x = nums[0]\n    max_so_far = x\n    for i in range(1,n):\n        x = max(x+nums[i], nums[i])\n        max_so_far = max(max_so_far, x)\n    return max_so_far",
  "changed_function": "def find_max_sum_subarray(x: list):\n    n = len(x)\n    nums = x[0]\n    max_so_far = nums\n    for i in range(1,n):\n        nums = max(nums+x[i], x[i])\n        max_so_far = max(max_so_far, nums)\n    return max_so_far",
  "function_name": "find_max_sum_subarray",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[-2, 1, -3, 4, -1, 2, 1, -5, 4]",
   "[1, -2, 1, 2, 3]",
   "[-2, 1, -1, 1, 4]",
   "[-2, 1, -3, 4, -1, 2, 1, -5, 4]"
  ]
 },
 {
  "target_argument": "data",
  "change_to": "b",
  "original_function": "def is_sorted_ascending(data: list):\n    n = len(data)\n    for i in range(1,n):\n        if data[i] < data[i-1]:\n            return False\n    return True",
  "changed_function": "def is_sorted_ascending(b: list):\n    n = len(b)\n    for i in range(1,n):\n        if b[i] < b[i-1]:\n            return False\n    return True",
  "function_name": "is_sorted_ascending",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[1, 2, 3, 1, 2]",
   "[1, 2, 3, 3, 3, 4, 5]",
   "[1]"
  ]
 },
 {
  "target_argument": "list_a",
  "change_to": "y",
  "original_function": "def reverse_list(list_a: list):\n    n = len(list_a)\n    for i in range(0,n//2):\n        temp = list_a[i]\n        list_a[i] = list_a[n-i-1]\n        list_a[n-i-1] = temp\n    return list_a",
  "changed_function": "def reverse_list(y: list):\n    n = len(y)\n    for i in range(0,n//2):\n        temp = y[i]\n        y[i] = y[n-i-1]\n        y[n-i-1] = temp\n    return y",
  "function_name": "reverse_list",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[1, 2, 3, 1, 2]",
   "[1, 2, 3, 3, 3, 4, 5]",
   "[1]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def find_factorial(n: int):\n    x = 1\n    for i in range(1, n + 1):\n        x *= i\n    return x",
  "changed_function": "def find_factorial(x: int):\n    n = 1\n    for i in range(1, x + 1):\n        n *= i\n    return n",
  "function_name": "find_factorial",
  "inputs": [
   "5",
   "10",
   "0",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def calculate_sum_of_digits(x: int):\n    sum = 0\n    while x > 0:\n        digit = x % 10\n        sum += digit\n        x = x // 10\n    return sum",
  "changed_function": "def calculate_sum_of_digits(a: int):\n    sum = 0\n    while a > 0:\n        digit = a % 10\n        sum += digit\n        a = a // 10\n    return sum",
  "function_name": "calculate_sum_of_digits",
  "inputs": [
   "12345",
   "54321",
   "10",
   "1",
   "1000000"
  ]
 },
 {
  "target_argument": "input",
  "change_to": "x",
  "original_function": "def check_prime(input: int):\n    if input <= 1:\n        return False\n    for i in range(2, int(input ** 0.5) + 1):\n        if input % i == 0:\n            return False\n    return True",
  "changed_function": "def check_prime(x: int):\n    if x <= 1:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True",
  "function_name": "check_prime",
  "inputs": [
   "2",
   "7",
   "11",
   "10",
   "9"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def sum_of_even_numbers(n: int):\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum += i\n    return sum",
  "changed_function": "def sum_of_even_numbers(k: int):\n    sum = 0\n    for i in range(1, k + 1):\n        if i % 2 == 0:\n            sum += i\n    return sum",
  "function_name": "sum_of_even_numbers",
  "inputs": [
   "10",
   "20",
   "5",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "n",
  "original_function": "def count_vowels(s: str):\n    count = 0\n    for char in s:\n        if char.lower() in 'aeiou':\n            count += 1\n    return count",
  "changed_function": "def count_vowels(n: str):\n    count = 0\n    for char in n:\n        if char.lower() in 'aeiou':\n            count += 1\n    return count",
  "function_name": "count_vowels",
  "inputs": [
   "'hello'",
   "'world'",
   "'aeiou'",
   "'python'",
   "'javascript'"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "x",
  "original_function": "def test1(b: int):\n  a = b + 1\n  x = 2\n  if a == 0:\n    return b\n  elif a == 2:\n    return a * b\n  else:\n    return 10 + b",
  "changed_function": "def test1(x: int):\n  a = x + 1\n  n = 2\n  if a == 0:\n    return x\n  elif a == 2:\n    return a * x\n  else:\n    return 10 + x",
  "function_name": "test1",
  "inputs": [
   "5",
   "10",
   "-1",
   "0",
   "2"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "b",
  "original_function": "def test2(y: bool):\n  x = y\n  if y:\n    return x\n  else:\n    return y",
  "changed_function": "def test2(b: bool):\n  x = b\n  if b:\n    return x\n  else:\n    return b",
  "function_name": "test2",
  "inputs": [
   "True",
   "False",
   "False",
   "True",
   "False"
  ]
 },
 {
  "target_argument": "d",
  "change_to": "x",
  "original_function": "def test3(d: int):\n  a = 2\n  x = 4\n  b = d * a\n  if x > 2:\n    return b + 2\n  else:\n    return 10 + d",
  "changed_function": "def test3(x: int):\n  a = 2\n  n = 4\n  b = x * a\n  if n > 2:\n    return b + 2\n  else:\n    return 10 + x",
  "function_name": "test3",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "k",
  "original_function": "def test4(p: int):\n  a = p * 5\n  b = a + p\n  k = 2\n  return a + b + k",
  "changed_function": "def test4(k: int):\n  a = k * 5\n  b = a + k\n  n = 2\n  return a + b + n",
  "function_name": "test4",
  "inputs": [
   "3",
   "5",
   "1",
   "7",
   "10"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def test5(a: str):\n  x = a\n  n = 'a'\n  b = a.upper()\n  return x + n + b",
  "changed_function": "def test5(n: str):\n  x = n\n  y = 'a'\n  b = n.upper()\n  return x + y + b",
  "function_name": "test5",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'test'",
   "'sample'"
  ]
 },
 {
  "target_argument": "t",
  "change_to": "a",
  "original_function": "def test6(t: list):\n  a = t\n  b = a[0]\n  x = 2\n  for i in a:\n    if i < 1:\n      return b + t[1]\n  return b + x",
  "changed_function": "def test6(a: list):\n  b = a\n  c = b[0]\n  x = 2\n  for i in b:\n    if i < 1:\n      return c + b[1]\n  return c + x",
  "function_name": "test6",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[0, 2, 1]",
   "[1, 2, -1]",
   "[3, -1, 1]"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "b",
  "original_function": "def test7(z: int):\n  b = 5\n  x = 0\n  for i in range(z):\n    x = x + i\n  return x + b",
  "changed_function": "def test7(b: int):\n  a = 5\n  x = 0\n  for i in range(b):\n    x = x + i\n  return x + a",
  "function_name": "test7",
  "inputs": [
   "1",
   "5",
   "3",
   "10",
   "2"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "c",
  "original_function": "def test8(a: tuple):\n  c = 5\n  b = a[0]\n  x = 1\n  for i in range(c):\n    if b < 5:\n      x = x * i\n  return x * a[1]",
  "changed_function": "def test8(c: tuple):\n  b = 5\n  a = c[0]\n  x = 1\n  for i in range(b):\n    if a < 5:\n      x = x * i\n  return x * c[1]",
  "function_name": "test8",
  "inputs": [
   "(1, 2)",
   "(3, 4)",
   "(5, 6)",
   "(7, 8)",
   "(9, 10)"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "t",
  "original_function": "def test9(x: bool):\n  a = x\n  t = 10\n  b = 2\n  if a == True:\n    t = b * 2\n  else:\n    t = b\n  return t + 1",
  "changed_function": "def test9(t: bool):\n  a = t\n  n = 10\n  b = 2\n  if a == True:\n    n = b * 2\n  else:\n    n = b\n  return n + 1",
  "function_name": "test9",
  "inputs": [
   "False",
   "True",
   "False",
   "True",
   "False"
  ]
 },
 {
  "target_argument": "c",
  "change_to": "b",
  "original_function": "def test10(c: int):\n  a = c\n  x = 1\n  b = 1\n  if a > 1:\n    x = a + b\n  return x",
  "changed_function": "def test10(b: int):\n  a = b\n  x = 1\n  c = 1\n  if a > 1:\n    x = a + c\n  return x",
  "function_name": "test10",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "c",
  "original_function": "def my_func(b: int):\n  c = b * 2\n  if c > 10:\n    return c\n  else:\n    return b + 1",
  "changed_function": "def my_func(c: int):\n  d = c * 2\n  if d > 10:\n    return d\n  else:\n    return c + 1",
  "function_name": "my_func",
  "inputs": [
   "10",
   "5",
   "2",
   "15",
   "3"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "y",
  "original_function": "def my_func(a: bool):\n  b = a\n  if a:\n    return True\n  else:\n    return False",
  "changed_function": "def my_func(y: bool):\n  b = y\n  if y:\n    return True\n  else:\n    return False",
  "function_name": "my_func",
  "inputs": [
   "True",
   "False",
   "False",
   "True",
   "True"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "a",
  "original_function": "def my_func(n: int):\n  a = n + 1\n  b = a * 2\n  if b > 5:\n    return True\n  else:\n    return False",
  "changed_function": "def my_func(a: int):\n  n = a + 1\n  b = n * 2\n  if b > 5:\n    return True\n  else:\n    return False",
  "function_name": "my_func",
  "inputs": [
   "10",
   "5",
   "2",
   "1",
   "0"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "a",
  "original_function": "def my_func(z: str):\n  a = z * 2\n  if len(a) > 5:\n    return True\n  else:\n    return False",
  "changed_function": "def my_func(a: str):\n  z = a * 2\n  if len(z) > 5:\n    return True\n  else:\n    return False",
  "function_name": "my_func",
  "inputs": [
   "'hello'",
   "'world'",
   "'abc'",
   "'12345'",
   "'short'"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def my_func(a: int):\n  x = a + 1\n  if x > 5:\n    return True\n  else:\n    return False",
  "changed_function": "def my_func(x: int):\n  a = x + 1\n  if a > 5:\n    return True\n  else:\n    return False",
  "function_name": "my_func",
  "inputs": [
   "5",
   "10",
   "2",
   "0",
   "1"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "n",
  "original_function": "def my_func(l: list):\n  n = len(l)\n  if n > 3:\n    return True\n  else:\n    return False",
  "changed_function": "def my_func(n: list):\n  l = len(n)\n  if l > 3:\n    return True\n  else:\n    return False",
  "function_name": "my_func",
  "inputs": [
   "[1, 2, 3]",
   "[1, 2, 3, 4]",
   "[1, 2]",
   "[]",
   "[1, 2, 3, 4, 5]"
  ]
 },
 {
  "target_argument": "k",
  "change_to": "i",
  "original_function": "def my_func(k: int):\n  i = k * 2\n  if i > 10:\n    return True\n  else:\n    return False",
  "changed_function": "def my_func(i: int):\n  k = i * 2\n  if k > 10:\n    return True\n  else:\n    return False",
  "function_name": "my_func",
  "inputs": [
   "10",
   "5",
   "2",
   "15",
   "3"
  ]
 },
 {
  "target_argument": "t",
  "change_to": "a",
  "original_function": "def my_func(t: tuple):\n  a = len(t)\n  if a > 2:\n    return True\n  else:\n    return False",
  "changed_function": "def my_func(a: tuple):\n  t = len(a)\n  if t > 2:\n    return True\n  else:\n    return False",
  "function_name": "my_func",
  "inputs": [
   "(1, 2)",
   "(1, 2, 3)",
   "(1, 2, 3, 4)",
   "(1, 2)",
   "(1, 2, 3)"
  ]
 },
 {
  "target_argument": "c",
  "change_to": "s",
  "original_function": "def my_func(c: str):\n  s = c + '!' * 3\n  if len(s) > 5:\n    return True\n  else:\n    return False",
  "changed_function": "def my_func(s: str):\n  c = s + '!' * 3\n  if len(c) > 5:\n    return True\n  else:\n    return False",
  "function_name": "my_func",
  "inputs": [
   "'hello'",
   "'world'",
   "'abc'",
   "'short'",
   "'very long string'"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def my_func(a: str):\n  b = a.upper()\n  if len(b) > 5:\n    return True\n  else:\n    return False",
  "changed_function": "def my_func(b: str):\n  a = b.upper()\n  if len(a) > 5:\n    return True\n  else:\n    return False",
  "function_name": "my_func",
  "inputs": [
   "'hello'",
   "'world'",
   "'abc'",
   "'short'",
   "'very long string'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def find_max_sum_subsequence(n: int):\n    max_so_far = 0\n    curr_max = 0\n    for i in range(n):\n        curr_max = max(0, curr_max + i)\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far",
  "changed_function": "def find_max_sum_subsequence(x: int):\n    max_so_far = 0\n    curr_max = 0\n    for i in range(x):\n        curr_max = max(0, curr_max + i)\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far",
  "function_name": "find_max_sum_subsequence",
  "inputs": [
   "10",
   "5",
   "20",
   "1",
   "15"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "s",
  "original_function": "def find_missing_number(a: list[int]):\n    n = len(a) + 1\n    sum_n = n * (n + 1) // 2\n    sum_a = sum(a)\n    return sum_n - sum_a",
  "changed_function": "def find_missing_number(s: list[int]):\n    n = len(s) + 1\n    sum_n = n * (n + 1) // 2\n    sum_a = sum(s)\n    return sum_n - sum_a",
  "function_name": "find_missing_number",
  "inputs": [
   "[1, 2, 3, 4, 6]",
   "[1, 2, 0, 4]",
   "[1, 3, 5, 6]",
   "[2, 4, 5, 1]",
   "[1, 2, 3, 4, 5, 6, 7, 9, 10]"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "s",
  "original_function": "def find_median_sorted_arrays(nums1: list[int], nums2: list[int]):\n    merged = sorted(nums1 + nums2)\n    n = len(merged)\n    if n % 2 == 0:\n        return (merged[n // 2 - 1] + merged[n // 2]) / 2\n    else:\n        return merged[n // 2]",
  "changed_function": "def find_median_sorted_arrays(s1: list[int], nums2: list[int]):\n    merged = sorted(s1 + nums2)\n    n = len(merged)\n    if n % 2 == 0:\n        return (merged[n // 2 - 1] + merged[n // 2]) / 2\n    else:\n        return merged[n // 2]",
  "function_name": "find_median_sorted_arrays",
  "inputs": [
   "[1, 3], [2]",
   "[1, 2], [3, 4]",
   "[0, 0], [0, 0]",
   "[1, 2, 3, 4, 5], [6, 7, 8, 9]",
   "[1, 2], [1, 2]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "arr",
  "original_function": "def reverse_string(s: str):\n    return s[::-1]",
  "changed_function": "def reverse_string(arr: str):\n    return arr[::-1]",
  "function_name": "reverse_string",
  "inputs": [
   "'hello'",
   "'world'",
   "'Python'",
   "'programming'",
   "'12345'"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "s",
  "original_function": "def find_max_profit(arr: list[int]):\n    min_price = float('inf')\n    max_profit = 0\n    for i in range(len(arr)):\n        if arr[i] < min_price:\n            min_price = arr[i]\n        elif arr[i] - min_price > max_profit:\n            max_profit = arr[i] - min_price\n    return max_profit",
  "changed_function": "def find_max_profit(s: list[int]):\n    min_price = float('inf')\n    max_profit = 0\n    for i in range(len(s)):\n        if s[i] < min_price:\n            min_price = s[i]\n        elif s[i] - min_price > max_profit:\n            max_profit = s[i] - min_price\n    return max_profit",
  "function_name": "find_max_profit",
  "inputs": [
   "[7, 1, 5, 3, 6, 4]",
   "[1, 2, 3, 4, 5]",
   "[7, 6, 5, 4, 3, 2]",
   "[1, 2, 1, 2, 1, 2]",
   "[10, 7, 5, 8, 11, 9]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "m",
  "original_function": "def is_palindrome(x: str):\n    return x == x[::-1]",
  "changed_function": "def is_palindrome(m: str):\n    return m == m[::-1]",
  "function_name": "is_palindrome",
  "inputs": [
   "'racecar'",
   "'level'",
   "'madam'",
   "'hello'",
   "'12321'"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "x",
  "original_function": "def two_sum(nums: list[int], target: int):\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []",
  "changed_function": "def two_sum(x: list[int], target: int):\n    seen = {}\n    for i, num in enumerate(x):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []",
  "function_name": "two_sum",
  "inputs": [
   "[2, 7, 11, 15], 9",
   "[3, 2, 4], 6",
   "[3, 3], 6",
   "[1, 2, 3, 4, 5], 7",
   "[1, 2, 3, 4, 5], 10"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def longest_common_prefix(s: list[str]):\n    if not s:\n        return ''\n    prefix = s[0]\n    for i in range(1, len(s)):\n        while not s[i].startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return ''\n    return prefix",
  "changed_function": "def longest_common_prefix(t: list[str]):\n    if not t:\n        return ''\n    prefix = t[0]\n    for i in range(1, len(t)):\n        while not t[i].startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return ''\n    return prefix",
  "function_name": "longest_common_prefix",
  "inputs": [
   "['flower', 'flow', 'flight']",
   "['dog', 'racecar', 'car']",
   "['a']",
   "['a', 'a']",
   "['abca', 'abc', 'ab']"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "x",
  "original_function": "def find_kth_largest(arr: list[int], k: int):\n    arr.sort()\n    return arr[len(arr) - k]",
  "changed_function": "def find_kth_largest(x: list[int], k: int):\n    x.sort()\n    return x[len(x) - k]",
  "function_name": "find_kth_largest",
  "inputs": [
   "[3, 2, 1, 5, 6, 4], 2",
   "[3, 2, 3, 1, 2, 4, 5, 5, 6], 4",
   "[1, 1, 1], 1",
   "[1, 2, 3, 4, 5], 3",
   "[1, 2, 3, 4, 5], 5"
  ]
 }
]