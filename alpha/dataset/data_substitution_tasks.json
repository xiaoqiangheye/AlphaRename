[
 {
  "expr": "x * 2",
  "variable": "x",
  "original_function": "def double_and_append(a: int):\n  result = []\n  for x in range(a):\n    result.append(x * 2)\n  return result",
  "output_expr": "result = []\n  for z in range(x * 2):\n    result.append(z * 2)\n  return result",
  "function_name": "double_and_append",
  "inputs": [
   "10",
   "2",
   "3"
  ]
 },
 {
  "expr": "y + 5",
  "variable": "y",
  "original_function": "def find_sum_of_squares(n: int):\n  sum = 0\n  for y in range(n):\n    sum += y * y\n  return sum",
  "output_expr": "sum = 0\n  for z in range(y + 5):\n    sum += z * z\n  return sum",
  "function_name": "find_sum_of_squares",
  "inputs": [
   "10",
   "2",
   "3"
  ]
 },
 {
  "expr": "x * 3",
  "variable": "x",
  "original_function": "def reverse_string(s: str):\n  result = ''\n  for x in s:\n    result = x + result\n  return result",
  "output_expr": "result = ''\n  for z in s:\n    result = z + result\n  return result",
  "function_name": "reverse_string",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'"
  ]
 },
 {
  "expr": "x + 1",
  "variable": "x",
  "original_function": "def foo(a: int):\n  b = 1\n  c = 2\n  return a + b + c",
  "output_expr": "z = 1\n  c = 2\n  return x + 1 + z + c",
  "function_name": "foo",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "expr": "x + 10",
  "variable": "x",
  "original_function": "def bar(a: int):\n  b = a\n  for i in range(3):\n    b += a\n  return b",
  "output_expr": "b = x + 10\n  for i in range(3):\n    b += x + 10\n  return b",
  "function_name": "bar",
  "inputs": [
   "10",
   "20",
   "30",
   "40",
   "50"
  ]
 },
 {
  "expr": "x * 2",
  "variable": "x",
  "original_function": "def baz(a: str):\n  b = a + \"test\"\n  return b",
  "output_expr": "b = x * 2 + \"test\"\n  return b",
  "function_name": "baz",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"coding\""
  ]
 },
 {
  "expr": "x + 2",
  "variable": "x",
  "original_function": "def find_Volume(l: int):\n    w = 10\n    h = 5\n    return (l * w * h) / 2",
  "output_expr": "w = 10\n    h = 5\n    return ((x + 2) * w * h) / 2",
  "function_name": "find_Volume",
  "inputs": [
   "1",
   "5",
   "10",
   "2"
  ]
 },
 {
  "expr": "x * 2",
  "variable": "x",
  "original_function": "def check_password(password: str):\n    if len(password) < 8:\n        return False\n    has_uppercase = False\n    has_lowercase = False\n    has_digit = False\n    for char in password:\n        if char.isupper():\n            has_uppercase = True\n        elif char.islower():\n            has_lowercase = True\n        elif char.isdigit():\n            has_digit = True\n    return has_uppercase and has_lowercase and has_digit",
  "output_expr": "if len(password) < 8:\n        return False\n    has_uppercase = False\n    has_lowercase = False\n    has_digit = False\n    for char in password:\n        if char.isupper():\n            has_uppercase = True\n        elif char.islower():\n            has_lowercase = True\n        elif char.isdigit():\n            has_digit = True\n    return has_uppercase and has_lowercase and has_digit",
  "function_name": "check_password",
  "inputs": [
   "\"password1\"",
   "\"password2\"",
   "\"password3\""
  ]
 },
 {
  "expr": "y * 2",
  "variable": "y",
  "original_function": "def foo(x: int):\n        y = 1\n        z = 2\n        return x + y * z",
  "output_expr": "z = 2\n        return y * 2 + 1 * z",
  "function_name": "foo",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "a + 1",
  "variable": "a",
  "original_function": "def bar(a: int):\n        a = 10\n        if a > 1:\n            return a + 1\n        else:\n            return 0",
  "output_expr": "a_1 = 10\n        if a_1 > 1:\n            return a + 1 + 1\n        else:\n            return 0",
  "function_name": "bar",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "z - 5",
  "variable": "z",
  "original_function": "def baz(x: int):\n        z = x + 1\n        if z > 0:\n            return z - 5\n        else:\n            return z + 5",
  "output_expr": "z_1 = x + 1\n        if z_1 > 0:\n            return z - 5\n        else:\n            return z_1 + 5",
  "function_name": "baz",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "b + 2",
  "variable": "b",
  "original_function": "def qux(b: str):\n        b = 'hello'\n        if len(b) > 5:\n            return b + ' world'\n        else:\n            return b + '!'",
  "output_expr": "b_1 = 'hello'\n        if len(b_1) > 5:\n            return b + 2 + ' world'\n        else:\n            return b + 2 + '!'",
  "function_name": "qux",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "a * 3",
  "variable": "a",
  "original_function": "def quux(a: bool):\n        a = True\n        if a:\n            return a\n        else:\n            return not a",
  "output_expr": "a_1 = True\n        if a_1:\n            return a * 3\n        else:\n            return not a_1",
  "function_name": "quux",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "x * 5",
  "variable": "x",
  "original_function": "def sum_list(numbers: list[int]):\n  total = 0\n  for num in numbers:\n    total += num\n  return total",
  "output_expr": "total = 0\n  for num in x * 5:\n    total += num\n  return total",
  "function_name": "sum_list",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]"
  ]
 },
 {
  "expr": "a + 1",
  "variable": "a",
  "original_function": "def fun1(x: int):\n    a = 2\n    return x + a",
  "output_expr": "z = 2\n    return a + 1 + z",
  "function_name": "fun1",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "b * 2",
  "variable": "b",
  "original_function": "def fun2(x: int):\n    b = 1\n    if x > 0:\n        b = b * 3\n    return b + x",
  "output_expr": "c = 1\n    if x > 0:\n        c = c * 3\n    return c + x",
  "function_name": "fun2",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "e * 4",
  "variable": "e",
  "original_function": "def fun5(x: tuple):\n    e = (1,2)\n    return e[0] * x[1]",
  "output_expr": "f = (1,2)\n    return f[0] * x[1]",
  "function_name": "fun5",
  "inputs": [
   "(1,2)",
   "(3,4)",
   "(5,6)"
  ]
 },
 {
  "expr": "a - 3",
  "variable": "a",
  "original_function": "def foo(x: int):\n  a = 1\n  b = x + 1\n  if (x <= 1):\n    return 0\n  if (b > 1):\n    return a * b\n  return x + 2",
  "output_expr": "z = 1\n  b = a - 3 + 1\n  if (a - 3 <= 1):\n    return 0\n  if (b > 1):\n    return z * b\n  return a - 3 + 2",
  "function_name": "foo",
  "inputs": [
   "2",
   "5",
   "10"
  ]
 },
 {
  "expr": "n - 3",
  "variable": "n",
  "original_function": "def bar(n: int):\n  k = 2\n  while (n > 1):\n    k = k * n\n    n = n - 1\n  return k",
  "output_expr": "k = 2\n  while (n - 3 > 1):\n    k = k * (n - 3)\n    n = (n - 3) - 1\n  return k",
  "function_name": "bar",
  "inputs": [
   "4",
   "5",
   "8"
  ]
 },
 {
  "expr": "i + 5",
  "variable": "i",
  "original_function": "def baz(n: int):\n  i = 0\n  while (i < n):\n    i = i + 1\n  return i",
  "output_expr": "z = 0\n  while (z < n):\n    z = z + 1\n  return z",
  "function_name": "baz",
  "inputs": [
   "6",
   "1",
   "12"
  ]
 },
 {
  "expr": "j * 2",
  "variable": "j",
  "original_function": "def qux(j: int):\n  if (j == 0):\n    return 0\n  k = 0\n  while (j > 0):\n    k = k + j\n    j = j - 1\n  return k",
  "output_expr": "if (j * 2 == 0):\n    return 0\n  k = 0\n  while (j * 2 > 0):\n    k = k + j * 2\n    j = j * 2 - 1\n  return k",
  "function_name": "qux",
  "inputs": [
   "3",
   "5",
   "8"
  ]
 },
 {
  "expr": "c - 1",
  "variable": "c",
  "original_function": "def quux(c: int):\n  if (c == 1):\n    return True\n  a = 0\n  while (c > 1):\n    a = a + c\n    c = c - 1\n  return a == c",
  "output_expr": "if (c - 1 == 1):\n    return True\n  a = 0\n  while (c - 1 > 1):\n    a = a + c - 1\n    c = c - 1 - 1\n  return a == c",
  "function_name": "quux",
  "inputs": [
   "4",
   "3",
   "6"
  ]
 },
 {
  "expr": "x * 2",
  "variable": "x",
  "original_function": "def find_max(numbers: list[int]):\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num",
  "output_expr": "max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num",
  "function_name": "find_max",
  "inputs": [
   "[1, 2, 3]",
   "[5, 4, 3]",
   "[10, 20, 30]"
  ]
 },
 {
  "expr": "x * 3",
  "variable": "x",
  "original_function": "def count_even(numbers: list[int]):\n    count = 0\n    for num in numbers:\n        if num % 2 == 0:\n            count += 1\n    return count",
  "output_expr": "count = 0\n    for num in numbers:\n        if num % 2 == 0:\n            count += 1\n    return count",
  "function_name": "count_even",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[6, 7, 8, 9, 10]",
   "[11, 12, 13, 14, 15]"
  ]
 },
 {
  "expr": "x * 3",
  "variable": "x",
  "original_function": "def func1(a: int):\n    b = 1\n    c = 2\n    d = 3\n    return a * b + c * d",
  "output_expr": "b = 1\n    c = 2\n    d = 3\n    return x * 3 * b + c * d",
  "function_name": "func1",
  "inputs": [
   "1",
   "2",
   "3"
  ]
 },
 {
  "expr": "z * 4",
  "variable": "z",
  "original_function": "def func3(a: list):\n    b = [1, 2, 3]\n    c = [4, 5, 6]\n    return a + b + c",
  "output_expr": "b = [1, 2, 3]\n    c = [4, 5, 6]\n    return z * 4 + b + c",
  "function_name": "func3",
  "inputs": [
   "[1, 2]",
   "[3, 4]",
   "[5, 6]"
  ]
 },
 {
  "expr": "x + 5",
  "variable": "x",
  "original_function": "def func4(a: bool):\n    b = True\n    c = False\n    return a and b or c",
  "output_expr": "b = True\n    c = False\n    return x + 5 and b or c",
  "function_name": "func4",
  "inputs": [
   "True",
   "False",
   "True"
  ]
 },
 {
  "expr": "y * 1",
  "variable": "y",
  "original_function": "def func5(a: tuple):\n    b = (1, 2, 3)\n    c = (4, 5, 6)\n    return a + b + c",
  "output_expr": "b = (1, 2, 3)\n    c = (4, 5, 6)\n    return y * 1 + b + c",
  "function_name": "func5",
  "inputs": [
   "(1, 2)",
   "(3, 4)",
   "(5, 6)"
  ]
 },
 {
  "expr": "x * 2",
  "variable": "x",
  "original_function": "def function1(x: int):\n  y = 1\n  z = 2\n  for i in range(x):\n    z += 1\n  return z",
  "output_expr": "y = 1\n  z = 2\n  for i in range(x * 2):\n    z += 1\n  return z",
  "function_name": "function1",
  "inputs": [
   "2",
   "3",
   "5",
   "10"
  ]
 },
 {
  "expr": "x + 5",
  "variable": "x",
  "original_function": "def function2(x: int):\n  y = 1\n  if x > 10:\n    y = x * 2\n  else:\n    y = x // 2\n  return y",
  "output_expr": "y = 1\n  if x + 5 > 10:\n    y = (x + 5) * 2\n  else:\n    y = (x + 5) // 2\n  return y",
  "function_name": "function2",
  "inputs": [
   "2",
   "3",
   "5",
   "10"
  ]
 },
 {
  "expr": "x + 1",
  "variable": "x",
  "original_function": "def function5(x: int):\n  if x < 5:\n    return x + 1\n  else:\n    return x * 2\n",
  "output_expr": "if x + 1 < 5:\n    return x + 1 + 1\n  else:\n    return (x + 1) * 2",
  "function_name": "function5",
  "inputs": [
   "2",
   "3",
   "5",
   "10"
  ]
 },
 {
  "expr": "n * 2",
  "variable": "n",
  "original_function": "def factorial(n: int):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)",
  "output_expr": "if n * 2 == 0:\n        return 1\n    else:\n        return n * 2 * factorial(n * 2 - 1)",
  "function_name": "factorial",
  "inputs": [
   "5",
   "4",
   "3",
   "2",
   "1"
  ]
 },
 {
  "expr": "x * 2",
  "variable": "x",
  "original_function": "def find_max(numbers: list):\n    max_number = numbers[0]\n    for number in numbers:\n        if number > max_number:\n            max_number = number\n    return max_number",
  "output_expr": "z = numbers[0]\n    for number in numbers:\n        if number > z:\n            z = number\n    return z",
  "function_name": "find_max",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[10, 20, 30, 40]",
   "[1, 1, 1, 1, 1]"
  ]
 },
 {
  "expr": "y + 5",
  "variable": "y",
  "original_function": "def fun1(x: int):\n  if x > 10:\n    return x + 1\n  elif x > 5:\n    y = x + 1\n    return y * 2\n  else:\n    return x - 1",
  "output_expr": "if x > 10:\n    return x + 1\n  elif x > 5:\n    y = y + 5 + 1\n    return y * 2\n  else:\n    return x - 1",
  "function_name": "fun1",
  "inputs": [
   "15",
   "7",
   "3"
  ]
 },
 {
  "expr": "x - 10",
  "variable": "x",
  "original_function": "def fun2(y: int):\n  z = 1\n  if y < 10:\n    return y + z + 1\n  else:\n    return y - z - 1",
  "output_expr": "z = 1\n  if x - 10 < 10:\n    return x - 10 + z + 1\n  else:\n    return x - 10 - z - 1",
  "function_name": "fun2",
  "inputs": [
   "12",
   "18",
   "5"
  ]
 },
 {
  "expr": "k + 5",
  "variable": "k",
  "original_function": "def fun3(x: int):\n  k = 10\n  return x + k",
  "output_expr": "k = 10\n  return x + k + 5",
  "function_name": "fun3",
  "inputs": [
   "2",
   "6",
   "9"
  ]
 },
 {
  "expr": "x * 3",
  "variable": "x",
  "original_function": "def fun4(y: int):\n  if y % 2 == 0:\n    x = y // 2\n    return x + 1\n  else:\n    return y - 1",
  "output_expr": "if y % 2 == 0:\n    x = y // 2\n    return x + 1\n  else:\n    return y - 1",
  "function_name": "fun4",
  "inputs": [
   "10",
   "15",
   "22"
  ]
 },
 {
  "expr": "y + 2",
  "variable": "y",
  "original_function": "def fun1(y: int):\n  x = y + 1\n  return x + 2",
  "output_expr": "x = y + 2 + 1\n  return x + 2",
  "function_name": "fun1",
  "inputs": [
   "3",
   "4",
   "1"
  ]
 },
 {
  "expr": "y + 1",
  "variable": "y",
  "original_function": "def fun2(y: int):\n  z = y + 1\n  if z > 0:\n    z = y + 2\n  return z * 2",
  "output_expr": "z = y + 1 + 1\n  if z > 0:\n    z = y + 1 + 2\n  return z * 2",
  "function_name": "fun2",
  "inputs": [
   "3",
   "4",
   "1"
  ]
 },
 {
  "expr": "z * 2",
  "variable": "z",
  "original_function": "def fun3(z: int):\n  y = z * 2\n  z = y + 1\n  return y + z",
  "output_expr": "y = z * 2 * 2\n  z1 = y + 1\n  return y + z1",
  "function_name": "fun3",
  "inputs": [
   "3",
   "4",
   "1"
  ]
 },
 {
  "expr": "y * 2 + 3",
  "variable": "y",
  "original_function": "def foo(x: int):\n  y = x + 1\n  if y > 5:\n    return y * 2\n  else:\n    return x + 3",
  "output_expr": "z = y * 2 + 1\n  if z > 5:\n    return z * 2\n  else:\n    return y * 2 + 3 + 3",
  "function_name": "foo",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "s + \"world\"",
  "variable": "s",
  "original_function": "def bar(s: str):\n  t = s + \"!\"\n  if len(t) > 5:\n    return t + \"good\"\n  else:\n    return t + \"bad\"",
  "output_expr": "t = s + \"world\" + \"!\"\n  if len(t) > 5:\n    return t + \"good\"\n  else:\n    return t + \"bad\"",
  "function_name": "bar",
  "inputs": [
   "\"hello\"",
   "\"hi\"",
   "\"bye\""
  ]
 },
 {
  "expr": "b + 2",
  "variable": "b",
  "original_function": "def qux(a: bool):\n  b = not a\n  if a:\n    return a\n  else:\n    return b",
  "output_expr": "b = not a\n  if a:\n    return a\n  else:\n    return b + 2",
  "function_name": "qux",
  "inputs": [
   "True",
   "False"
  ]
 },
 {
  "expr": "x + 3",
  "variable": "x",
  "original_function": "def quux(x: int):\n  y = x * 2\n  z = x + 1\n  if y > 5:\n    return x * 3\n  else:\n    return z",
  "output_expr": "y = x + 3 * 2\n  z = x + 3 + 1\n  if y > 5:\n    return x + 3 * 3\n  else:\n    return z",
  "function_name": "quux",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "x * 3",
  "variable": "x",
  "original_function": "def my_function(s: str):\n    result = ''\n    for i in range(len(s)):\n        if (i % 2 == 0):\n            result = result + s[i]\n    return result",
  "output_expr": "result = ''\n    for i in range(len(x * 3)):\n        if (i % 2 == 0):\n            result = result + x * 3[i]\n    return result",
  "function_name": "my_function",
  "inputs": [
   "'abc'",
   "'hello world'"
  ]
 },
 {
  "expr": "y + 2",
  "variable": "y",
  "original_function": "def func(x: int):\n  y = x + 1\n  return x + y",
  "output_expr": "z = x + 1\n  return x + z",
  "function_name": "func",
  "inputs": [
   "1",
   "2",
   "3"
  ]
 },
 {
  "expr": "y * 2",
  "variable": "y",
  "original_function": "def func2(x: int):\n  y = 1\n  while x > 0:\n    y = y * 2\n    x = x - 1\n  return y",
  "output_expr": "z = 1\n  while x > 0:\n    z = z * 2\n    x = x - 1\n  return z",
  "function_name": "func2",
  "inputs": [
   "5",
   "3",
   "2"
  ]
 },
 {
  "expr": "x + 3",
  "variable": "x",
  "original_function": "def func3(x: bool):\n  if x:\n    return True\n  else:\n    return x\n  return False",
  "output_expr": "if x + 3:\n    return True\n  else:\n    return x + 3\n  return False",
  "function_name": "func3",
  "inputs": [
   "True",
   "False"
  ]
 },
 {
  "expr": "y * 2",
  "variable": "y",
  "original_function": "def func4(x: str):\n  y = x\n  if len(x) > 3:\n    return y\n  else:\n    return x\n  return y",
  "output_expr": "z = x\n  if len(x) > 3:\n    return z\n  else:\n    return x\n  return z",
  "function_name": "func4",
  "inputs": [
   "\"abcdef\"",
   "\"ab\"",
   "\"abc\""
  ]
 },
 {
  "expr": "x * 2",
  "variable": "x",
  "original_function": "def func5(x: list):\n  y = []\n  for item in x:\n    y.append(item)\n  return y",
  "output_expr": "z = []\n  for item in x * 2:\n    z.append(item)\n  return z",
  "function_name": "func5",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5]"
  ]
 },
 {
  "expr": "x + 1",
  "variable": "x",
  "original_function": "def func1(x: int):\n  y = 2\n  z = x + y\n  return z * 3",
  "output_expr": "y = 2\n  z = x + 1 + y\n  return z * 3",
  "function_name": "func1",
  "inputs": [
   "1",
   "2",
   "3"
  ]
 },
 {
  "expr": "x * 2",
  "variable": "x",
  "original_function": "def func2(x: int):\n  sum = 0\n  for i in range(x):\n    sum += i\n  return sum",
  "output_expr": "sum = 0\n  for i in range(x * 2):\n    sum += i\n  return sum",
  "function_name": "func2",
  "inputs": [
   "2",
   "4",
   "6"
  ]
 },
 {
  "expr": "x * 3",
  "variable": "x",
  "original_function": "def func4(x: int):\n  list1 = [1, 2, 3]\n  for i in range(x):\n    list1.append(i)\n  return list1",
  "output_expr": "list1 = [1, 2, 3]\n  for i in range(x * 3):\n    list1.append(i)\n  return list1",
  "function_name": "func4",
  "inputs": [
   "2",
   "4",
   "6"
  ]
 },
 {
  "expr": "x - 1",
  "variable": "x",
  "original_function": "def func5(x: bool):\n  if x:\n    return 'True'\n  else:\n    return 'False'",
  "output_expr": "if x - 1:\n    return 'True'\n  else:\n    return 'False'",
  "function_name": "func5",
  "inputs": [
   "True",
   "False"
  ]
 },
 {
  "expr": "x + 1",
  "variable": "x",
  "original_function": "def foo(x: int):\n  y = 2\n  x = 3\n  return x + y",
  "output_expr": "z = 2\n  x = 3\n  return x + z",
  "function_name": "foo",
  "inputs": [
   "1",
   "2",
   "3"
  ]
 },
 {
  "expr": "x * 2",
  "variable": "x",
  "original_function": "def bar(x: int):\n  y = x + 1\n  z = x - 1\n  return y + z",
  "output_expr": "y = x * 2 + 1\n  z = x * 2 - 1\n  return y + z",
  "function_name": "bar",
  "inputs": [
   "2",
   "3",
   "4"
  ]
 },
 {
  "expr": "x + 1",
  "variable": "x",
  "original_function": "def foo(n: int):\n    result = 0\n    for i in range(n):\n        result += i\n    return result",
  "output_expr": "result = 0\n    for i in range(x + 1):\n        result += i\n    return result",
  "function_name": "foo",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "expr": "x * 2",
  "variable": "x",
  "original_function": "def qux(s: str):\n    t = s\n    if len(s) > 5:\n        return t[0:5]\n    else:\n        return t",
  "output_expr": "t = x * 2\n    if len(t) > 5:\n        return t[0:5]\n    else:\n        return t",
  "function_name": "qux",
  "inputs": [
   "'hello'",
   "'world'",
   "'unknown'",
   "'goodbye'",
   "'python'"
  ]
 },
 {
  "expr": "x * 3",
  "variable": "x",
  "original_function": "def find_longest_word(sentence: str):\n    words = sentence.split()\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word",
  "output_expr": "words = sentence.split()\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word",
  "function_name": "find_longest_word",
  "inputs": [
   "'This is a test sentence.'",
   "'Another sentence with longer words.'",
   "'Short words only.'"
  ]
 },
 {
  "expr": "x + 1",
  "variable": "x",
  "original_function": "def f1(a: int):\n  x = 2\n  y = 3\n  z = a + x\n  return z",
  "output_expr": "z = a + 2\n  return z",
  "function_name": "f1",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "x - 1",
  "variable": "x",
  "original_function": "def f3(c: bool):\n  x = False\n  if c:\n    return True\n  else:\n    return x",
  "output_expr": "x = False\n  if c:\n    return True\n  else:\n    return x - 1",
  "function_name": "f3",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "x + 1",
  "variable": "x",
  "original_function": "def foo(x: int):\n  y = 1\n  z = x * 2\n  return z + y",
  "output_expr": "y = 1\n  z = x + 1 * 2\n  return z + y",
  "function_name": "foo",
  "inputs": [
   "1",
   "2",
   "3"
  ]
 },
 {
  "expr": "a + 5",
  "variable": "a",
  "original_function": "def bar(a: int):\n  b = 3\n  c = a + b\n  return c",
  "output_expr": "b = 3\n  c = a + 5 + b\n  return c",
  "function_name": "bar",
  "inputs": [
   "4",
   "5",
   "6"
  ]
 },
 {
  "expr": "s * 2",
  "variable": "s",
  "original_function": "def baz(s: str):\n  t = 'hello'\n  return s + t",
  "output_expr": "t = 'hello'\n  return s * 2 + t",
  "function_name": "baz",
  "inputs": [
   "'world'",
   "'python'",
   "'coding'"
  ]
 },
 {
  "expr": "k - 2",
  "variable": "k",
  "original_function": "def qux(k: int):\n  k = k + 1\n  return k",
  "output_expr": "k_1 = k - 2 + 1\n  return k_1",
  "function_name": "qux",
  "inputs": [
   "3",
   "4",
   "5"
  ]
 },
 {
  "expr": "y * 3",
  "variable": "y",
  "original_function": "def quux(y: int):\n  y = y + 1\n  return y * 2",
  "output_expr": "y_1 = y * 3 + 1\n  return y_1 * 2",
  "function_name": "quux",
  "inputs": [
   "2",
   "5",
   "1"
  ]
 },
 {
  "expr": "x * 3",
  "variable": "x",
  "original_function": "def foo(n: int):\n  x = n * 2\n  return x * 3",
  "output_expr": "z = n * 2\n  return z * 3",
  "function_name": "foo",
  "inputs": [
   "3",
   "5",
   "1"
  ]
 },
 {
  "expr": "y + 1",
  "variable": "y",
  "original_function": "def bar(x: int):\n  y = x * 2\n  if y > 5:\n    return y\n  else:\n    return x",
  "output_expr": "y = x * 2\n  if y > 5:\n    return y\n  else:\n    return x",
  "function_name": "bar",
  "inputs": [
   "10",
   "1",
   "8"
  ]
 },
 {
  "expr": "x - 5",
  "variable": "x",
  "original_function": "def qux(num: int):\n  x = num * 2\n  if x > 10:\n    return True\n  else:\n    return False",
  "output_expr": "z = num * 2\n  if z > 10:\n    return True\n  else:\n    return False",
  "function_name": "qux",
  "inputs": [
   "12",
   "4",
   "6"
  ]
 },
 {
  "expr": "x + 5",
  "variable": "x",
  "original_function": "def bar(x: int):\n  x = 1\n  if x > 5:\n    x = x * 2\n  else:\n    x = x - 1\n  return x",
  "output_expr": "z = 1\n  if z > 5:\n    z = z * 2\n  else:\n    z = z - 1\n  return x + 5",
  "function_name": "bar",
  "inputs": [
   "10",
   "1",
   "-1",
   "5",
   "15"
  ]
 },
 {
  "expr": "x + 1",
  "variable": "x",
  "original_function": "def my_func(x: bool):\n  if x == True:\n    return x\n  else:\n    return x",
  "output_expr": "if x + 1 == True:\n    return x + 1\n  else:\n    return x + 1",
  "function_name": "my_func",
  "inputs": [
   "True",
   "False",
   "False",
   "True",
   "True"
  ]
 },
 {
  "expr": "x + 1",
  "variable": "x",
  "original_function": "def foo(x: int):\n  y = x + 1\n  z = x - 1\n  return y + z",
  "output_expr": "y = x + 1 + 1\n  z = x + 1 - 1\n  return y + z",
  "function_name": "foo",
  "inputs": [
   "2",
   "1",
   "5",
   "-1",
   "10"
  ]
 },
 {
  "expr": "x + 1",
  "variable": "x",
  "original_function": "def func_test(x: int):\n  y = 0\n  while y < x:\n    y = y + 1\n  return y",
  "output_expr": "y = 0\n  while y < x + 1:\n    y = y + 1\n  return y",
  "function_name": "func_test",
  "inputs": [
   "3",
   "5",
   "1",
   "10",
   "1"
  ]
 },
 {
  "expr": "x + 1",
  "variable": "x",
  "original_function": "def func1(a: int):\n    x = 5\n    if a > 2:\n        return a + x + 1\n    else:\n        return a - x\n    return x",
  "output_expr": "z = 5\n    if x + 1 > 2:\n        return x + 1 + z + 1\n    else:\n        return x + 1 - z\n    return z",
  "function_name": "func1",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "y - 5",
  "variable": "y",
  "original_function": "def func2(b: int):\n    y = 10\n    return b + y * 2",
  "output_expr": "y = 10\n    return y - 5 + y * 2",
  "function_name": "func2",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "y * 3",
  "variable": "y",
  "original_function": "def func3(a: str):\n    y = \"abc\"\n    return a + y",
  "output_expr": "y = \"abc\"\n    return a + y * 3",
  "function_name": "func3",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"test\""
  ]
 },
 {
  "expr": "x * 2",
  "variable": "x",
  "original_function": "def func4(a: bool):\n    x = False\n    if a:\n        return x\n    else:\n        return True",
  "output_expr": "z = False\n    if a:\n        return z\n    else:\n        return True",
  "function_name": "func4",
  "inputs": [
   "True",
   "False",
   "None"
  ]
 },
 {
  "expr": "x + 10",
  "variable": "x",
  "original_function": "def func1(n: int):\n  x = 1\n  while n > 0:\n    x = x * n\n    n = n - 1\n  return x",
  "output_expr": "z = 1\n  while n > 0:\n    z = z * n\n    n = n - 1\n  return z",
  "function_name": "func1",
  "inputs": [
   "10",
   "5",
   "2"
  ]
 },
 {
  "expr": "x * 2",
  "variable": "x",
  "original_function": "def func2(x: int):\n  total = 0\n  for i in range(1, x + 1):\n    total = total + i\n  return total",
  "output_expr": "total = 0\n  for i in range(1, x * 2 + 1):\n    total = total + i\n  return total",
  "function_name": "func2",
  "inputs": [
   "5",
   "1",
   "2"
  ]
 },
 {
  "expr": "x + 5",
  "variable": "x",
  "original_function": "def foo(x: int):\n  y = 2 * x\n  z = 3 * x + 1\n  if z > 5:\n    return y + z\n  else:\n    return y - z",
  "output_expr": "y = 2 * (x + 5)\n  z = 3 * (x + 5) + 1\n  if z > 5:\n    return y + z\n  else:\n    return y - z",
  "function_name": "foo",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "expr": "x * 2",
  "variable": "x",
  "original_function": "def bar(x: int):\n  if x < 10:\n    return x * 2\n  else:\n    return x + 1",
  "output_expr": "if (x * 2) < 10:\n    return (x * 2) * 2\n  else:\n    return (x * 2) + 1",
  "function_name": "bar",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "expr": "x * 2",
  "variable": "x",
  "original_function": "def baz(x: str):\n  if len(x) > 5:\n    return x + '!' * 3\n  else:\n    return x + '!'",
  "output_expr": "if len(x * 2) > 5:\n    return (x * 2) + '!' * 3\n  else:\n    return (x * 2) + '!'",
  "function_name": "baz",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'language'"
  ]
 },
 {
  "expr": "y + 2",
  "variable": "y",
  "original_function": "def foo(x: int):\n  z = 1\n  if x > 5:\n    return z + x\n  else:\n    return x - z",
  "output_expr": "z = 1\n  if y + 2 > 5:\n    return z + y + 2\n  else:\n    return y + 2 - z",
  "function_name": "foo",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "y + 1",
  "variable": "y",
  "original_function": "def bar(x: int):\n  if x == 5:\n    return x + 2\n  else:\n    return x - 2",
  "output_expr": "if y + 1 == 5:\n    return y + 1 + 2\n  else:\n    return y + 1 - 2",
  "function_name": "bar",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "y * 3",
  "variable": "y",
  "original_function": "def baz(x: int):\n  if x == 5:\n    return x * 3\n  elif x == 2:\n    return x / 3\n  else:\n    return x - 3",
  "output_expr": "if y * 3 == 5:\n    return y * 3 * 3\n  elif y * 3 == 2:\n    return y * 3 / 3\n  else:\n    return y * 3 - 3",
  "function_name": "baz",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "y * 2",
  "variable": "y",
  "original_function": "def qux(x: int):\n  result = 1\n  for i in range(1, x + 1):\n    result *= i\n  return result",
  "output_expr": "result = 1\n  for i in range(1, y * 2 + 1):\n    result *= i\n  return result",
  "function_name": "qux",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "y + 1",
  "variable": "y",
  "original_function": "def quux(x: bool):\n  if x:\n    return 1\n  else:\n    return 0",
  "output_expr": "if y + 1:\n    return 1\n  else:\n    return 0",
  "function_name": "quux",
  "inputs": [
   "True",
   "False",
   "True"
  ]
 },
 {
  "expr": "x + 5",
  "variable": "x",
  "original_function": "def foo(a: int):\n  if a < 5:\n    return a + 2\n  else:\n    b = 1\n    return a + b + 1",
  "output_expr": "if x + 5 < 5:\n    return x + 5 + 2\n  else:\n    b = 1\n    return x + 5 + b + 1",
  "function_name": "foo",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "expr": "x * 2",
  "variable": "x",
  "original_function": "def bar(s: str):\n  if len(s) > 5:\n    return s + \"hello\"\n  else:\n    t = \"world\"\n    return s + t\n  return s",
  "output_expr": "if len(x * 2) > 5:\n    return x * 2 + \"hello\"\n  else:\n    t = \"world\"\n    return x * 2 + t\n  return x * 2",
  "function_name": "bar",
  "inputs": [
   "'abc'",
   "'abcdefgh'",
   "'helloworld'"
  ]
 },
 {
  "expr": "x - 1",
  "variable": "x",
  "original_function": "def baz(x: bool):\n  if x:\n    return True\n  else:\n    return False",
  "output_expr": "if x - 1:\n    return True\n  else:\n    return False",
  "function_name": "baz",
  "inputs": [
   "True",
   "False"
  ]
 },
 {
  "expr": "x + 2",
  "variable": "x",
  "original_function": "def foo(x: int):\n    y = x * 2\n    z = x + 1\n    if x > 5:\n        z = z + 10\n    else:\n        z = z + 1\n    return y + z",
  "output_expr": "y = x + 2 * 2\n    z = x + 2 + 1\n    if x + 2 > 5:\n        z = z + 10\n    else:\n        z = z + 1\n    return y + z",
  "function_name": "foo",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "y + 1",
  "variable": "y",
  "original_function": "def bar(y: int):\n    z = y + 2\n    x = z * 3\n    return x * y",
  "output_expr": "z = y + 1 + 2\n    x = z * 3\n    return x * (y + 1)",
  "function_name": "bar",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "x + 1",
  "variable": "x",
  "original_function": "def baz(x: int):\n    y = x * 3\n    if x > 1:\n        x = x + 5\n    else:\n        x = x - 2\n    return y + x",
  "output_expr": "y = x + 1 * 3\n    if x + 1 > 1:\n        x_1 = x + 1 + 5\n    else:\n        x_1 = x + 1 - 2\n    return y + x_1",
  "function_name": "baz",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "x - 2",
  "variable": "x",
  "original_function": "def qux(x: int):\n    x_1 = 0\n    y = x + 1\n    x_1 = x_1 + 1\n    while x_1 < 10:\n        x_1 = x_1 + 1\n        y = y * 2\n    return y * x",
  "output_expr": "x_1 = 0\n    y = x - 2 + 1\n    x_1 = x_1 + 1\n    while x_1 < 10:\n        x_1 = x_1 + 1\n        y = y * 2\n    return y * (x - 2)",
  "function_name": "qux",
  "inputs": [
   "5",
   "4",
   "1"
  ]
 },
 {
  "expr": "x * 2",
  "variable": "x",
  "original_function": "def quux(x: str):\n    y = ''\n    for i in range(len(x)):\n        y = y + x[i]\n        if i % 2 == 0:\n            x = x + x\n    return y + x",
  "output_expr": "y = ''\n    for i in range(len(x * 2)):\n        y = y + (x * 2)[i]\n        if i % 2 == 0:\n            x_1 = x * 2 + x * 2\n    return y + x_1",
  "function_name": "quux",
  "inputs": [
   "'hello'",
   "'world'",
   "'a'"
  ]
 },
 {
  "expr": "x + 1",
  "variable": "x",
  "original_function": "def get_sum(x: int):\n    total = x + 5\n    if total > 10:\n        total += 10\n    else:\n        total = 10\n    return total",
  "output_expr": "total = x + 1 + 5\n    if total > 10:\n        total += 10\n    else:\n        total = 10\n    return total",
  "function_name": "get_sum",
  "inputs": [
   "10",
   "11",
   "9",
   "20",
   "25"
  ]
 },
 {
  "expr": "y * 3",
  "variable": "y",
  "original_function": "def count_even(numbers: list[int]):\n    even_count = 0\n    for number in numbers:\n        if number % 2 == 0:\n            even_count += 1\n    return even_count",
  "output_expr": "even_count = 0\n    for number in y * 3:\n        if number % 2 == 0:\n            even_count += 1\n    return even_count",
  "function_name": "count_even",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[10, 20, 30, 40, 50]",
   "[2, 4, 6, 8, 10]",
   "[1, 3, 5, 7, 9]"
  ]
 }
]