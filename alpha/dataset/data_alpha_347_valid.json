[
 {
  "target_argument": "l",
  "change_to": "x",
  "original_function": "def g(l: int):\n    def helper(l: int):\n        return l + 1\n    if l == 0:\n        return 1\n    return helper(l - 1)",
  "changed_function": "def g(x: int):\n    def helper(l: int):\n        return l + 1\n    if x == 0:\n        return 1\n    return helper(x - 1)",
  "function_name": "g",
  "inputs": [
   "1",
   "2",
   "0",
   "3",
   "4"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def h(a: int):\n    b = 1\n    def inner(a: int):\n        return a + b\n    return inner(a)",
  "changed_function": "def h(b: int):\n    c = 1\n    def inner(a: int):\n        return a + c\n    return inner(b)",
  "function_name": "h",
  "inputs": [
   "5",
   "10",
   "1",
   "2",
   "3"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def k(x: int):\n    z = x + 1\n    def inner(x: int):\n        return x + z\n    return inner(x)",
  "changed_function": "def k(z: int):\n    y = z + 1\n    def inner(x: int):\n        return x + y\n    return inner(z)",
  "function_name": "k",
  "inputs": [
   "7",
   "8",
   "9",
   "10",
   "11"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "t",
  "original_function": "def m(y: int):\n    def inner(y: int):\n        t = y + 1\n        return t * y\n    return inner(y)",
  "changed_function": "def m(t: int):\n    def inner(y: int):\n        u = y + 1\n        return u * y\n    return inner(t)",
  "function_name": "m",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "s",
  "original_function": "def n(x: str):\n    def inner(x: str):\n        return x + \"hello\"\n    if x == \"world\":\n        return inner(x)\n    return x",
  "changed_function": "def n(s: str):\n    def inner(x: str):\n        return x + \"hello\"\n    if s == \"world\":\n        return inner(s)\n    return s",
  "function_name": "n",
  "inputs": [
   "\"world\"",
   "\"hello\"",
   "\"python\"",
   "\"test\"",
   "\"code\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "p",
  "original_function": "def o(n: int):\n    def helper(n: int):\n        return n * 2\n    if n == 0:\n        return 0\n    return helper(n - 1) + n",
  "changed_function": "def o(p: int):\n    def helper(n: int):\n        return n * 2\n    if p == 0:\n        return 0\n    return helper(p - 1) + p",
  "function_name": "o",
  "inputs": [
   "0",
   "1",
   "2",
   "3",
   "4"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "a",
  "original_function": "def p(b: int):\n    a = 1\n    def inner(b: int):\n        return a * b\n    return inner(b)",
  "changed_function": "def p(a: int):\n    c = 1\n    def inner(b: int):\n        return c * b\n    return inner(a)",
  "function_name": "p",
  "inputs": [
   "5",
   "10",
   "20",
   "15",
   "25"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "q",
  "original_function": "def q(f: int):\n    def inner(f: int):\n        return f * f\n    if f > 10:\n        return inner(f)\n    return f",
  "changed_function": "def q(q: int):\n    def inner(f: int):\n        return f * f\n    if q > 10:\n        return inner(q)\n    return q",
  "function_name": "q",
  "inputs": [
   "15",
   "10",
   "20",
   "5",
   "25"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "y",
  "original_function": "def r(m: int):\n    def inner(m: int):\n        return m * m\n    if m == 0:\n        return 0\n    return inner(m - 1) + m",
  "changed_function": "def r(y: int):\n    def inner(m: int):\n        return m * m\n    if y == 0:\n        return 0\n    return inner(y - 1) + y",
  "function_name": "r",
  "inputs": [
   "0",
   "1",
   "2",
   "3",
   "4"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def s(x: bool):\n    def inner(x: bool):\n        return not x\n    if x == True:\n        return inner(x)\n    return x",
  "changed_function": "def s(y: bool):\n    def inner(x: bool):\n        return not x\n    if y == True:\n        return inner(y)\n    return y",
  "function_name": "s",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "False"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def foo(x: int):\n  a = [1, 2, 3]\n  b = lambda z: x + z\n  return b(x)",
  "changed_function": "def foo(y: int):\n  a = [1, 2, 3]\n  b = lambda z: y + z\n  return b(y)",
  "function_name": "foo",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def bar(n: int):\n  def inner(n: int):\n    return n * 2\n  return inner(n)",
  "changed_function": "def bar(m: int):\n  def inner(n: int):\n    return n * 2\n  return inner(m)",
  "function_name": "bar",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def baz(a: str):\n  def inner(a: str):\n    return a + '!' + a\n  return inner(a)",
  "changed_function": "def baz(b: str):\n  def inner(a: str):\n    return a + '!' + a\n  return inner(b)",
  "function_name": "baz",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'language'"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "k",
  "original_function": "def qux(l: list):\n  return l[0] + l[1] + l[2]",
  "changed_function": "def qux(k: list):\n  return k[0] + k[1] + k[2]",
  "function_name": "qux",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "q",
  "original_function": "def quux(p: int):\n  if p > 10:\n    return p * 2\n  else:\n    return p + 10",
  "changed_function": "def quux(q: int):\n  if q > 10:\n    return q * 2\n  else:\n    return q + 10",
  "function_name": "quux",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def corge(s: str):\n  return s[::-1]",
  "changed_function": "def corge(t: str):\n  return t[::-1]",
  "function_name": "corge",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'language'"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "c",
  "original_function": "def grault(b: bool):\n  if b:\n    return 'True'\n  else:\n    return 'False'",
  "changed_function": "def grault(c: bool):\n  if c:\n    return 'True'\n  else:\n    return 'False'",
  "function_name": "grault",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "w",
  "original_function": "def garply(z: int):\n  return z ** 2",
  "changed_function": "def garply(w: int):\n  return w ** 2",
  "function_name": "garply",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "g",
  "original_function": "def waldo(f: int):\n  a = lambda x: x + f\n  return a(10)",
  "changed_function": "def waldo(g: int):\n  a = lambda x: x + g\n  return a(10)",
  "function_name": "waldo",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "k",
  "change_to": "l",
  "original_function": "def fred(k: int):\n  def inner(k: int):\n    return k + 10\n  return inner(k)",
  "changed_function": "def fred(l: int):\n  def inner(k: int):\n    return k + 10\n  return inner(l)",
  "function_name": "fred",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "k",
  "original_function": "def f(f: int):\n  g = lambda x: x + 1\n  h = lambda y: y * 2\n  return g(h(f))",
  "changed_function": "def f(k: int):\n  g = lambda x: x + 1\n  h = lambda y: y * 2\n  return g(h(k))",
  "function_name": "f",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "f",
  "original_function": "def g(x: int):\n  y = lambda x: x + 1\n  return y(x)",
  "changed_function": "def g(x: int):\n  y = lambda f: f + 1\n  return y(x)",
  "function_name": "g",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "b",
  "original_function": "def h(s: str):\n  t = lambda s: s.upper()\n  return t(s)",
  "changed_function": "def h(s: str):\n  t = lambda b: b.upper()\n  return t(s)",
  "function_name": "h",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"language\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "d",
  "original_function": "def i(x: bool):\n  if x:\n    y = lambda x: x\n    return y(x)\n  else:\n    return False",
  "changed_function": "def i(x: bool):\n  if x:\n    y = lambda d: d\n    return y(x)\n  else:\n    return False",
  "function_name": "i",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def j(s: str):\n  t = lambda s: s.lower()\n  u = lambda s: s.capitalize()\n  return u(t(s))",
  "changed_function": "def j(s: str):\n  t = lambda a: a.lower()\n  u = lambda s: s.capitalize()\n  return u(t(s))",
  "function_name": "j",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"language\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "m",
  "original_function": "def k(x: int):\n  y = lambda x: x + 1\n  z = lambda x: x * 2\n  return z(y(x))",
  "changed_function": "def k(x: int):\n  y = lambda m: m + 1\n  z = lambda m: m * 2\n  return z(y(x))",
  "function_name": "k",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "t",
  "original_function": "def l(x: list):\n  y = lambda x: [i for i in x if i > 5]\n  return y(x)",
  "changed_function": "def l(x: list):\n  y = lambda t: [i for i in t if i > 5]\n  return y(x)",
  "function_name": "l",
  "inputs": [
   "[1, 2, 3, 4, 5, 6, 7, 8]",
   "[9, 10, 11, 12]",
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "m",
  "original_function": "def m(x: int):\n  if x % 2 == 0:\n    y = lambda x: x + 1\n    return y(x)\n  else:\n    z = lambda x: x * 2\n    return z(x)",
  "changed_function": "def m(x: int):\n  if x % 2 == 0:\n    y = lambda m: m + 1\n    return y(x)\n  else:\n    z = lambda m: m * 2\n    return z(x)",
  "function_name": "m",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "r",
  "original_function": "def n(x: str):\n  y = lambda x: x.replace(\"a\", \"b\")\n  return y(x)",
  "changed_function": "def n(x: str):\n  y = lambda r: r.replace(\"a\", \"b\")\n  return y(x)",
  "function_name": "n",
  "inputs": [
   "\"apple\"",
   "\"banana\"",
   "\"orange\"",
   "\"grape\"",
   "\"watermelon\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "g",
  "original_function": "def o(x: int):\n  if x > 5:\n    y = lambda x: x - 5\n    return y(x)\n  else:\n    z = lambda x: x * 3\n    return z(x)",
  "changed_function": "def o(x: int):\n  if x > 5:\n    y = lambda g: g - 5\n    return y(x)\n  else:\n    z = lambda g: g * 3\n    return z(x)",
  "function_name": "o",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "x",
  "original_function": "def foo(b: int):\n  a = b + 1\n  return (lambda b: a + b)(1)",
  "changed_function": "def foo(x: int):\n  a = x + 1\n  return (lambda b: a + b)(1)",
  "function_name": "foo",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def bar(x: int):\n  y = x * 2\n  return (lambda x: y + x)(1)",
  "changed_function": "def bar(a: int):\n  y = a * 2\n  return (lambda x: y + x)(1)",
  "function_name": "bar",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def baz(x: int):\n  a = 1\n  return (lambda x: a * x)(x)",
  "changed_function": "def baz(a: int):\n  b = 1\n  return (lambda x: b * x)(a)",
  "function_name": "baz",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "z",
  "original_function": "def qux(n: int):\n  a = 1\n  b = n + 1\n  return (lambda n: a * n + b)(n)",
  "changed_function": "def qux(z: int):\n  a = 1\n  b = z + 1\n  return (lambda n: a * n + b)(z)",
  "function_name": "qux",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "b",
  "original_function": "def quux(x: int):\n  a = x + 1\n  return (lambda x: x + a)(x)",
  "changed_function": "def quux(b: int):\n  a = b + 1\n  return (lambda x: x + a)(b)",
  "function_name": "quux",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def corge(x: int):\n  a = x\n  return (lambda x: a * x)(x)",
  "changed_function": "def corge(a: int):\n  b = a\n  return (lambda x: b * x)(a)",
  "function_name": "corge",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "c",
  "original_function": "def grault(a: int):\n  return (lambda a: a * a)(a)",
  "changed_function": "def grault(c: int):\n  return (lambda a: a * a)(c)",
  "function_name": "grault",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "b",
  "original_function": "def garply(x: int):\n  y = x + 1\n  return (lambda x: y + x)(x)",
  "changed_function": "def garply(b: int):\n  y = b + 1\n  return (lambda x: y + x)(b)",
  "function_name": "garply",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "c",
  "original_function": "def waldo(x: int):\n  a = 1\n  return (lambda x: a + x)(x)",
  "changed_function": "def waldo(c: int):\n  a = 1\n  return (lambda x: a + x)(c)",
  "function_name": "waldo",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def fred(a: int):\n  return (lambda a: a + 1)(a)",
  "changed_function": "def fred(x: int):\n  return (lambda a: a + 1)(x)",
  "function_name": "fred",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "t",
  "original_function": "def count_words(text: str):\n  return len(text.split())",
  "changed_function": "def count_words(t: str):\n  return len(t.split())",
  "function_name": "count_words",
  "inputs": [
   "'Hello, world!'",
   "'This is a test.'",
   "'One word.'",
   "'   '",
   "''"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "lst",
  "original_function": "def find_max(l: list):\n  if len(l) == 0:\n    return None\n  else:\n    max_val = l[0]\n    for x in l:\n      if x > max_val:\n        max_val = x\n    return max_val",
  "changed_function": "def find_max(lst: list):\n  if len(lst) == 0:\n    return None\n  else:\n    max_val = lst[0]\n    for x in lst:\n      if x > max_val:\n        max_val = x\n    return max_val",
  "function_name": "find_max",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[]",
   "[1, 1, 1, 1]",
   "[10, 20, 30, 40]"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "numbers",
  "original_function": "def is_sorted(nums: list):\n  for i in range(len(nums) - 1):\n    if nums[i] > nums[i + 1]:\n      return False\n  return True",
  "changed_function": "def is_sorted(numbers: list):\n  for i in range(len(numbers) - 1):\n    if numbers[i] > numbers[i + 1]:\n      return False\n  return True",
  "function_name": "is_sorted",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[1, 1, 1, 1]",
   "[10, 20, 30, 40]",
   "[1, 3, 2, 4]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "str",
  "original_function": "def reverse_string(s: str):\n  return s[::-1]",
  "changed_function": "def reverse_string(str: str):\n  return str[::-1]",
  "function_name": "reverse_string",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'12345'",
   "'abcde'"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "array",
  "original_function": "def find_missing_number(arr: list):\n  n = len(arr) + 1\n  expected_sum = n * (n + 1) // 2\n  actual_sum = sum(arr)\n  return expected_sum - actual_sum",
  "changed_function": "def find_missing_number(array: list):\n  n = len(array) + 1\n  expected_sum = n * (n + 1) // 2\n  actual_sum = sum(array)\n  return expected_sum - actual_sum",
  "function_name": "find_missing_number",
  "inputs": [
   "[1, 2, 4, 5, 6]",
   "[1, 2, 3, 5, 6]",
   "[1, 3, 4, 5]",
   "[2, 3, 4, 5, 6]",
   "[1, 2, 0, 4, 5]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def sum_even_numbers(a: list):\n  sum = 0\n  for i in a:\n    if i % 2 == 0:\n      sum += i\n  return sum",
  "changed_function": "def sum_even_numbers(x: list):\n  sum = 0\n  for i in x:\n    if i % 2 == 0:\n      sum += i\n  return sum",
  "function_name": "sum_even_numbers",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[2, 4, 6, 8, 10]",
   "[1, 3, 5, 7, 9]",
   "[10, 20, 30, 40, 50]",
   "[0, 2, 4, 6, 8]"
  ]
 },
 {
  "target_argument": "string",
  "change_to": "text",
  "original_function": "def is_palindrome(string: str):\n  return string == string[::-1]",
  "changed_function": "def is_palindrome(text: str):\n  return text == text[::-1]",
  "function_name": "is_palindrome",
  "inputs": [
   "'racecar'",
   "'level'",
   "'madam'",
   "'hello'",
   "'world'"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "str",
  "original_function": "def remove_duplicates(s: list):\n  return list(set(s))",
  "changed_function": "def remove_duplicates(str: list):\n  return list(set(str))",
  "function_name": "remove_duplicates",
  "inputs": [
   "[1, 2, 2, 3, 4, 4, 5]",
   "[1, 1, 1, 2, 2, 2]",
   "[1, 2, 3, 4, 5]",
   "[1, 1, 1, 1, 1]",
   "[1, 2, 3, 4, 4, 3, 2, 1]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "d",
  "original_function": "def my_func(s: str):\n  b = s\n  if s == \"hello\":\n    return True\n  else:\n    return False\n  c = s\n  return b",
  "changed_function": "def my_func(d: str):\n  b = d\n  if d == \"hello\":\n    return True\n  else:\n    return False\n  c = d\n  return b",
  "function_name": "my_func",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"goodbye\"",
   "\"test\"",
   "\"123\""
  ]
 },
 {
  "target_argument": "k",
  "change_to": "s",
  "original_function": "def my_func(k: int):\n  x = [1, 2, 3]\n  for s in x:\n    if s == k:\n      return True\n  return False",
  "changed_function": "def my_func(s: int):\n  x = [1, 2, 3]\n  for s_1 in x:\n    if s_1 == s:\n      return True\n  return False",
  "function_name": "my_func",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "k",
  "original_function": "def my_func(x: int):\n  y = [1, 2, 3]\n  z = [4, 5, 6]\n  for k in y:\n    if k == x:\n      return True\n  return False",
  "changed_function": "def my_func(k: int):\n  y = [1, 2, 3]\n  z = [4, 5, 6]\n  for k_1 in y:\n    if k_1 == k:\n      return True\n  return False",
  "function_name": "my_func",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "i",
  "change_to": "j",
  "original_function": "def my_func(i: bool):\n  j = i\n  if i:\n    return True\n  return False",
  "changed_function": "def my_func(j: bool):\n  j_1 = j\n  if j:\n    return True\n  return False",
  "function_name": "my_func",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "a",
  "original_function": "def my_func(y: int):\n  a = 1\n  b = lambda x: x + a\n  return b(y)",
  "changed_function": "def my_func(a: int):\n  a_1 = 1\n  b = lambda x: x + a_1\n  return b(a)",
  "function_name": "my_func",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "c",
  "original_function": "def my_func(b: int):\n  a = b * 2\n  c = [1, 2, 3]\n  return a",
  "changed_function": "def my_func(c: int):\n  a = c * 2\n  c_1 = [1, 2, 3]\n  return a",
  "function_name": "my_func",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "j",
  "change_to": "a",
  "original_function": "def my_func(j: str):\n  a = j + \"world\"\n  return a",
  "changed_function": "def my_func(a: str):\n  a_1 = a + \"world\"\n  return a_1",
  "function_name": "my_func",
  "inputs": [
   "\"hello\"",
   "\"goodbye\"",
   "\"test\"",
   "\"123\"",
   "\"abc\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "y",
  "original_function": "def my_func(a: int):\n  x = a\n  b = [x, a, 1]\n  return b",
  "changed_function": "def my_func(y: int):\n  x = y\n  b = [x, y, 1]\n  return b",
  "function_name": "my_func",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "s",
  "original_function": "def my_func(b: bool):\n  a = b\n  s = [a, b, not b]\n  return s",
  "changed_function": "def my_func(s: bool):\n  a = s\n  s_1 = [a, s, not s]\n  return s_1",
  "function_name": "my_func",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "k",
  "original_function": "def function1(f: int):\n    f = 1\n    a = lambda f: f + 2\n    f = (lambda f: f * 10)(f)\n    return a(f) ",
  "changed_function": "def function1(k: int):\n    k = 1\n    a = lambda f: f + 2\n    k = (lambda f: f * 10)(k)\n    return a(k) ",
  "function_name": "function1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "a",
  "original_function": "def function2(f: int):\n    f = [1, 2, 3]\n    a = 1\n    return (lambda f: f * 10)(f[a]) ",
  "changed_function": "def function2(a: int):\n    a = [1, 2, 3]\n    b = 1\n    return (lambda f: f * 10)(a[b]) ",
  "function_name": "function2",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "b",
  "original_function": "def function3(s: str):\n    s = (lambda s: s + 'a')(s)\n    return (lambda s: s[0])(s) ",
  "changed_function": "def function3(b: str):\n    b = (lambda s: s + 'a')(b)\n    return (lambda s: s[0])(b) ",
  "function_name": "function3",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'coding'",
   "'example'"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "x",
  "original_function": "def function4(f: int):\n    f = (lambda f: f + 1)(f)\n    f = (lambda f: f * 10)(f)\n    return (lambda f: f - 1)(f) ",
  "changed_function": "def function4(x: int):\n    x = (lambda f: f + 1)(x)\n    x = (lambda f: f * 10)(x)\n    return (lambda f: f - 1)(x) ",
  "function_name": "function4",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def function5(s: str):\n    s = s + 'a'\n    s = (lambda s: s * 2)(s)\n    s = (lambda s: s[:2])(s)\n    return s ",
  "changed_function": "def function5(t: str):\n    t = t + 'a'\n    t = (lambda s: s * 2)(t)\n    t = (lambda s: s[:2])(t)\n    return t ",
  "function_name": "function5",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'coding'",
   "'example'"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "s",
  "original_function": "def function6(f: int):\n    s = (lambda f: f + 1)(f)\n    f = (lambda f: f * 2)(f)\n    f = (lambda f: f - s)(f)\n    return f ",
  "changed_function": "def function6(s: int):\n    t = (lambda f: f + 1)(s)\n    s = (lambda f: f * 2)(s)\n    s = (lambda f: f - t)(s)\n    return s ",
  "function_name": "function6",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "a",
  "original_function": "def function7(f: int):\n    a = lambda f: f + 2\n    f = 10\n    return a(f) ",
  "changed_function": "def function7(a: int):\n    b = lambda f: f + 2\n    a = 10\n    return b(a) ",
  "function_name": "function7",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "b",
  "original_function": "def function8(f: int):\n    f = (lambda f: f + 1)(f)\n    f = (lambda f: f * 2)(f)\n    f = (lambda f: f / 2)(f)\n    f = (lambda f: f - 1)(f)\n    return f ",
  "changed_function": "def function8(b: int):\n    b = (lambda f: f + 1)(b)\n    b = (lambda f: f * 2)(b)\n    b = (lambda f: f / 2)(b)\n    b = (lambda f: f - 1)(b)\n    return b ",
  "function_name": "function8",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "a",
  "original_function": "def function9(f: int):\n    f = 10\n    a = (lambda f: f * 10)(f)\n    return a ",
  "changed_function": "def function9(a: int):\n    a = 10\n    b = (lambda f: f * 10)(a)\n    return b ",
  "function_name": "function9",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "b",
  "original_function": "def function10(f: bool):\n    f = (lambda f: f == True)(f)\n    f = (lambda f: not f)(f)\n    return f ",
  "changed_function": "def function10(b: bool):\n    b = (lambda f: f == True)(b)\n    b = (lambda f: not f)(b)\n    return b ",
  "function_name": "function10",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def find_max_in_list(x: list):\n  max_value = x[0]\n  for i in range(1, len(x)):\n    if x[i] > max_value:\n      max_value = x[i]\n  return max_value",
  "changed_function": "def find_max_in_list(y: list):\n  max_value = y[0]\n  for i in range(1, len(y)):\n    if y[i] > max_value:\n      max_value = y[i]\n  return max_value",
  "function_name": "find_max_in_list",
  "inputs": [
   "[-1, 0, 2]",
   "[1, 2, 3, 4]",
   "[3, 1, 4, 1, 5, 9, 2]",
   "[2, 3, 4, 1, 5]",
   "[1, 1, 1, 1, 1]"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "x",
  "original_function": "def is_sorted(arr: list):\n  for i in range(1, len(arr)):\n    if arr[i] < arr[i - 1]:\n      return False\n  return True",
  "changed_function": "def is_sorted(x: list):\n  for i in range(1, len(x)):\n    if x[i] < x[i - 1]:\n      return False\n  return True",
  "function_name": "is_sorted",
  "inputs": [
   "[1, 2, 3, 4]",
   "[4, 3, 2, 1]",
   "[1, 2, 3, 2]",
   "[1, 3, 2, 4]",
   "[1, 1, 1, 1]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "n",
  "original_function": "def count_vowels(s: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for char in s:\n    if char in vowels:\n      count += 1\n  return count",
  "changed_function": "def count_vowels(n: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for char in n:\n    if char in vowels:\n      count += 1\n  return count",
  "function_name": "count_vowels",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"aeiou\"",
   "\"banana\"",
   "\"programming\""
  ]
 },
 {
  "target_argument": "str",
  "change_to": "input_string",
  "original_function": "def reverse_string(str: str):\n  return str[::-1]",
  "changed_function": "def reverse_string(input_string: str):\n  return input_string[::-1]",
  "function_name": "reverse_string",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"coding\"",
   "\"reverse\""
  ]
 },
 {
  "target_argument": "text",
  "change_to": "s",
  "original_function": "def count_words(text: str):\n  words = text.split()\n  return len(words)",
  "changed_function": "def count_words(s: str):\n  words = s.split()\n  return len(words)",
  "function_name": "count_words",
  "inputs": [
   "\"This is a test sentence.\"",
   "\"Hello world!\"",
   "\"1 2 3 4 5\"",
   "\"Python is fun\"",
   "\"Quick brown fox jumps over the lazy dog\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def is_prime(n: int):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True",
  "changed_function": "def is_prime(i: int):\n  if i <= 1:\n    return False\n  for j in range(2, int(i**0.5) + 1):\n    if i % j == 0:\n      return False\n  return True",
  "function_name": "is_prime",
  "inputs": [
   "7",
   "10",
   "11",
   "2",
   "17"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "arr",
  "original_function": "def sum_of_squares(nums: list):\n  sum = 0\n  for num in nums:\n    sum += num * num\n  return sum",
  "changed_function": "def sum_of_squares(arr: list):\n  sum = 0\n  for num in arr:\n    sum += num * num\n  return sum",
  "function_name": "sum_of_squares",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[1, 1, 1]",
   "[2, 2, 2]",
   "[10, 20, 30]"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "string",
  "original_function": "def remove_duplicates(text: str):\n  result = ''\n  for char in text:\n    if char not in result:\n      result += char\n  return result",
  "changed_function": "def remove_duplicates(string: str):\n  result = ''\n  for char in string:\n    if char not in result:\n      result += char\n  return result",
  "function_name": "remove_duplicates",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"aabbcc\"",
   "\"banana\"",
   "\"programming\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def is_woodall(x: int):\n\tif (x % 2 == 0):\n\t\treturn False\n\tif (x == 1):\n\t\treturn True\n\tx = x + 1\n\tp = 0\n\twhile (x % 2 == 0):\n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x):\n\t\t\treturn True\n\treturn False",
  "changed_function": "def is_woodall(a: int):\n\tif (a % 2 == 0):\n\t\treturn False\n\tif (a == 1):\n\t\treturn True\n\ta = a + 1\n\tp = 0\n\twhile (a % 2 == 0):\n\t\ta = a/2\n\t\tp = p + 1\n\t\tif (p == a):\n\t\t\treturn True\n\treturn False",
  "function_name": "is_woodall",
  "inputs": [
   "1",
   "2",
   "7",
   "15",
   "23"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "c",
  "original_function": "def f1(a: int):\n\treturn (lambda a: a * 2)(a + 1)",
  "changed_function": "def f1(c: int):\n\treturn (lambda a: a * 2)(c + 1)",
  "function_name": "f1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "a",
  "original_function": "def f3(y: int):\n\treturn (lambda y: (lambda x: x + y)(y + 1))(y * 2)",
  "changed_function": "def f3(y: int):\n\treturn (lambda a: (lambda x: x + a)(a + 1))(y * 2)",
  "function_name": "f3",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def f5(x: str):\n\treturn (lambda x: x.upper() if x.islower() else x.lower())(x.capitalize())",
  "changed_function": "def f5(y: str):\n\treturn (lambda x: x.upper() if x.islower() else x.lower())(y.capitalize())",
  "function_name": "f5",
  "inputs": [
   "\"hello\"",
   "\"WORLD\"",
   "\"123\"",
   "\"aBc\"",
   "\"dEf\""
  ]
 },
 {
  "target_argument": "b",
  "change_to": "c",
  "original_function": "def f6(b: int):\n\treturn (lambda b: b * 2)(b + 1)",
  "changed_function": "def f6(c: int):\n\treturn (lambda b: b * 2)(c + 1)",
  "function_name": "f6",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def f7(x: int):\n\treturn (lambda x: x * 2)(x + 1)",
  "changed_function": "def f7(a: int):\n\treturn (lambda x: x * 2)(a + 1)",
  "function_name": "f7",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def f9(a: list):\n\treturn (lambda a: len(a) if len(a) > 2 else 0)(a)",
  "changed_function": "def f9(b: list):\n\treturn (lambda a: len(a) if len(a) > 2 else 0)(b)",
  "function_name": "f9",
  "inputs": [
   "[1, 2]",
   "[1, 2, 3]",
   "[1, 2, 3, 4]",
   "[1]",
   "[1, 2, 3, 4, 5]"
  ]
 },
 {
  "target_argument": "k",
  "change_to": "l",
  "original_function": "def func1(k: int):\n  k1 = 10\n  k2 = 20\n  k3 = lambda k: k + k1\n  return k3(k)",
  "changed_function": "def func1(l: int):\n  k1 = 10\n  k2 = 20\n  k3 = lambda k: k + k1\n  return k3(l)",
  "function_name": "func1",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "x",
  "original_function": "def func2(y: str):\n  y1 = 'hello'\n  y2 = 'world'\n  return (lambda y: y + y1 + y2)(y)",
  "changed_function": "def func2(x: str):\n  y1 = 'hello'\n  y2 = 'world'\n  return (lambda y: y + y1 + y2)(x)",
  "function_name": "func2",
  "inputs": [
   "'python'",
   "'javascript'",
   "'ruby'",
   "'c++'",
   "'java'"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "x",
  "original_function": "def func3(m: bool):\n  if m:\n    return True\n  else:\n    return False",
  "changed_function": "def func3(x: bool):\n  if x:\n    return True\n  else:\n    return False",
  "function_name": "func3",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "j",
  "change_to": "x",
  "original_function": "def func4(j: int):\n  j1 = 10\n  return (lambda j: j + j1)(j)",
  "changed_function": "def func4(x: int):\n  j1 = 10\n  return (lambda j: j + j1)(x)",
  "function_name": "func4",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "l",
  "original_function": "def func5(n: int):\n  n1 = 10\n  return n * (lambda n: n + n1)(n)",
  "changed_function": "def func5(l: int):\n  n1 = 10\n  return l * (lambda n: n + n1)(l)",
  "function_name": "func5",
  "inputs": [
   "10",
   "20",
   "30",
   "40",
   "50"
  ]
 },
 {
  "target_argument": "t",
  "change_to": "u",
  "original_function": "def func6(t: list):\n  t1 = [1,2,3]\n  return t + t1",
  "changed_function": "def func6(u: list):\n  t1 = [1,2,3]\n  return u + t1",
  "function_name": "func6",
  "inputs": [
   "[1, 2]",
   "[3, 4, 5]",
   "[6, 7, 8]",
   "[9, 10, 11]",
   "[12, 13, 14]"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "x",
  "original_function": "def func7(z: str):\n  z1 = 'abc'\n  z2 = 'def'\n  return z + z1 + z2",
  "changed_function": "def func7(x: str):\n  z1 = 'abc'\n  z2 = 'def'\n  return x + z1 + z2",
  "function_name": "func7",
  "inputs": [
   "'ghi'",
   "'jkl'",
   "'mno'",
   "'pqr'",
   "'stu'"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def func8(a: int):\n  a1 = 1\n  a2 = 2\n  return (lambda a: a + a1 + a2)(a)",
  "changed_function": "def func8(x: int):\n  a1 = 1\n  a2 = 2\n  return (lambda a: a + a1 + a2)(x)",
  "function_name": "func8",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "x",
  "original_function": "def func9(b: bool):\n  b1 = True\n  return (lambda b: b and b1)(b)",
  "changed_function": "def func9(x: bool):\n  b1 = True\n  return (lambda b: b and b1)(x)",
  "function_name": "func9",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "c",
  "change_to": "t",
  "original_function": "def func10(c: str):\n  c1 = 'hello'\n  c2 = 'world'\n  return c + c1 + c2",
  "changed_function": "def func10(t: str):\n  c1 = 'hello'\n  c2 = 'world'\n  return t + c1 + c2",
  "function_name": "func10",
  "inputs": [
   "'python'",
   "'javascript'",
   "'ruby'",
   "'c++'",
   "'java'"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def fun1(x: int):\n    y = x + 1\n    z = lambda x: x * 2\n    return z(x + y)",
  "changed_function": "def fun1(a: int):\n    y = a + 1\n    z = lambda x: x * 2\n    return z(a + y)",
  "function_name": "fun1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def fun2(a: int):\n    b = a * 2\n    c = lambda a: a + 1\n    return c(b)",
  "changed_function": "def fun2(x: int):\n    b = x * 2\n    c = lambda a: a + 1\n    return c(b)",
  "function_name": "fun2",
  "inputs": [
   "10",
   "20",
   "30",
   "40",
   "50"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "b",
  "original_function": "def fun3(x: int):\n    y = x + 1\n    z = lambda x: x * 2\n    return z(y) + x",
  "changed_function": "def fun3(b: int):\n    y = b + 1\n    z = lambda x: x * 2\n    return z(y) + b",
  "function_name": "fun3",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "z",
  "original_function": "def fun4(y: int):\n    x = y * 2\n    z = lambda y: y + 1\n    return x + z(y)",
  "changed_function": "def fun4(z: int):\n    x = z * 2\n    y = lambda a: a + 1\n    return x + y(z)",
  "function_name": "fun4",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "a",
  "original_function": "def fun5(y: int):\n    x = y * 2\n    z = lambda y: y + 1\n    return z(x)",
  "changed_function": "def fun5(a: int):\n    x = a * 2\n    z = lambda b: b + 1\n    return z(x)",
  "function_name": "fun5",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "x",
  "original_function": "def fun6(y: int):\n    x = y * 2\n    z = lambda y: y + 1\n    return z(y)",
  "changed_function": "def fun6(x: int):\n    y = x * 2\n    z = lambda a: a + 1\n    return z(x)",
  "function_name": "fun6",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "c",
  "original_function": "def fun7(a: int):\n    b = a * 2\n    c = lambda a: a + 1\n    return c(b)",
  "changed_function": "def fun7(c: int):\n    b = c * 2\n    a = lambda d: d + 1\n    return a(b)",
  "function_name": "fun7",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def fun8(a: bool):\n    if a:\n        b = True\n        c = lambda a: a and True\n        return c(b)\n    else:\n        return False",
  "changed_function": "def fun8(x: bool):\n    if x:\n        b = True\n        c = lambda a: a and True\n        return c(b)\n    else:\n        return False",
  "function_name": "fun8",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "a",
  "original_function": "def fun9(b: int):\n    a = [b, b * 2]\n    c = lambda b: b + 1\n    return c(a[0])",
  "changed_function": "def fun9(a: int):\n    b = [a, a * 2]\n    c = lambda d: d + 1\n    return c(b[0])",
  "function_name": "fun9",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "b",
  "original_function": "def fun10(x: int):\n    y = x + 1\n    z = lambda x: x * 2\n    return z(y)",
  "changed_function": "def fun10(b: int):\n    y = b + 1\n    z = lambda a: a * 2\n    return z(y)",
  "function_name": "fun10",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "k",
  "original_function": "def get_strings(s: list[str]):\n    filtered_list = []\n    for string in s:\n        if len(string) > 5:\n            filtered_list.append(string)\n    return filtered_list",
  "changed_function": "def get_strings(k: list[str]):\n    filtered_list = []\n    for string in k:\n        if len(string) > 5:\n            filtered_list.append(string)\n    return filtered_list",
  "function_name": "get_strings",
  "inputs": [
   "['apple', 'banana', 'cherry', 'date', 'elderberry']",
   "['a', 'bb', 'ccc', 'dddd', 'eeeee']",
   "['short', 'longstring', 'anotherlongone', 'short2']",
   "['reallyreallylongstring', 'short', 'long', 'verylong']",
   "['hello', 'world', 'goodbye', 'universe']"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def sort_strings_by_length(s: list[str]):\n    return sorted(s, key=lambda s: len(s))\n",
  "changed_function": "def sort_strings_by_length(a: list[str]):\n    return sorted(a, key=lambda s: len(s))\n",
  "function_name": "sort_strings_by_length",
  "inputs": [
   "['apple', 'banana', 'cherry', 'date', 'elderberry']",
   "['a', 'bb', 'ccc', 'dddd', 'eeeee']",
   "['short', 'longstring', 'anotherlongone', 'short2']",
   "['reallyreallylongstring', 'short', 'long', 'verylong']",
   "['hello', 'world', 'goodbye', 'universe']"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def find_longest_word(x: list[str]):\n    longest_word = ''\n    for word in x:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word",
  "changed_function": "def find_longest_word(n: list[str]):\n    longest_word = ''\n    for word in n:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word",
  "function_name": "find_longest_word",
  "inputs": [
   "['apple', 'banana', 'cherry', 'date', 'elderberry']",
   "['a', 'bb', 'ccc', 'dddd', 'eeeee']",
   "['short', 'longstring', 'anotherlongone', 'short2']",
   "['reallyreallylongstring', 'short', 'long', 'verylong']",
   "['hello', 'world', 'goodbye', 'universe']"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "x",
  "original_function": "def count_even_numbers(l: list[int]):\n    count = 0\n    for number in l:\n        if number % 2 == 0:\n            count += 1\n    return count",
  "changed_function": "def count_even_numbers(x: list[int]):\n    count = 0\n    for number in x:\n        if number % 2 == 0:\n            count += 1\n    return count",
  "function_name": "count_even_numbers",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[6, 7, 8, 9, 10]",
   "[11, 12, 13, 14, 15]",
   "[20, 21, 22, 23, 24]",
   "[1, 3, 5, 7, 9]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def sum_of_digits(n: int):\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum",
  "changed_function": "def sum_of_digits(m: int):\n    sum = 0\n    while m > 0:\n        digit = m % 10\n        sum += digit\n        m //= 10\n    return sum",
  "function_name": "sum_of_digits",
  "inputs": [
   "123",
   "456",
   "789",
   "101",
   "999"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "k",
  "original_function": "def find_first_negative(x: list[int]):\n    for i in x:\n        if i < 0:\n            return i\n    return None",
  "changed_function": "def find_first_negative(k: list[int]):\n    for i in k:\n        if i < 0:\n            return i\n    return None",
  "function_name": "find_first_negative",
  "inputs": [
   "[1, 2, -3, 4, 5]",
   "[6, -7, 8, 9, 10]",
   "[11, 12, 13, 14, 15]",
   "[20, 21, 22, 23, -24]",
   "[1, 3, 5, 7, 9]"
  ]
 },
 {
  "target_argument": "list1",
  "change_to": "l",
  "original_function": "def maximum_Sum(list1: list[list[int]]):\n    maxi = -100000\n    for x in list1:\n        sum = 0\n        for y in x:\n            sum += y\n        maxi = max(sum, maxi)\n    return maxi",
  "changed_function": "def maximum_Sum(l: list[list[int]]):\n    maxi = -100000\n    for x in l:\n        sum = 0\n        for y in x:\n            sum += y\n        maxi = max(sum, maxi)\n    return maxi",
  "function_name": "maximum_Sum",
  "inputs": [
   "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
   "[[1, 2], [3, 4], [5, 6]]",
   "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]",
   "[[1, 1, 1], [2, 2, 2], [3, 3, 3]]",
   "[[1, 2, 3], [4, 5], [6, 7]]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def is_prime(n: int):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
  "changed_function": "def is_prime(i: int):\n    if i <= 1:\n        return False\n    for j in range(2, int(i**0.5) + 1):\n        if i % j == 0:\n            return False\n    return True",
  "function_name": "is_prime",
  "inputs": [
   "2",
   "3",
   "4",
   "5",
   "7"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "d",
  "original_function": "def func2(a: bool):\n    b = a\n    c = a\n    if a:\n        return (lambda a: (a or a) and c)(a)\n    else:\n        return (lambda a: (a or a) and b)(a)",
  "changed_function": "def func2(d: bool):\n    b = d\n    c = d\n    if d:\n        return (lambda e: (e or e) and c)(d)\n    else:\n        return (lambda e: (e or e) and b)(d)",
  "function_name": "func2",
  "inputs": [
   "True",
   "False",
   "False",
   "True",
   "False"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func3(x: int):\n    if x > 0:\n        return (lambda x: x + x)(x)\n    else:\n        return (lambda x: x - x)(x)",
  "changed_function": "def func3(y: int):\n    if y > 0:\n        return (lambda x: x + x)(y)\n    else:\n        return (lambda x: x - x)(y)",
  "function_name": "func3",
  "inputs": [
   "10",
   "1",
   "0",
   "-1",
   "-2"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "c",
  "original_function": "def func4(x: str):\n    y = x\n    if x == \"hello\":\n        return (lambda x: x + x)(x)\n    else:\n        return (lambda x: x[0] + x[1])(x)",
  "changed_function": "def func4(c: str):\n    y = c\n    if c == \"hello\":\n        return (lambda x: x + x)(c)\n    else:\n        return (lambda x: x[0] + x[1])(c)",
  "function_name": "func4",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"abc\"",
   "\"123\"",
   "\"test\""
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def func5(s: str):\n    l = s\n    m = s\n    if s == \"hello\":\n        return (lambda s: s + s)(s)\n    else:\n        return (lambda s: s + s + s)(s)",
  "changed_function": "def func5(a: str):\n    l = a\n    m = a\n    if a == \"hello\":\n        return (lambda s: s + s)(a)\n    else:\n        return (lambda s: s + s + s)(a)",
  "function_name": "func5",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"abc\"",
   "\"123\"",
   "\"test\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def func6(a: int):\n    b = a\n    return (lambda a: a + a)(a)",
  "changed_function": "def func6(x: int):\n    b = x\n    return (lambda a: a + a)(x)",
  "function_name": "func6",
  "inputs": [
   "10",
   "5",
   "1",
   "20",
   "15"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "t",
  "original_function": "def func7(z: int):\n    x = z\n    y = x\n    return (lambda z: z * 2)(z + x + y)",
  "changed_function": "def func7(t: int):\n    x = t\n    y = x\n    return (lambda z: z * 2)(t + x + y)",
  "function_name": "func7",
  "inputs": [
   "10",
   "1",
   "20",
   "0",
   "-5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "b",
  "original_function": "def func8(n: int):\n    l = []\n    for i in range(n):\n        l.append(i)\n    return (lambda n: n * 2)(len(l))",
  "changed_function": "def func8(b: int):\n    l = []\n    for i in range(b):\n        l.append(i)\n    return (lambda n: n * 2)(len(l))",
  "function_name": "func8",
  "inputs": [
   "5",
   "10",
   "2",
   "3",
   "1"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "t",
  "original_function": "def func9(a: list):\n    x = a\n    if len(a) > 0:\n        return (lambda a: a[0])(x)\n    else:\n        return (lambda a: a)(x)",
  "changed_function": "def func9(t: list):\n    x = t\n    if len(t) > 0:\n        return (lambda a: a[0])(x)\n    else:\n        return (lambda a: a)(x)",
  "function_name": "func9",
  "inputs": [
   "[1,2,3]",
   "[]",
   "[5,6,7]",
   "[1]",
   "[4]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def func10(a: int):\n    x = a\n    y = a\n    return (lambda a: a * 2)(a + x + y)",
  "changed_function": "def func10(b: int):\n    x = b\n    y = b\n    return (lambda a: a * 2)(b + x + y)",
  "function_name": "func10",
  "inputs": [
   "1",
   "2",
   "10",
   "5",
   "20"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def foo(x: int):\n  y = 10\n  if x > 5:\n    z = x * 2\n    return z\n  else:\n    z = 2 * x\n    return z\n",
  "changed_function": "def foo(z: int):\n  y = 10\n  if z > 5:\n    a = z * 2\n    return a\n  else:\n    a = 2 * z\n    return a\n",
  "function_name": "foo",
  "inputs": [
   "1",
   "5",
   "10",
   "15",
   "20"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def bar(a: str):\n  b = len(a)\n  c = [a, b]\n  if b > 5:\n    a = a + a\n    return a\n  else:\n    return a\n",
  "changed_function": "def bar(n: str):\n  b = len(n)\n  c = [n, b]\n  if b > 5:\n    n = n + n\n    return n\n  else:\n    return n\n",
  "function_name": "bar",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'language'"
  ]
 },
 {
  "target_argument": "c",
  "change_to": "s",
  "original_function": "def baz(c: int):\n  a = c + 1\n  b = c * 2\n  if a > 10:\n    c = a - b\n    return c\n  else:\n    return c\n",
  "changed_function": "def baz(s: int):\n  a = s + 1\n  b = s * 2\n  if a > 10:\n    s = a - b\n    return s\n  else:\n    return s\n",
  "function_name": "baz",
  "inputs": [
   "1",
   "5",
   "10",
   "15",
   "20"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "p",
  "original_function": "def qux(y: bool):\n  if y:\n    x = y\n    return x\n  else:\n    x = y\n    return x\n",
  "changed_function": "def qux(p: bool):\n  if p:\n    x = p\n    return x\n  else:\n    x = p\n    return x\n",
  "function_name": "qux",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "r",
  "original_function": "def quux(b: list):\n  a = 0\n  for i in b:\n    a = a + i\n    if i > 10:\n      b = [i, a]\n      return b\n  return b\n",
  "changed_function": "def quux(r: list):\n  a = 0\n  for i in r:\n    a = a + i\n    if i > 10:\n      r = [i, a]\n      return r\n  return r\n",
  "function_name": "quux",
  "inputs": [
   "[1, 2, 3]",
   "[5, 6, 7]",
   "[10, 11, 12]",
   "[15, 16, 17]",
   "[20, 21, 22]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "w",
  "original_function": "def corge(x: int):\n  y = 10\n  z = 20\n  if x > y:\n    x = x + z\n    return x\n  else:\n    return x\n",
  "changed_function": "def corge(w: int):\n  y = 10\n  z = 20\n  if w > y:\n    w = w + z\n    return w\n  else:\n    return w\n",
  "function_name": "corge",
  "inputs": [
   "1",
   "5",
   "10",
   "15",
   "20"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "q",
  "original_function": "def grault(z: int):\n  x = z + 1\n  y = z - 1\n  if x > y:\n    z = x * 2\n    return z\n  else:\n    z = z / 2\n    return z\n",
  "changed_function": "def grault(q: int):\n  x = q + 1\n  y = q - 1\n  if x > y:\n    q = x * 2\n    return q\n  else:\n    q = q / 2\n    return q\n",
  "function_name": "grault",
  "inputs": [
   "1",
   "5",
   "10",
   "15",
   "20"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "d",
  "original_function": "def garply(b: bool):\n  if b:\n    a = 10\n    return a\n  else:\n    a = 20\n    return a\n",
  "changed_function": "def garply(d: bool):\n  if d:\n    a = 10\n    return a\n  else:\n    a = 20\n    return a\n",
  "function_name": "garply",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "c",
  "change_to": "k",
  "original_function": "def waldo(c: int):\n  a = c + 10\n  b = c - 10\n  if a > b:\n    c = a * 2\n    return c\n  else:\n    c = b / 2\n    return c\n",
  "changed_function": "def waldo(k: int):\n  a = k + 10\n  b = k - 10\n  if a > b:\n    k = a * 2\n    return k\n  else:\n    k = b / 2\n    return k\n",
  "function_name": "waldo",
  "inputs": [
   "1",
   "5",
   "10",
   "15",
   "20"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def fred(a: int):\n  b = a * 2\n  c = a + 2\n  if a > 10:\n    a = b + c\n    return a\n  else:\n    return a\n",
  "changed_function": "def fred(x: int):\n  b = x * 2\n  c = x + 2\n  if x > 10:\n    x = b + c\n    return x\n  else:\n    return x\n",
  "function_name": "fred",
  "inputs": [
   "1",
   "5",
   "10",
   "15",
   "20"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "name",
  "original_function": "def check_if_strings_equal(s: str):\n  if s == 'hello':\n    return True\n  else:\n    return False\n  return s",
  "changed_function": "def check_if_strings_equal(name: str):\n  if name == 'hello':\n    return True\n  else:\n    return False\n  return name",
  "function_name": "check_if_strings_equal",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'coding'",
   "'programming'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "index",
  "original_function": "def sum_up_list(n: int):\n  sum = 0\n  for i in range(n):\n    sum += i\n  return sum",
  "changed_function": "def sum_up_list(index: int):\n  sum = 0\n  for i in range(index):\n    sum += i\n  return sum",
  "function_name": "sum_up_list",
  "inputs": [
   "10",
   "5",
   "20",
   "1",
   "7"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "numbers",
  "original_function": "def count_positive_nums(nums: list):\n  count = 0\n  for num in nums:\n    if num > 0:\n      count += 1\n  return count",
  "changed_function": "def count_positive_nums(numbers: list):\n  count = 0\n  for num in numbers:\n    if num > 0:\n      count += 1\n  return count",
  "function_name": "count_positive_nums",
  "inputs": [
   "[1, 2, 3, -1, -2]",
   "[5, 6, 7, 8, -9]",
   "[10, 11, 12, -13, -14]",
   "[1, -2, 3, -4, 5]",
   "[2, 4, 6, 8, 10]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "input",
  "original_function": "def print_odd_numbers(n: int):\n  for i in range(1, n+1):\n    if i % 2 != 0:\n      print(i)",
  "changed_function": "def print_odd_numbers(input: int):\n  for i in range(1, input+1):\n    if i % 2 != 0:\n      print(i)",
  "function_name": "print_odd_numbers",
  "inputs": [
   "10",
   "20",
   "5",
   "15",
   "8"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "input",
  "original_function": "def factorial(n: int):\n  fact = 1\n  for i in range(1, n+1):\n    fact *= i\n  return fact",
  "changed_function": "def factorial(input: int):\n  fact = 1\n  for i in range(1, input+1):\n    fact *= i\n  return fact",
  "function_name": "factorial",
  "inputs": [
   "5",
   "10",
   "3",
   "7",
   "4"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "string",
  "original_function": "def reverse_string(text: str):\n  reversed_string = ''\n  for i in range(len(text)-1, -1, -1):\n    reversed_string += text[i]\n  return reversed_string",
  "changed_function": "def reverse_string(string: str):\n  reversed_string = ''\n  for i in range(len(string)-1, -1, -1):\n    reversed_string += string[i]\n  return reversed_string",
  "function_name": "reverse_string",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'coding'"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "numbers",
  "original_function": "def find_min_in_list(nums: list):\n  min_num = nums[0]\n  for num in nums:\n    if num < min_num:\n      min_num = num\n  return min_num",
  "changed_function": "def find_min_in_list(numbers: list):\n  min_num = numbers[0]\n  for num in numbers:\n    if num < min_num:\n      min_num = num\n  return min_num",
  "function_name": "find_min_in_list",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[10, 20, 30, 40, 50]",
   "[5, 4, 3, 2, 1]",
   "[9, 8, 7, 6, 5]",
   "[1, 3, 5, 7, 9]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "input",
  "original_function": "def check_prime_number(n: int):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True",
  "changed_function": "def check_prime_number(input: int):\n  if input <= 1:\n    return False\n  for i in range(2, int(input**0.5) + 1):\n    if input % i == 0:\n      return False\n  return True",
  "function_name": "check_prime_number",
  "inputs": [
   "2",
   "7",
   "11",
   "13",
   "17"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def func3(x: bool):\n  if x == True:\n    return 1\n  else:\n    return 0",
  "changed_function": "def func3(n: bool):\n  if n == True:\n    return 1\n  else:\n    return 0",
  "function_name": "func3",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def func4(a: int):\n  if a <= 0:\n    return 0\n  elif a == 1:\n    return 1\n  else:\n    return (lambda x: a + x)(a-1)",
  "changed_function": "def func4(x: int):\n  if x <= 0:\n    return 0\n  elif x == 1:\n    return 1\n  else:\n    return (lambda a: x + a)(x-1)",
  "function_name": "func4",
  "inputs": [
   "5",
   "1",
   "10",
   "0",
   "3"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def func6(n: int):\n  result = 0\n  for i in range(1, n+1):\n    result += i\n  return result",
  "changed_function": "def func6(x: int):\n  result = 0\n  for i in range(1, x+1):\n    result += i\n  return result",
  "function_name": "func6",
  "inputs": [
   "1",
   "5",
   "10",
   "3",
   "7"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func8(x: int):\n  return (lambda y: y + 1)(x)",
  "changed_function": "def func8(y: int):\n  return (lambda x: x + 1)(y)",
  "function_name": "func8",
  "inputs": [
   "1",
   "5",
   "10",
   "0",
   "3"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "x",
  "original_function": "def func_one(b: int):\n    a = 1\n    c = lambda x: x + b\n    return c(a)",
  "changed_function": "def func_one(x: int):\n    a = 1\n    c = lambda y: y + x\n    return c(a)",
  "function_name": "func_one",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def func_two(n: int):\n    l = lambda n: n + 1\n    return l(n) * 2",
  "changed_function": "def func_two(k: int):\n    l = lambda n: n + 1\n    return l(k) * 2",
  "function_name": "func_two",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "t",
  "original_function": "def func_three(m: int):\n    a = 1\n    b = 2\n    c = lambda m: m * 3\n    return c(m) * 2 + b + a",
  "changed_function": "def func_three(t: int):\n    a = 1\n    b = 2\n    c = lambda m: m * 3\n    return c(t) * 2 + b + a",
  "function_name": "func_three",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "j",
  "original_function": "def func_four(n: int):\n    return n * 2",
  "changed_function": "def func_four(j: int):\n    return j * 2",
  "function_name": "func_four",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "p",
  "original_function": "def func_five(x: int):\n    n = lambda x: x + 1\n    return n(x)",
  "changed_function": "def func_five(p: int):\n    n = lambda x: x + 1\n    return n(p)",
  "function_name": "func_five",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "k",
  "change_to": "v",
  "original_function": "def func_six(k: int):\n    j = k + 1\n    m = lambda k: k * j\n    return m(k)",
  "changed_function": "def func_six(v: int):\n    j = v + 1\n    m = lambda k: k * j\n    return m(v)",
  "function_name": "func_six",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "g",
  "original_function": "def func_eight(n: int):\n    a = 1\n    b = 2\n    c = 3\n    k = lambda n: a + b * n\n    return k(n) + c",
  "changed_function": "def func_eight(g: int):\n    a = 1\n    b = 2\n    c = 3\n    k = lambda n: a + b * g\n    return k(g) + c",
  "function_name": "func_eight",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "w",
  "original_function": "def func_ten(f: int):\n    x = 1\n    b = lambda f: f + x\n    return b(f)",
  "changed_function": "def func_ten(w: int):\n    x = 1\n    b = lambda f: f + x\n    return b(w)",
  "function_name": "func_ten",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def my_func(x: int):\n  if x > 5:\n    y = 10\n    return y\n  else:\n    return 0",
  "changed_function": "def my_func(y: int):\n  if y > 5:\n    z = 10\n    return z\n  else:\n    return 0",
  "function_name": "my_func",
  "inputs": [
   "5",
   "10",
   "1",
   "20",
   "15"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "b",
  "original_function": "def test(x: str):\n  if x.lower() == 'abc':\n    a = 1\n    return a\n  else:\n    return 0",
  "changed_function": "def test(b: str):\n  if b.lower() == 'abc':\n    a = 1\n    return a\n  else:\n    return 0",
  "function_name": "test",
  "inputs": [
   "'abc'",
   "'Abc'",
   "'ABC'",
   "'def'",
   "'123'"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "str_input",
  "original_function": "def check_substring(s: str):\n  count = 0\n  for i in range(len(s)):\n    for j in range(i + 1, len(s) + 1):\n      substring = s[i:j]\n      if s[i] == s[j - 1]:\n        count += 1\n  return count",
  "changed_function": "def check_substring(str_input: str):\n  count = 0\n  for i in range(len(str_input)):\n    for j in range(i + 1, len(str_input) + 1):\n      substring = str_input[i:j]\n      if str_input[i] == str_input[j - 1]:\n        count += 1\n  return count",
  "function_name": "check_substring",
  "inputs": [
   "'aaab'",
   "'abccba'",
   "'python'",
   "'hello world'",
   "'12345'"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def func(s: str):\n  l = len(s)\n  if l < 2:\n    return 0\n  count = 0\n  for i in range(l):\n    for j in range(i + 1, l):\n      if s[i] == s[j]:\n        count += 1\n  return count",
  "changed_function": "def func(a: str):\n  l = len(a)\n  if l < 2:\n    return 0\n  count = 0\n  for i in range(l):\n    for j in range(i + 1, l):\n      if a[i] == a[j]:\n        count += 1\n  return count",
  "function_name": "func",
  "inputs": [
   "'ab'",
   "'aabb'",
   "'python'",
   "'hello world'",
   "'12345'"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def is_palindrome(a: str):\n  return a == a[::-1]",
  "changed_function": "def is_palindrome(n: str):\n  return n == n[::-1]",
  "function_name": "is_palindrome",
  "inputs": [
   "'racecar'",
   "'madam'",
   "'level'",
   "'hello'",
   "'12321'"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "w",
  "original_function": "def count_vowels(s: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for char in s:\n    if char in vowels:\n      count += 1\n  return count",
  "changed_function": "def count_vowels(w: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for char in w:\n    if char in vowels:\n      count += 1\n  return count",
  "function_name": "count_vowels",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'aeiou'"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "input_list",
  "original_function": "def sum_of_squares(l: list):\n  total = 0\n  for num in l:\n    total += num ** 2\n  return total",
  "changed_function": "def sum_of_squares(input_list: list):\n  total = 0\n  for num in input_list:\n    total += num ** 2\n  return total",
  "function_name": "sum_of_squares",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[1, 3, 5, 7, 9]"
  ]
 },
 {
  "target_argument": "numbers",
  "change_to": "n",
  "original_function": "def find_max(numbers: list):\n  if len(numbers) == 0:\n    return None\n  max_num = numbers[0]\n  for num in numbers:\n    if num > max_num:\n      max_num = num\n  return max_num",
  "changed_function": "def find_max(n: list):\n  if len(n) == 0:\n    return None\n  max_num = n[0]\n  for num in n:\n    if num > max_num:\n      max_num = num\n  return max_num",
  "function_name": "find_max",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[1, 3, 5, 7, 9]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "t",
  "original_function": "def my_func(x: bool):\n  if x:\n    a = 1\n    return a\n  else:\n    return 0",
  "changed_function": "def my_func(t: bool):\n  if t:\n    a = 1\n    return a\n  else:\n    return 0",
  "function_name": "my_func",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "a",
  "original_function": "def count_words(text: str):\n  words = text.split()\n  return len(words)",
  "changed_function": "def count_words(a: str):\n  words = a.split()\n  return len(words)",
  "function_name": "count_words",
  "inputs": [
   "'This is a test sentence.'",
   "'Hello world!'",
   "'Python is fun.'",
   "'The quick brown fox jumps over the lazy dog.'",
   "'One two three'"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "n",
  "original_function": "def func1(s: str):\n    k = 0\n    m = s\n    for i in range(len(s)):\n        if s[i] == \"a\":\n            k += 1\n        else:\n            m += s[i]\n    return (k, m)",
  "changed_function": "def func1(n: str):\n    k = 0\n    m = n\n    for i in range(len(n)):\n        if n[i] == \"a\":\n            k += 1\n        else:\n            m += n[i]\n    return (k, m)",
  "function_name": "func1",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"apple\"",
   "\"banana\"",
   "\"cat\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def func2(x: int):\n    a = x\n    if x < 5:\n        x += 1\n        return x\n    elif x > 10:\n        return a + x\n    else:\n        return 0",
  "changed_function": "def func2(a: int):\n    b = a\n    if a < 5:\n        a += 1\n        return a\n    elif a > 10:\n        return b + a\n    else:\n        return 0",
  "function_name": "func2",
  "inputs": [
   "3",
   "7",
   "12",
   "15",
   "2"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "b",
  "original_function": "def func3(x: list):\n    s = 0\n    for i in x:\n        if i > 0:\n            s += i\n        else:\n            s -= i\n    return s",
  "changed_function": "def func3(b: list):\n    s = 0\n    for i in b:\n        if i > 0:\n            s += i\n        else:\n            s -= i\n    return s",
  "function_name": "func3",
  "inputs": [
   "[1, 2, 3]",
   "[-1, -2, -3]",
   "[1, -2, 3]",
   "[0, 0, 0]",
   "[1, 2, 3, -4]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "d",
  "original_function": "def func4(a: bool):\n    if a:\n        return 1\n    else:\n        return 0",
  "changed_function": "def func4(d: bool):\n    if d:\n        return 1\n    else:\n        return 0",
  "function_name": "func4",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "x",
  "original_function": "def func5(s: str):\n    r = s\n    for i in range(len(s)):\n        if s[i] == \"a\":\n            r = r.replace(\"a\", \"b\")\n    return r",
  "changed_function": "def func5(x: str):\n    r = x\n    for i in range(len(x)):\n        if x[i] == \"a\":\n            r = r.replace(\"a\", \"b\")\n    return r",
  "function_name": "func5",
  "inputs": [
   "\"apple\"",
   "\"banana\"",
   "\"cat\"",
   "\"dog\"",
   "\"elephant\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "c",
  "original_function": "def func6(n: int):\n    f = lambda x: x + 1\n    if n == 0:\n        return 1\n    elif n == 1:\n        return f(n)\n    else:\n        return f(f(n))",
  "changed_function": "def func6(c: int):\n    f = lambda x: x + 1\n    if c == 0:\n        return 1\n    elif c == 1:\n        return f(c)\n    else:\n        return f(f(c))",
  "function_name": "func6",
  "inputs": [
   "0",
   "1",
   "2",
   "3",
   "4"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "a",
  "original_function": "def func7(n: int):\n    s = 0\n    a = n\n    for i in range(n):\n        s += a\n        a += 1\n    return s",
  "changed_function": "def func7(a: int):\n    s = 0\n    b = a\n    for i in range(a):\n        s += b\n        b += 1\n    return s",
  "function_name": "func7",
  "inputs": [
   "3",
   "5",
   "7",
   "9",
   "11"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "y",
  "original_function": "def func8(l: list):\n    m = 0\n    for i in l:\n        if i > m:\n            m = i\n    return m",
  "changed_function": "def func8(y: list):\n    m = 0\n    for i in y:\n        if i > m:\n            m = i\n    return m",
  "function_name": "func8",
  "inputs": [
   "[1, 2, 3]",
   "[-1, -2, -3]",
   "[1, -2, 3]",
   "[0, 0, 0]",
   "[1, 2, 3, -4]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "m",
  "original_function": "def func9(s: str):\n    x = 0\n    for i in range(len(s)):\n        if s[i] == \"a\":\n            x += 1\n    return x",
  "changed_function": "def func9(m: str):\n    x = 0\n    for i in range(len(m)):\n        if m[i] == \"a\":\n            x += 1\n    return x",
  "function_name": "func9",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"apple\"",
   "\"banana\"",
   "\"cat\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def check_list_sum(n: int):\n  a = [1,2,3]\n  b = [4,5,6]\n  for i in range(0,n):\n    a.append(i)\n  return sum(a) == sum(b)",
  "changed_function": "def check_list_sum(x: int):\n  a = [1,2,3]\n  b = [4,5,6]\n  for i in range(0,x):\n    a.append(i)\n  return sum(a) == sum(b)",
  "function_name": "check_list_sum",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def fibonacci_sum(n: int):\n  a = 0\n  b = 1\n  sum = 0\n  for i in range(0, n):\n    sum += a\n    c = a + b\n    a = b\n    b = c\n  return sum",
  "changed_function": "def fibonacci_sum(x: int):\n  a = 0\n  b = 1\n  sum = 0\n  for i in range(0, x):\n    sum += a\n    c = a + b\n    a = b\n    b = c\n  return sum",
  "function_name": "fibonacci_sum",
  "inputs": [
   "10",
   "15",
   "20",
   "25",
   "30"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def factorial(n: int):\n  f = 1\n  for i in range(1, n + 1):\n    f = f * i\n  return f",
  "changed_function": "def factorial(x: int):\n  f = 1\n  for i in range(1, x + 1):\n    f = f * i\n  return f",
  "function_name": "factorial",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "y",
  "original_function": "def prime_check(n: int):\n  for i in range(2, n):\n    if n % i == 0:\n      return False\n  return True",
  "changed_function": "def prime_check(y: int):\n  for i in range(2, y):\n    if y % i == 0:\n      return False\n  return True",
  "function_name": "prime_check",
  "inputs": [
   "7",
   "11",
   "13",
   "17",
   "19"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "z",
  "original_function": "def check_palindrome(n: int):\n  s = str(n)\n  return s == s[::-1]",
  "changed_function": "def check_palindrome(z: int):\n  s = str(z)\n  return s == s[::-1]",
  "function_name": "check_palindrome",
  "inputs": [
   "121",
   "12321",
   "123321",
   "1234321",
   "123454321"
  ]
 },
 {
  "target_argument": "k",
  "change_to": "a",
  "original_function": "def find_sum(k: int):\n  result = 0\n  for i in range(k):\n    result += i\n  return result\n  return result",
  "changed_function": "def find_sum(a: int):\n  result = 0\n  for i in range(a):\n    result += i\n  return result\n  return result",
  "function_name": "find_sum",
  "inputs": [
   "10",
   "5",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def reverse_string(x: str):\n  return x[::-1]",
  "changed_function": "def reverse_string(y: str):\n  return y[::-1]",
  "function_name": "reverse_string",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"data science\""
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def count_occurrences(s: str, t: str):\n  count = 0\n  for i in range(len(s) - len(t) + 1):\n    if s[i:i + len(t)] == t:\n      count += 1\n  return count",
  "changed_function": "def count_occurrences(a: str, t: str):\n  count = 0\n  for i in range(len(a) - len(t) + 1):\n    if a[i:i + len(t)] == t:\n      count += 1\n  return count",
  "function_name": "count_occurrences",
  "inputs": [
   " \"this is a string\", \"is\"",
   " \"banana\", \"an\"",
   " \"hello world\", \"o\"",
   " \"python is cool\", \"on\"",
   " \"data science\", \"ta\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "b",
  "original_function": "def find_max(x: list):\n  if len(x) == 0:\n    return None\n  max_value = x[0]\n  for i in range(1, len(x)):\n    if x[i] > max_value:\n      max_value = x[i]\n  return max_value",
  "changed_function": "def find_max(b: list):\n  if len(b) == 0:\n    return None\n  max_value = b[0]\n  for i in range(1, len(b)):\n    if b[i] > max_value:\n      max_value = b[i]\n  return max_value",
  "function_name": "find_max",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[1, 3, 2, 4, 5]",
   "[5, 2, 4, 1, 3]",
   "[1, 4, 2, 5, 3]"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "n",
  "original_function": "def is_palindrome(m: str):\n  return m == m[::-1]",
  "changed_function": "def is_palindrome(n: str):\n  return n == n[::-1]",
  "function_name": "is_palindrome",
  "inputs": [
   "\"racecar\"",
   "\"level\"",
   "\"madam\"",
   "\"rotor\"",
   "\"noon\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "y",
  "original_function": "def sum_list(a: list):\n  total = 0\n  for x in a:\n    total += x\n  return total",
  "changed_function": "def sum_list(y: list):\n  total = 0\n  for x in y:\n    total += x\n  return total",
  "function_name": "sum_list",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[1, 3, 2, 4, 5]",
   "[5, 2, 4, 1, 3]",
   "[1, 4, 2, 5, 3]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "y",
  "original_function": "def remove_duplicates(s: list):\n  return list(dict.fromkeys(s))",
  "changed_function": "def remove_duplicates(y: list):\n  return list(dict.fromkeys(y))",
  "function_name": "remove_duplicates",
  "inputs": [
   "[1, 2, 2, 3, 4, 4, 5]",
   "[5, 4, 4, 3, 2, 2, 1]",
   "[1, 3, 2, 4, 5, 5, 5]",
   "[5, 2, 4, 1, 3, 3, 3]",
   "[1, 4, 2, 5, 3, 3, 3]"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "a",
  "original_function": "def find_smallest_missing_positive(arr: list):\n  n = len(arr)\n  for i in range(n):\n    if arr[i] <= 0 or arr[i] > n:\n      arr[i] = 1\n  for i in range(n):\n    a = abs(arr[i])\n    if a == n:\n      arr[0] = - abs(arr[0])\n    else:\n      arr[a] = - abs(arr[a])\n  for i in range(1, n):\n    if arr[i] > 0:\n      return i\n  if arr[0] > 0:\n    return n\n  return n + 1",
  "changed_function": "def find_smallest_missing_positive(a: list):\n  n = len(a)\n  for i in range(n):\n    if a[i] <= 0 or a[i] > n:\n      a[i] = 1\n  for i in range(n):\n    b = abs(a[i])\n    if b == n:\n      a[0] = - abs(a[0])\n    else:\n      a[b] = - abs(a[b])\n  for i in range(1, n):\n    if a[i] > 0:\n      return i\n  if a[0] > 0:\n    return n\n  return n + 1",
  "function_name": "find_smallest_missing_positive",
  "inputs": [
   "[1, 2, 0]",
   "[3, 4, -1, 1]",
   "[7, 8, 9, 11, 12]",
   "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
   "[-1, -2, -3]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def find_first_non_repeating_character(a: str):\n  char_counts = {}\n  for char in a:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n  for char in a:\n    if char_counts[char] == 1:\n      return char\n  return None",
  "changed_function": "def find_first_non_repeating_character(x: str):\n  char_counts = {}\n  for char in x:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n  for char in x:\n    if char_counts[char] == 1:\n      return char\n  return None",
  "function_name": "find_first_non_repeating_character",
  "inputs": [
   "\"abcabcbb\"",
   "\"leetcode\"",
   "\"loveleetcode\"",
   "\"aabb\"",
   "\"hello\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def find_rect_num(n: int):\n  x = n + 1\n  return n * x",
  "changed_function": "def find_rect_num(x: int):\n  a = x + 1\n  return x * a",
  "function_name": "find_rect_num",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "z",
  "original_function": "def fun_n(n: int):\n  x = lambda n: n * n\n  return x(n)",
  "changed_function": "def fun_n(z: int):\n  x = lambda n: n * n\n  return x(z)",
  "function_name": "fun_n",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "p",
  "original_function": "def string_rev(s: str):\n  s = list(s)\n  s.reverse()\n  return ''.join(s)",
  "changed_function": "def string_rev(p: str):\n  q = list(p)\n  q.reverse()\n  return ''.join(q)",
  "function_name": "string_rev",
  "inputs": [
   "\"abc\"",
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"coding\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "y",
  "original_function": "def print_even(n: int):\n  for i in range(n):\n    if i % 2 == 0:\n      print(i)\n  return",
  "changed_function": "def print_even(y: int):\n  for i in range(y):\n    if i % 2 == 0:\n      print(i)\n  return",
  "function_name": "print_even",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "nums",
  "change_to": "a",
  "original_function": "def find_max(nums: list):\n  max_num = nums[0]\n  for num in nums:\n    if num > max_num:\n      max_num = num\n  return max_num",
  "changed_function": "def find_max(a: list):\n  max_num = a[0]\n  for num in a:\n    if num > max_num:\n      max_num = num\n  return max_num",
  "function_name": "find_max",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[1, 3, 5, 2, 4]",
   "[4, 2, 1, 5, 3]",
   "[3, 1, 4, 2, 5]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "t",
  "original_function": "def func_x(x: int):\n  t = lambda x: x + 1\n  return t(x)",
  "changed_function": "def func_x(t: int):\n  a = lambda x: x + 1\n  return a(t)",
  "function_name": "func_x",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "t",
  "original_function": "def nested_func(n: int):\n  def inner(n: int):\n    return n * 2\n  return inner(n)",
  "changed_function": "def nested_func(t: int):\n  def inner(n: int):\n    return n * 2\n  return inner(t)",
  "function_name": "nested_func",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "t",
  "original_function": "def sum_of_squares(n: int):\n  return n * (n + 1) * (2 * n + 1) / 6",
  "changed_function": "def sum_of_squares(t: int):\n  return t * (t + 1) * (2 * t + 1) / 6",
  "function_name": "sum_of_squares",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "b",
  "original_function": "def count_vowels(s: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for char in s:\n    if char in vowels:\n      count += 1\n  return count",
  "changed_function": "def count_vowels(b: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for char in b:\n    if char in vowels:\n      count += 1\n  return count",
  "function_name": "count_vowels",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"coding\"",
   "\"programming\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "a",
  "original_function": "def check_prime(n: int):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True",
  "changed_function": "def check_prime(a: int):\n  if a <= 1:\n    return False\n  for i in range(2, int(a**0.5) + 1):\n    if a % i == 0:\n      return False\n  return True",
  "function_name": "check_prime",
  "inputs": [
   "2",
   "3",
   "5",
   "7",
   "11"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "b",
  "original_function": "def foo(s: str):\n    x = s[0]\n    y = s[1]\n    return x + y",
  "changed_function": "def foo(b: str):\n    x = b[0]\n    y = b[1]\n    return x + y",
  "function_name": "foo",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'coding'",
   "'language'"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "z",
  "original_function": "def check_string(p: str):\n    if p == 'a' or p == 'b':\n        return True\n    return False",
  "changed_function": "def check_string(z: str):\n    if z == 'a' or z == 'b':\n        return True\n    return False",
  "function_name": "check_string",
  "inputs": [
   "'a'",
   "'b'",
   "'c'",
   "'d'",
   "'e'"
  ]
 },
 {
  "target_argument": "i",
  "change_to": "x",
  "original_function": "def func(i: int):\n    j = i * 2\n    if i > 10:\n        return j\n    return j - 1",
  "changed_function": "def func(x: int):\n    j = x * 2\n    if x > 10:\n        return j\n    return j - 1",
  "function_name": "func",
  "inputs": [
   "5",
   "12",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "t",
  "original_function": "def print_list(n: list):\n    for i in range(len(n)):\n        print(n[i])",
  "changed_function": "def print_list(t: list):\n    for i in range(len(t)):\n        print(t[i])",
  "function_name": "print_list",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "m",
  "original_function": "def count_occurrences(a: str):\n    counts = {}\n    for letter in a:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return counts",
  "changed_function": "def count_occurrences(m: str):\n    counts = {}\n    for letter in m:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return counts",
  "function_name": "count_occurrences",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'coding'",
   "'language'"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "j",
  "original_function": "def get_min(x: list):\n    min_value = x[0]\n    for i in range(1, len(x)):\n        if x[i] < min_value:\n            min_value = x[i]\n    return min_value",
  "changed_function": "def get_min(j: list):\n    min_value = j[0]\n    for i in range(1, len(j)):\n        if j[i] < min_value:\n            min_value = j[i]\n    return min_value",
  "function_name": "get_min",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def calculate_sum(x: int):\n    total = 0\n    for i in range(1, x + 1):\n        total += i\n    return total",
  "changed_function": "def calculate_sum(z: int):\n    total = 0\n    for i in range(1, z + 1):\n        total += i\n    return total",
  "function_name": "calculate_sum",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "k",
  "original_function": "def is_palindrome(x: str):\n    return x == x[::-1]",
  "changed_function": "def is_palindrome(k: str):\n    return k == k[::-1]",
  "function_name": "is_palindrome",
  "inputs": [
   "'racecar'",
   "'level'",
   "'madam'",
   "'noon'",
   "'rotor'"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "b",
  "original_function": "def find_max(x: list):\n    max_value = x[0]\n    for i in range(1, len(x)):\n        if x[i] > max_value:\n            max_value = x[i]\n    return max_value",
  "changed_function": "def find_max(b: list):\n    max_value = b[0]\n    for i in range(1, len(b)):\n        if b[i] > max_value:\n            max_value = b[i]\n    return max_value",
  "function_name": "find_max",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def foo(x: int):\n  y = x * 2\n  return (lambda x: x + 1)(y)",
  "changed_function": "def foo(y: int):\n  z = y * 2\n  return (lambda x: x + 1)(z)",
  "function_name": "foo",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def bar(x: str):\n  y = x.upper()\n  return (lambda x: x.lower())(y)",
  "changed_function": "def bar(y: str):\n  z = y.upper()\n  return (lambda x: x.lower())(z)",
  "function_name": "bar",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"language\""
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def qux(s: str):\n  t = s.split()\n  return (lambda s: len(s))(t)",
  "changed_function": "def qux(t: str):\n  u = t.split()\n  return (lambda s: len(s))(u)",
  "function_name": "qux",
  "inputs": [
   "\"hello world\"",
   "\"this is a test\"",
   "\"python is fun\"",
   "\"programming is cool\"",
   "\"data science is awesome\""
  ]
 },
 {
  "target_argument": "b",
  "change_to": "c",
  "original_function": "def quux(b: bool):\n  c = b and True\n  return (lambda b: not b)(c)",
  "changed_function": "def quux(c: bool):\n  d = c and True\n  return (lambda b: not b)(d)",
  "function_name": "quux",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def foobar(x: int):\n  y = x + 1\n  return (lambda x: x * 2)(y)",
  "changed_function": "def foobar(y: int):\n  z = y + 1\n  return (lambda x: x * 2)(z)",
  "function_name": "foobar",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def bazqux(s: str):\n  t = s.replace(\"a\", \"b\")\n  return (lambda s: s.count(\"b\"))(t)",
  "changed_function": "def bazqux(t: str):\n  u = t.replace(\"a\", \"b\")\n  return (lambda s: s.count(\"b\"))(u)",
  "function_name": "bazqux",
  "inputs": [
   "\"banana\"",
   "\"apple\"",
   "\"orange\"",
   "\"grape\"",
   "\"watermelon\""
  ]
 },
 {
  "target_argument": "l",
  "change_to": "m",
  "original_function": "def quxquux(l: list):\n  m = [x * 2 for x in l]\n  return (lambda l: sum(l))(m)",
  "changed_function": "def quxquux(m: list):\n  n = [x * 2 for x in m]\n  return (lambda l: sum(l))(n)",
  "function_name": "quxquux",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def foobaz(n: int):\n  m = n % 2\n  return (lambda n: n ** 2)(m)",
  "changed_function": "def foobaz(m: int):\n  n = m % 2\n  return (lambda n: n ** 2)(n)",
  "function_name": "foobaz",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def barqux(s: str):\n  t = s[::-1]\n  return (lambda s: s.capitalize())(t)",
  "changed_function": "def barqux(t: str):\n  u = t[::-1]\n  return (lambda s: s.capitalize())(u)",
  "function_name": "barqux",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"programming\"",
   "\"language\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func1(x: int):\n    y = x + 1\n    return (lambda x: x * y)(x)",
  "changed_function": "def func1(y: int):\n    z = y + 1\n    return (lambda x: x * z)(y)",
  "function_name": "func1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def func2(a: int):\n    b = [a, a + 1]\n    return (lambda a: a[0] * a[1])(b)",
  "changed_function": "def func2(x: int):\n    b = [x, x + 1]\n    return (lambda c: c[0] * c[1])(b)",
  "function_name": "func2",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def func5(x: bool):\n    y = x\n    if x:\n        return y\n    else:\n        return not y",
  "changed_function": "def func5(z: bool):\n    y = z\n    if z:\n        return y\n    else:\n        return not y",
  "function_name": "func5",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "a",
  "original_function": "def func6(m: int):\n    n = m * 2\n    return (lambda m: m + n)(m)",
  "changed_function": "def func6(a: int):\n    b = a * 2\n    return (lambda m: m + b)(a)",
  "function_name": "func6",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "p",
  "original_function": "def func8(n: int):\n    return (lambda n: n * 2)(n)",
  "changed_function": "def func8(p: int):\n    return (lambda n: n * 2)(p)",
  "function_name": "func8",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "t",
  "original_function": "def func9(b: bool):\n    return (lambda b: b and True)(b)",
  "changed_function": "def func9(t: bool):\n    return (lambda b: b and True)(t)",
  "function_name": "func9",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def func1(n: int):\n  x = n + 1\n  y = 1\n  for i in range(n):\n    y = y * x\n    x = x + i\n  return y",
  "changed_function": "def func1(x: int):\n  a = x + 1\n  y = 1\n  for i in range(x):\n    y = y * a\n    a = a + i\n  return y",
  "function_name": "func1",
  "inputs": [
   "10",
   "5",
   "2",
   "7",
   "1"
  ]
 },
 {
  "target_argument": "k",
  "change_to": "z",
  "original_function": "def func2(k: int):\n  n = 1\n  for i in range(k):\n    n = n + k\n  return n",
  "changed_function": "def func2(z: int):\n  n = 1\n  for i in range(z):\n    n = n + z\n  return n",
  "function_name": "func2",
  "inputs": [
   "20",
   "1",
   "12",
   "4",
   "15"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "m",
  "original_function": "def func3(x: int):\n  x = [x for x in range(x)]\n  return len(x)",
  "changed_function": "def func3(m: int):\n  a = [a for a in range(m)]\n  return len(a)",
  "function_name": "func3",
  "inputs": [
   "10",
   "3",
   "12",
   "6",
   "8"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "a",
  "original_function": "def func4(l: str):\n  count = 0\n  for c in l:\n    if c.isupper():\n      count += 1\n  return count",
  "changed_function": "def func4(a: str):\n  count = 0\n  for c in a:\n    if c.isupper():\n      count += 1\n  return count",
  "function_name": "func4",
  "inputs": [
   "['ThisIsATest', 'A12345', 'a', 'aB', 'ABCDE']",
   "'this is a test'",
   "'12345'",
   "'A'",
   "'b'",
   "'aBCDE'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def func5(n: int):\n  k = n - 1\n  x = [i for i in range(n) if i%k==0]\n  return x",
  "changed_function": "def func5(m: int):\n  k = m - 1\n  x = [i for i in range(m) if i%k==0]\n  return x",
  "function_name": "func5",
  "inputs": [
   "10",
   "3",
   "15",
   "9",
   "12"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "y",
  "original_function": "def func6(a: list):\n  b = 0\n  for i in a:\n    b = b + i\n  return b",
  "changed_function": "def func6(y: list):\n  b = 0\n  for i in y:\n    b = b + i\n  return b",
  "function_name": "func6",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[1, 2, 3]",
   "[4, 5, 6, 7]",
   "[8, 9, 10, 11]",
   "[2, 4, 6]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "p",
  "original_function": "def func7(a: list):\n  b = 0\n  for i in range(len(a)):\n    if a[i]%2 == 0:\n      b += a[i]\n  return b",
  "changed_function": "def func7(p: list):\n  b = 0\n  for i in range(len(p)):\n    if p[i]%2 == 0:\n      b += p[i]\n  return b",
  "function_name": "func7",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[2, 4, 6, 8, 10]",
   "[1, 3, 5, 7, 9]",
   "[0, 2, 4, 6, 8]",
   "[10, 12, 14, 16, 18]"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "t",
  "original_function": "def func8(l: list):\n  m = len(l)\n  return m",
  "changed_function": "def func8(t: list):\n  m = len(t)\n  return m",
  "function_name": "func8",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[2, 4, 6, 8]",
   "[1, 3, 5, 7, 9]",
   "[0, 2, 4, 6, 8]",
   "[10, 12, 14, 16]"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def func9(s: str):\n  if len(s) < 2:\n    return s\n  else:\n    return s[-1] + s[1:-1] + s[0]",
  "changed_function": "def func9(a: str):\n  if len(a) < 2:\n    return a\n  else:\n    return a[-1] + a[1:-1] + a[0]",
  "function_name": "func9",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'abc'",
   "'123'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def func10(n: int):\n  m = n + 1\n  return m * n",
  "changed_function": "def func10(k: int):\n  m = k + 1\n  return m * k",
  "function_name": "func10",
  "inputs": [
   "10",
   "5",
   "20",
   "15",
   "25"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "c",
  "original_function": "def fun_1(a: int):\n  b = [a, a, a]\n  c = lambda a: a * 2\n  return c(a) + sum(b)",
  "changed_function": "def fun_1(c: int):\n  b = [c, c, c]\n  d = lambda a: a * 2\n  return d(c) + sum(b)",
  "function_name": "fun_1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def fun_2(s: str):\n  t = s * 2\n  u = len(t)\n  return t[u - 1]",
  "changed_function": "def fun_2(t: str):\n  s = t * 2\n  u = len(s)\n  return s[u - 1]",
  "function_name": "fun_2",
  "inputs": [
   "\"abc\"",
   "\"def\"",
   "\"ghi\"",
   "\"jkl\"",
   "\"mno\""
  ]
 },
 {
  "target_argument": "i",
  "change_to": "n",
  "original_function": "def fun_4(i: int):\n  j = i + 1\n  k = [j, j, i]\n  l = lambda i: i + j\n  return l(i) + sum(k)",
  "changed_function": "def fun_4(n: int):\n  j = n + 1\n  k = [j, j, n]\n  l = lambda i: i + j\n  return l(n) + sum(k)",
  "function_name": "fun_4",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "m",
  "original_function": "def fun_5(l: list):\n  k = l[0]\n  n = lambda l: l + 1\n  return n(k) + len(l)",
  "changed_function": "def fun_5(m: list):\n  k = m[0]\n  n = lambda l: l + 1\n  return n(k) + len(m)",
  "function_name": "fun_5",
  "inputs": [
   "[1,2,3]",
   "[4,5,6]",
   "[7,8,9]",
   "[10,11,12]",
   "[13,14,15]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "d",
  "original_function": "def fun_7(a: int):\n  b = a + 1\n  c = lambda a: a * 2\n  return c(b) + a",
  "changed_function": "def fun_7(d: int):\n  b = d + 1\n  c = lambda a: a * 2\n  return c(b) + d",
  "function_name": "fun_7",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "u",
  "original_function": "def fun_8(s: str):\n  t = s[0]\n  v = s[1:]\n  w = lambda s: s.upper()\n  return w(t) + v",
  "changed_function": "def fun_8(u: str):\n  t = u[0]\n  v = u[1:]\n  w = lambda s: s.upper()\n  return w(t) + v",
  "function_name": "fun_8",
  "inputs": [
   "\"abc\"",
   "\"def\"",
   "\"ghi\"",
   "\"jkl\"",
   "\"mno\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func1(x: int):\n  x1 = x + 1\n  return (lambda x: x1 + x)(x)",
  "changed_function": "def func1(y: int):\n  y1 = y + 1\n  return (lambda x: y1 + x)(y)",
  "function_name": "func1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "y",
  "original_function": "def func2(z: int):\n  y = [z for z in range(z)]\n  return sum(y)",
  "changed_function": "def func2(z: int):\n  y = [z for z in range(z)]\n  return sum(y)",
  "function_name": "func2",
  "inputs": [
   "10",
   "5",
   "15",
   "20",
   "8"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "x",
  "original_function": "def func3(b: bool):\n  a = [x for x in range(10) if x%2 == 0]\n  if b:\n    return a\n  else:\n    return list(filter(lambda x: x%3 == 0, a))",
  "changed_function": "def func3(x: bool):\n  a = [y for y in range(10) if y%2 == 0]\n  if x:\n    return a\n  else:\n    return list(filter(lambda y: y%3 == 0, a))",
  "function_name": "func3",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "y",
  "original_function": "def func4(n: int):\n  if n < 10:\n    return n\n  else:\n    return (lambda n: n + 1)(n)",
  "changed_function": "def func4(y: int):\n  if y < 10:\n    return y\n  else:\n    return (lambda n: n + 1)(y)",
  "function_name": "func4",
  "inputs": [
   "5",
   "15",
   "12",
   "8",
   "1"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def func5(a: int):\n  return (lambda a: a + 1)(a)",
  "changed_function": "def func5(b: int):\n  return (lambda a: a + 1)(b)",
  "function_name": "func5",
  "inputs": [
   "2",
   "3",
   "4",
   "1",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def func6(n: int):\n  return list(filter(lambda x: x%2 == 0, [x for x in range(n)]))",
  "changed_function": "def func6(k: int):\n  return list(filter(lambda x: x%2 == 0, [x for x in range(k)]))",
  "function_name": "func6",
  "inputs": [
   "10",
   "12",
   "15",
   "20",
   "18"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "z",
  "original_function": "def func7(b: bool):\n  a = [x for x in range(10) if x%2 == 0]\n  if b:\n    return list(filter(lambda x: x%3 == 0, a))\n  else:\n    return a",
  "changed_function": "def func7(z: bool):\n  a = [x for x in range(10) if x%2 == 0]\n  if z:\n    return list(filter(lambda x: x%3 == 0, a))\n  else:\n    return a",
  "function_name": "func7",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "a",
  "original_function": "def func8(n: int):\n  return (lambda n: n*2)(n)",
  "changed_function": "def func8(a: int):\n  return (lambda n: n*2)(a)",
  "function_name": "func8",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "8"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "y",
  "original_function": "def func9(a: int):\n  a1 = a + 1\n  return (lambda a: a1 + a)(a)",
  "changed_function": "def func9(y: int):\n  y1 = y + 1\n  return (lambda a: y1 + a)(y)",
  "function_name": "func9",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "x",
  "original_function": "def func10(b: int):\n  a = [x for x in range(10) if x%3 == 0]\n  return list(filter(lambda x: x%2 == 0, a))",
  "changed_function": "def func10(x: int):\n  a = [y for y in range(10) if y%3 == 0]\n  return list(filter(lambda y: y%2 == 0, a))",
  "function_name": "func10",
  "inputs": [
   "3",
   "6",
   "9",
   "12",
   "15"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "a",
  "original_function": "def func1(n: int):\n    a = 1\n    return (lambda n: n + a)(n * n)",
  "changed_function": "def func1(a: int):\n    b = 1\n    return (lambda n: n + b)(a * a)",
  "function_name": "func1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "s",
  "original_function": "def func2(x: int):\n    a = 1\n    x = x + a\n    return (lambda x: x * 2)(x + a)",
  "changed_function": "def func2(s: int):\n    a = 1\n    s = s + a\n    return (lambda x: x * 2)(s + a)",
  "function_name": "func2",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "b",
  "original_function": "def func3(p: bool):\n    a = 1\n    p = p and (lambda p: p == 1)(a)\n    return (lambda p: p * 2)(p)",
  "changed_function": "def func3(b: bool):\n    a = 1\n    b = b and (lambda p: p == 1)(a)\n    return (lambda p: p * 2)(b)",
  "function_name": "func3",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "y",
  "original_function": "def func4(s: str):\n    a = s + s\n    s = a + s\n    return (lambda s: s == 'hello')(s)",
  "changed_function": "def func4(y: str):\n    a = y + y\n    y = a + y\n    return (lambda s: s == 'hello')(y)",
  "function_name": "func4",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'code'"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "a",
  "original_function": "def func5(arr: list):\n    x = arr[0]\n    arr = arr * 2\n    return (lambda arr: arr[0] == x)(arr)",
  "changed_function": "def func5(a: list):\n    x = a[0]\n    a = a * 2\n    return (lambda arr: arr[0] == x)(a)",
  "function_name": "func5",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "c",
  "original_function": "def func6(a: int):\n    b = 1\n    a = a + b\n    return (lambda a: a * 2)(a * b)",
  "changed_function": "def func6(c: int):\n    b = 1\n    c = c + b\n    return (lambda a: a * 2)(c * b)",
  "function_name": "func6",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "d",
  "original_function": "def func7(arr: list):\n    b = arr[0]\n    arr = arr[1:]\n    return (lambda arr: arr[0] == b)(arr)",
  "changed_function": "def func7(d: list):\n    b = d[0]\n    d = d[1:]\n    return (lambda arr: arr[0] == b)(d)",
  "function_name": "func7",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "m",
  "original_function": "def func8(a: int):\n    b = 1\n    a = a - b\n    return (lambda a: a * 2)(a + b)",
  "changed_function": "def func8(m: int):\n    b = 1\n    m = m - b\n    return (lambda a: a * 2)(m + b)",
  "function_name": "func8",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "str",
  "change_to": "d",
  "original_function": "def func9(str: str):\n    a = 'hello'\n    str = a + str\n    return (lambda str: str == 'hello')(str)",
  "changed_function": "def func9(d: str):\n    a = 'hello'\n    d = a + d\n    return (lambda str: str == 'hello')(d)",
  "function_name": "func9",
  "inputs": [
   "'world'",
   "'python'",
   "'programming'",
   "'code'",
   "'hello'"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "x",
  "original_function": "def func10(b: bool):\n    a = 1\n    b = b or (lambda b: b == 1)(a)\n    return (lambda b: b * 2)(b)",
  "changed_function": "def func10(x: bool):\n    a = 1\n    x = x or (lambda b: b == 1)(a)\n    return (lambda b: b * 2)(x)",
  "function_name": "func10",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def f(x: int):\n  a = 10\n  if x > 0:\n    a = x + a\n  return x - a",
  "changed_function": "def f(y: int):\n  a = 10\n  if y > 0:\n    a = y + a\n  return y - a",
  "function_name": "f",
  "inputs": [
   "10",
   "-10",
   "0",
   "5",
   "1"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def g(x: bool):\n  if x:\n    return [1, 2]\n  else:\n    return [3, 4]",
  "changed_function": "def g(y: bool):\n  if y:\n    return [1, 2]\n  else:\n    return [3, 4]",
  "function_name": "g",
  "inputs": [
   "True",
   "False",
   "True",
   "True",
   "False"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def h(x: str):\n  if len(x) > 5:\n    return x[:5]\n  return x + 'a'",
  "changed_function": "def h(z: str):\n  if len(z) > 5:\n    return z[:5]\n  return z + 'a'",
  "function_name": "h",
  "inputs": [
   "\"abcde\"",
   "\"1234567890\"",
   "\"helloworld\"",
   "\"short\"",
   "\"longstring\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def i(x: int):\n  return (lambda x: x * 2)(x + 1)",
  "changed_function": "def i(z: int):\n  return (lambda x: x * 2)(z + 1)",
  "function_name": "i",
  "inputs": [
   "10",
   "1",
   "0",
   "2",
   "3"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def j(x: int):\n  if x < 0:\n    return x\n  else:\n    return 1",
  "changed_function": "def j(y: int):\n  if y < 0:\n    return y\n  else:\n    return 1",
  "function_name": "j",
  "inputs": [
   "-1",
   "1",
   "0",
   "5",
   "-5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def k(x: str):\n  l = []\n  for i in range(len(x)):\n    if i % 2 == 0:\n      l.append(x[i])\n  return l",
  "changed_function": "def k(z: str):\n  l = []\n  for i in range(len(z)):\n    if i % 2 == 0:\n      l.append(z[i])\n  return l",
  "function_name": "k",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"12345\"",
   "\"abcdefg\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def l(x: int):\n  a = 1\n  if x == 0:\n    return a\n  while x > 0:\n    a = a * x\n    x = x - 1\n  return a",
  "changed_function": "def l(y: int):\n  a = 1\n  if y == 0:\n    return a\n  while y > 0:\n    a = a * y\n    y = y - 1\n  return a",
  "function_name": "l",
  "inputs": [
   "5",
   "10",
   "0",
   "3",
   "1"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "z",
  "original_function": "def m(x: str):\n  y = x.split(\" \")\n  return (lambda x: len(x) * 2)(y)",
  "changed_function": "def m(z: str):\n  y = z.split(\" \")\n  return (lambda x: len(x) * 2)(y)",
  "function_name": "m",
  "inputs": [
   "\"hello world\"",
   "\"python is fun\"",
   "\"this is a string\"",
   "\"one two three\"",
   "\"a b c d\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def n(x: list):\n  y = x\n  x.append(x[0])\n  return y",
  "changed_function": "def n(a: list):\n  y = a\n  a.append(a[0])\n  return y",
  "function_name": "n",
  "inputs": [
   "[1,2,3]",
   "[4,5,6]",
   "[7,8,9]",
   "[10,11,12]",
   "[13,14,15]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def o(x: bool):\n  if x:\n    return (lambda y: y * 2)(10)\n  return (lambda x: x * 2)(10)",
  "changed_function": "def o(y: bool):\n  if y:\n    return (lambda z: z * 2)(10)\n  return (lambda x: x * 2)(10)",
  "function_name": "o",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "f",
  "change_to": "c",
  "original_function": "def f_2(f: int):\n  return (lambda f: f + f)(f)",
  "changed_function": "def f_2(c: int):\n  return (lambda f: f + f)(c)",
  "function_name": "f_2",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "k",
  "original_function": "def f_3(l: list):\n  return (lambda l: l[0])(l)",
  "changed_function": "def f_3(k: list):\n  return (lambda l: l[0])(k)",
  "function_name": "f_3",
  "inputs": [
   "[1,2,3]",
   "[4,5,6]",
   "[7,8,9]",
   "[10,11,12]",
   "[13,14,15]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "t",
  "original_function": "def f_4(x: int):\n  x = x + x\n  return (lambda x: x * x)(x)",
  "changed_function": "def f_4(t: int):\n  t = t + t\n  return (lambda x: x * x)(t)",
  "function_name": "f_4",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "m",
  "original_function": "def f_5(b: bool):\n  return (lambda b: b and b)(b)",
  "changed_function": "def f_5(m: bool):\n  return (lambda b: b and b)(m)",
  "function_name": "f_5",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "i",
  "original_function": "def f_6(a: int):\n  a = a - 1\n  return (lambda a: a * a)(a)",
  "changed_function": "def f_6(i: int):\n  i = i - 1\n  return (lambda a: a * a)(i)",
  "function_name": "f_6",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "t",
  "original_function": "def f_7(b: bool):\n  return (lambda b: not b)(b)",
  "changed_function": "def f_7(t: bool):\n  return (lambda b: not b)(t)",
  "function_name": "f_7",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "a",
  "original_function": "def f_8(l: list):\n  return (lambda l: l.sort())(l)",
  "changed_function": "def f_8(a: list):\n  return (lambda l: l.sort())(a)",
  "function_name": "f_8",
  "inputs": [
   "[1,2,3]",
   "[4,5,6]",
   "[7,8,9]",
   "[10,11,12]",
   "[13,14,15]"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def f_10(a: int):\n  a = a - 1\n  return (lambda a: a + a)(a)",
  "changed_function": "def f_10(x: int):\n  x = x - 1\n  return (lambda a: a + a)(x)",
  "function_name": "f_10",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def g(x: bool):\n    if x:\n        return (lambda x: x)(True)\n    else:\n        return (lambda x: x)(False)",
  "changed_function": "def g(a: bool):\n    if a:\n        return (lambda b: b)(True)\n    else:\n        return (lambda b: b)(False)",
  "function_name": "g",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def j(a: str):\n    return (lambda x: x[0])(a)",
  "changed_function": "def j(n: str):\n    return (lambda x: x[0])(n)",
  "function_name": "j",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'language'"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def l(s: str):\n    s = s + 'a'\n    return (lambda s: s)(s)",
  "changed_function": "def l(t: str):\n    t = t + 'a'\n    return (lambda u: u)(t)",
  "function_name": "l",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'language'"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "l",
  "original_function": "def func4(n: int):\n    n_1 = n\n    while n > 0:\n        n_1 = n_1 * 2\n        n -= 1\n    return n_1",
  "changed_function": "def func4(l: int):\n    l_1 = l\n    while l > 0:\n        l_1 = l_1 * 2\n        l -= 1\n    return l_1",
  "function_name": "func4",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def func5(n: int):\n    n_2 = n\n    while n > 0:\n        n_2 = n_2 * 2\n        n -= 1\n    return n_2",
  "changed_function": "def func5(m: int):\n    m_2 = m\n    while m > 0:\n        m_2 = m_2 * 2\n        m -= 1\n    return m_2",
  "function_name": "func5",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "i",
  "original_function": "def func7(n: bool):\n    if n:\n        return (lambda x: x + 1)(1)\n    return (lambda x: x + 1)(0)",
  "changed_function": "def func7(i: bool):\n    if i:\n        return (lambda x: x + 1)(1)\n    return (lambda x: x + 1)(0)",
  "function_name": "func7",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def func8(n: int):\n    if n > 0:\n        n_2 = 0\n        n_2 += n * (lambda x: (lambda n: n + x)(n))(1)\n    return n_2",
  "changed_function": "def func8(x: int):\n    if x > 0:\n        x_2 = 0\n        x_2 += x * (lambda n: (lambda x: x + n)(x))(1)\n    return x_2",
  "function_name": "func8",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def func9(n: int):\n    return (lambda x: (lambda n: x * n)(n))(n)",
  "changed_function": "def func9(x: int):\n    return (lambda n: (lambda x: n * x)(x))(x)",
  "function_name": "func9",
  "inputs": [
   "-5",
   "-4",
   "-3",
   "-2",
   "-1"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def func10(n: str):\n    n_1 = ''\n    for i in range(len(n)):\n        if i % 2 == 0:\n            n_1 += n[i]\n    return n_1",
  "changed_function": "def func10(k: str):\n    k_1 = ''\n    for i in range(len(k)):\n        if i % 2 == 0:\n            k_1 += k[i]\n    return k_1",
  "function_name": "func10",
  "inputs": [
   "'abcdefg'",
   "'12345678'",
   "'HelloWorld'",
   "'PythonCode'",
   "'TestString'"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "z",
  "original_function": "def multiply_by_two(a: int):\n  return a * 2\n  a = 10\n  if a < 10:\n    return a + 5\n  else:\n    return a - 5",
  "changed_function": "def multiply_by_two(z: int):\n  return z * 2\n  a = 10\n  if a < 10:\n    return a + 5\n  else:\n    return a - 5",
  "function_name": "multiply_by_two",
  "inputs": [
   "5",
   "10",
   "20",
   "3",
   "-2"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "x",
  "original_function": "def list_sum(b: list):\n  sum = 0\n  for b in b:\n    sum += b\n  return sum",
  "changed_function": "def list_sum(x: list):\n  sum = 0\n  for b in x:\n    sum += b\n  return sum",
  "function_name": "list_sum",
  "inputs": [
   "[1, 2, 3]",
   "[10, 20, 30]",
   "[1, 2]",
   "[-1, -2, -3]",
   "[5, 5, 5]"
  ]
 },
 {
  "target_argument": "str1",
  "change_to": "str2",
  "original_function": "def concat_strings(str1: str, str2: str):\n  return str1 + \" \" + str2\n  str2 = str1 + \"1\"\n  return str2",
  "changed_function": "def concat_strings(str2: str, str1: str):\n  return str2 + \" \" + str1\n  str1 = str2 + \"1\"\n  return str1",
  "function_name": "concat_strings",
  "inputs": [
   "\"hello\", \"world\"",
   "\"apple\", \"orange\"",
   "\"1\", \"2\"",
   "\"a\", \"b\"",
   "\"python\", \"programming\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "c",
  "original_function": "def find_max(a: int, b: int):\n  a = max(a, b)\n  return a",
  "changed_function": "def find_max(c: int, b: int):\n  c = max(c, b)\n  return c",
  "function_name": "find_max",
  "inputs": [
   "10, 5",
   "5, 10",
   "100, 10",
   "2, 3",
   "7, 7"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "x",
  "original_function": "def reverse_words(text: str):\n  words = text.split()\n  return \" \".join(words[::-1])\n  text = \"hello world\"\n  return text",
  "changed_function": "def reverse_words(x: str):\n  words = x.split()\n  return \" \".join(words[::-1])\n  text = \"hello world\"\n  return text",
  "function_name": "reverse_words",
  "inputs": [
   "\"This is a test.\"",
   "\"Reverse this string.\"",
   "\"Hello world.\"",
   "\"Python is fun!\"",
   "\"One two three.\""
  ]
 },
 {
  "target_argument": "l",
  "change_to": "a",
  "original_function": "def remove_duplicates(l: list):\n  unique_list = []\n  for l in l:\n    if l not in unique_list:\n      unique_list.append(l)\n  return unique_list",
  "changed_function": "def remove_duplicates(a: list):\n  unique_list = []\n  for l in a:\n    if l not in unique_list:\n      unique_list.append(l)\n  return unique_list",
  "function_name": "remove_duplicates",
  "inputs": [
   "[1, 2, 2, 3, 4, 4, 5]",
   "[1, 1, 1, 1, 1]",
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[1, 2, 1, 2, 1]"
  ]
 },
 {
  "target_argument": "arr",
  "change_to": "c",
  "original_function": "def is_sorted(arr: list):\n  for i in range(len(arr) - 1):\n    if arr[i] > arr[i + 1]:\n      return False\n  return True",
  "changed_function": "def is_sorted(c: list):\n  for i in range(len(c) - 1):\n    if c[i] > c[i + 1]:\n      return False\n  return True",
  "function_name": "is_sorted",
  "inputs": [
   "[1, 2, 3, 4, 5]",
   "[5, 4, 3, 2, 1]",
   "[1, 2, 3, 2, 1]",
   "[1, 1, 1, 1, 1]",
   "[10, 1, 2, 3, 4]"
  ]
 },
 {
  "target_argument": "number",
  "change_to": "a",
  "original_function": "def is_prime(number: int):\n  if number <= 1:\n    return False\n  for i in range(2, int(number**0.5) + 1):\n    if number % i == 0:\n      return False\n  return True",
  "changed_function": "def is_prime(a: int):\n  if a <= 1:\n    return False\n  for i in range(2, int(a**0.5) + 1):\n    if a % i == 0:\n      return False\n  return True",
  "function_name": "is_prime",
  "inputs": [
   "2",
   "7",
   "10",
   "11",
   "15"
  ]
 },
 {
  "target_argument": "text",
  "change_to": "b",
  "original_function": "def count_vowels(text: str):\n  vowels = \"aeiouAEIOU\"\n  count = 0\n  for text in text:\n    if text in vowels:\n      count += 1\n  return count",
  "changed_function": "def count_vowels(b: str):\n  vowels = \"aeiouAEIOU\"\n  count = 0\n  for text in b:\n    if text in vowels:\n      count += 1\n  return count",
  "function_name": "count_vowels",
  "inputs": [
   "\"hello world\"",
   "\"Python programming\"",
   "\"This is a test.\"",
   "\"1234567890\"",
   "\"aeiouAEIOU\""
  ]
 },
 {
  "target_argument": "b",
  "change_to": "c",
  "original_function": "def compute_area(b: int):\n  h = 5\n  return b * h * 2",
  "changed_function": "def compute_area(c: int):\n  h = 5\n  return c * h * 2",
  "function_name": "compute_area",
  "inputs": [
   "5",
   "10",
   "15",
   "20",
   "25"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def calculate_sum(x: int):\n  y = x + 10\n  return y * x",
  "changed_function": "def calculate_sum(y: int):\n  z = y + 10\n  return z * y",
  "function_name": "calculate_sum",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def compute_average(a: int):\n  b = a + 2\n  return b / 2",
  "changed_function": "def compute_average(x: int):\n  y = x + 2\n  return y / 2",
  "function_name": "compute_average",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def check_even(n: int):\n  return n % 2 == 0",
  "changed_function": "def check_even(k: int):\n  return k % 2 == 0",
  "function_name": "check_even",
  "inputs": [
   "2",
   "4",
   "6",
   "8",
   "10"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def reverse_string(s: str):\n  return s[::-1]",
  "changed_function": "def reverse_string(t: str):\n  return t[::-1]",
  "function_name": "reverse_string",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"coding\"",
   "\"data\""
  ]
 },
 {
  "target_argument": "x",
  "change_to": "b",
  "original_function": "def find_max(x: int):\n  y = x + 1\n  return y if y > x else x",
  "changed_function": "def find_max(b: int):\n  c = b + 1\n  return c if c > b else b",
  "function_name": "find_max",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "k",
  "original_function": "def is_palindrome(m: str):\n  return m == m[::-1]",
  "changed_function": "def is_palindrome(k: str):\n  return k == k[::-1]",
  "function_name": "is_palindrome",
  "inputs": [
   "\"racecar\"",
   "\"madam\"",
   "\"level\"",
   "\"rotor\"",
   "\"noon\""
  ]
 },
 {
  "target_argument": "a",
  "change_to": "b",
  "original_function": "def get_first_element(a: list):\n  return a[0] if a else None",
  "changed_function": "def get_first_element(b: list):\n  return b[0] if b else None",
  "function_name": "get_first_element",
  "inputs": [
   "[1, 2, 3]",
   "['a', 'b', 'c']",
   "[True, False, True]",
   "['hello', 'world']",
   "[10, 20, 30]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def is_prime(x: int):\n  for i in range(2, int(x ** 0.5) + 1):\n    if x % i == 0:\n      return False\n  return True",
  "changed_function": "def is_prime(y: int):\n  for i in range(2, int(y ** 0.5) + 1):\n    if y % i == 0:\n      return False\n  return True",
  "function_name": "is_prime",
  "inputs": [
   "2",
   "3",
   "5",
   "7",
   "11"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "z",
  "original_function": "def myFunc(a: int):\n  a_list = [1,2,3]\n  x = a_list\n  if a < 5:\n    a = 4\n    if (a == 1):\n      a = 3\n      a_list.append(a)\n      if a > 5:\n        return True\n  return x[0] == a_list[1]",
  "changed_function": "def myFunc(z: int):\n  a_list = [1,2,3]\n  x = a_list\n  if z < 5:\n    z = 4\n    if (z == 1):\n      z = 3\n      a_list.append(z)\n      if z > 5:\n        return True\n  return x[0] == a_list[1]",
  "function_name": "myFunc",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def check_Equality(s: str):\n  a = len(s)\n  if (s[0] == s[-1]):\n    s = 'Equal'\n    if s != 'Not Equal':\n      return 'Equal'\n  else:\n    s = 'Not Equal'\n    return s",
  "changed_function": "def check_Equality(a: str):\n  b = len(a)\n  if (a[0] == a[-1]):\n    a = 'Equal'\n    if a != 'Not Equal':\n      return 'Equal'\n  else:\n    a = 'Not Equal'\n    return a",
  "function_name": "check_Equality",
  "inputs": [
   "'aa'",
   "'ab'",
   "'aba'",
   "'a'",
   "'abb'"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def check_Equality(x: str):\n  a = len(x)\n  b = x[0]\n  if (b == x[-1]):\n    x = 'Equal'\n    if x != 'Not Equal':\n      return 'Equal'\n  else:\n    x = 'Not Equal'\n    return x",
  "changed_function": "def check_Equality(a: str):\n  b = len(a)\n  c = a[0]\n  if (c == a[-1]):\n    a = 'Equal'\n    if a != 'Not Equal':\n      return 'Equal'\n  else:\n    a = 'Not Equal'\n    return a",
  "function_name": "check_Equality",
  "inputs": [
   "'aa'",
   "'ab'",
   "'aba'",
   "'a'",
   "'abb'"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def check_Equality(s: str):\n  a = len(s)\n  if (s[0] == s[-1]):\n    s = 'Equal'\n    if s != 'Not Equal':\n      return 'Equal'\n  else:\n    s = 'Not Equal'\n    return s",
  "changed_function": "def check_Equality(a: str):\n  b = len(a)\n  if (a[0] == a[-1]):\n    a = 'Equal'\n    if a != 'Not Equal':\n      return 'Equal'\n  else:\n    a = 'Not Equal'\n    return a",
  "function_name": "check_Equality",
  "inputs": [
   "'aa'",
   "'ab'",
   "'aba'",
   "'a'",
   "'abb'"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "t",
  "original_function": "def check_Equality(x: str):\n  t = len(x)\n  if (x[0] == x[-1]):\n    x = 'Equal'\n    if x != 'Not Equal':\n      return 'Equal'\n  else:\n    x = 'Not Equal'\n    return x",
  "changed_function": "def check_Equality(t: str):\n  s = len(t)\n  if (t[0] == t[-1]):\n    t = 'Equal'\n    if t != 'Not Equal':\n      return 'Equal'\n  else:\n    t = 'Not Equal'\n    return t",
  "function_name": "check_Equality",
  "inputs": [
   "'aa'",
   "'ab'",
   "'aba'",
   "'a'",
   "'abb'"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def my_function(x: bool):\n  if x:\n    x = True\n    return True\n  else:\n    x = False\n    return False",
  "changed_function": "def my_function(y: bool):\n  if y:\n    y = True\n    return True\n  else:\n    y = False\n    return False",
  "function_name": "my_function",
  "inputs": [
   "True",
   "False",
   "not True",
   "not False",
   "bool(1)"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "b",
  "original_function": "def foo(z: str):\n  b = True\n  if z[0] == 'a':\n    z = 'Hello'\n  else:\n    z = 'world'\n  if z != 'world':\n    return b\n  return 'hello'",
  "changed_function": "def foo(b: str):\n  c = True\n  if b[0] == 'a':\n    b = 'Hello'\n  else:\n    b = 'world'\n  if b != 'world':\n    return c\n  return 'hello'",
  "function_name": "foo",
  "inputs": [
   "'apple'",
   "'banana'",
   "'orange'",
   "'a'",
   "'pear'"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def my_function(s: int):\n  s_list = []\n  if s > 0:\n    for i in range(s):\n      s_list.append(i)\n  return s_list",
  "changed_function": "def my_function(a: int):\n  a_list = []\n  if a > 0:\n    for i in range(a):\n      a_list.append(i)\n  return a_list",
  "function_name": "my_function",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "s",
  "original_function": "def my_function(a: int):\n  x = 0\n  a_list = [1,2,3]\n  if a > 0:\n    x = a + a_list[0]\n  return x + a_list[1]",
  "changed_function": "def my_function(s: int):\n  x = 0\n  s_list = [1,2,3]\n  if s > 0:\n    x = s + s_list[0]\n  return x + s_list[1]",
  "function_name": "my_function",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "a",
  "original_function": "def func_one(z: int):\n  if z > 0:\n    a = 1\n    if z < 2:\n      return z\n    else:\n      z = 2\n      return a\n  else:\n    return -1",
  "changed_function": "def func_one(a: int):\n  if a > 0:\n    b = 1\n    if a < 2:\n      return a\n    else:\n      a = 2\n      return b\n  else:\n    return -1",
  "function_name": "func_one",
  "inputs": [
   "0",
   "1",
   "2",
   "3",
   "4"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def fun1(n: int):\n  s = 0\n  for i in range(n):\n    s = s + i\n  return (lambda n: n + 1)(s)",
  "changed_function": "def fun1(m: int):\n  s = 0\n  for i in range(m):\n    s = s + i\n  return (lambda n: n + 1)(s)",
  "function_name": "fun1",
  "inputs": [
   "10",
   "20",
   "5",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "k",
  "original_function": "def fun2(p: int):\n  list1 = [1, 2, 3]\n  list2 = [4, 5, 6]\n  def helper(p: int):\n    if p == 1:\n      return list1\n    elif p == 2:\n      return list2\n    else:\n      return []\n  return (lambda p: helper(p) + [1])(p)",
  "changed_function": "def fun2(k: int):\n  list1 = [1, 2, 3]\n  list2 = [4, 5, 6]\n  def helper(k: int):\n    if k == 1:\n      return list1\n    elif k == 2:\n      return list2\n    else:\n      return []\n  return (lambda p: helper(p) + [1])(k)",
  "function_name": "fun2",
  "inputs": [
   "1",
   "2",
   "3",
   "0",
   "4"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def fun3(x: bool):\n  if x:\n    return (lambda x: x)(x)\n  else:\n    return (lambda y: y + 1)(1)",
  "changed_function": "def fun3(a: bool):\n  if a:\n    return (lambda x: x)(a)\n  else:\n    return (lambda y: y + 1)(1)",
  "function_name": "fun3",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "k",
  "change_to": "j",
  "original_function": "def fun4(k: int):\n  list_a = [1, 2, 3]\n  list_b = [4, 5, 6]\n  result = (lambda k: (lambda k: list_a + list_b)(k))(k)\n  return (lambda k: result + [k])(k)",
  "changed_function": "def fun4(j: int):\n  list_a = [1, 2, 3]\n  list_b = [4, 5, 6]\n  result = (lambda k: (lambda k: list_a + list_b)(k))(j)\n  return (lambda k: result + [j])(j)",
  "function_name": "fun4",
  "inputs": [
   "1",
   "2",
   "3",
   "0",
   "4"
  ]
 },
 {
  "target_argument": "z",
  "change_to": "y",
  "original_function": "def fun5(z: int):\n  if z < 5:\n    return (lambda z: (lambda z: z * 2)(z))(z)\n  else:\n    return (lambda z: z + 1)(z)",
  "changed_function": "def fun5(y: int):\n  if y < 5:\n    return (lambda z: (lambda z: z * 2)(z))(y)\n  else:\n    return (lambda z: z + 1)(y)",
  "function_name": "fun5",
  "inputs": [
   "1",
   "10",
   "5",
   "3",
   "7"
  ]
 },
 {
  "target_argument": "t",
  "change_to": "g",
  "original_function": "def fun6(t: str):\n  return (lambda t: t + '123')(t)",
  "changed_function": "def fun6(g: str):\n  return (lambda t: t + '123')(g)",
  "function_name": "fun6",
  "inputs": [
   "'hello'",
   "'world'",
   "'python'",
   "'programming'",
   "'coding'"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "c",
  "original_function": "def fun7(b: bool):\n  if b:\n    return (lambda b: b)(b)\n  else:\n    return (lambda b: not b)(b)",
  "changed_function": "def fun7(c: bool):\n  if c:\n    return (lambda b: b)(c)\n  else:\n    return (lambda b: not b)(c)",
  "function_name": "fun7",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "y",
  "change_to": "a",
  "original_function": "def fun8(y: int):\n  def helper(y: int):\n    return y + 1\n  return (lambda y: helper(y) * 2)(y)",
  "changed_function": "def fun8(a: int):\n  def helper(y: int):\n    return y + 1\n  return (lambda y: helper(y) * 2)(a)",
  "function_name": "fun8",
  "inputs": [
   "10",
   "20",
   "5",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "k",
  "original_function": "def fun9(x: int):\n  list1 = [1, 2, 3]\n  list2 = [4, 5, 6]\n  result = (lambda x: (lambda x: list1 + list2)(x))(x)\n  return (lambda x: result + [x])(x)",
  "changed_function": "def fun9(k: int):\n  list1 = [1, 2, 3]\n  list2 = [4, 5, 6]\n  result = (lambda x: (lambda x: list1 + list2)(x))(k)\n  return (lambda x: result + [k])(k)",
  "function_name": "fun9",
  "inputs": [
   "1",
   "2",
   "3",
   "0",
   "4"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "x",
  "original_function": "def fun10(a: int):\n  b = 0\n  for i in range(a):\n    b = b + i\n  return (lambda a: a + 1)(b)",
  "changed_function": "def fun10(x: int):\n  b = 0\n  for i in range(x):\n    b = b + i\n  return (lambda a: a + 1)(b)",
  "function_name": "fun10",
  "inputs": [
   "10",
   "20",
   "5",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "k",
  "original_function": "def my_func(m: int):\n  y = m\n  g = lambda m: m + 1\n  return g(y)",
  "changed_function": "def my_func(k: int):\n  y = k\n  g = lambda m: m + 1\n  return g(y)",
  "function_name": "my_func",
  "inputs": [
   "5",
   "10",
   "2",
   "1",
   "8"
  ]
 },
 {
  "target_argument": "m",
  "change_to": "k",
  "original_function": "def func2(m: int):\n  x = [1,2]\n  y = m\n  g = lambda m: m + y\n  return g(x[m])",
  "changed_function": "def func2(k: int):\n  x = [1,2]\n  y = k\n  g = lambda m: m + y\n  return g(x[k])",
  "function_name": "func2",
  "inputs": [
   "0",
   "1",
   "0",
   "1",
   "0"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "z",
  "original_function": "def func3(n: bool):\n  if n:\n    x = lambda n: n + 1\n  else:\n    x = lambda n: n - 1\n  return x(n)",
  "changed_function": "def func3(z: bool):\n  if z:\n    x = lambda n: n + 1\n  else:\n    x = lambda n: n - 1\n  return x(z)",
  "function_name": "func3",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "a",
  "original_function": "def func4(n: int):\n  g = lambda n: n * 2\n  return g(n)",
  "changed_function": "def func4(a: int):\n  g = lambda n: n * 2\n  return g(a)",
  "function_name": "func4",
  "inputs": [
   "10",
   "5",
   "1",
   "2",
   "4"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "d",
  "original_function": "def func5(s: str):\n  g = lambda s: s + \"hello\"\n  return g(s)",
  "changed_function": "def func5(d: str):\n  g = lambda s: s + \"hello\"\n  return g(d)",
  "function_name": "func5",
  "inputs": [
   "\"test\"",
   "\"python\"",
   "\"world\"",
   "\"coding\"",
   "\"hello\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "b",
  "original_function": "def func6(n: int):\n  x = lambda n: n + 1\n  g = lambda n: n + 1\n  return x(n) + g(n)",
  "changed_function": "def func6(b: int):\n  x = lambda n: n + 1\n  g = lambda a: a + 1\n  return x(b) + g(b)",
  "function_name": "func6",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "p",
  "original_function": "def func7(x: int):\n  g = lambda x: x * 2\n  y = g(x)\n  return y",
  "changed_function": "def func7(p: int):\n  g = lambda x: x * 2\n  y = g(p)\n  return y",
  "function_name": "func7",
  "inputs": [
   "10",
   "2",
   "5",
   "1",
   "8"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def func8(a: str):\n  h = lambda a: a + \"abc\"\n  return h(a)",
  "changed_function": "def func8(n: str):\n  h = lambda a: a + \"abc\"\n  return h(n)",
  "function_name": "func8",
  "inputs": [
   "\"hello\"",
   "\"world\"",
   "\"python\"",
   "\"coding\"",
   "\"javascript\""
  ]
 },
 {
  "target_argument": "y",
  "change_to": "a",
  "original_function": "def func9(y: int):\n  g = lambda y: y * 2\n  h = lambda y: y * 3\n  return g(y) + h(y)",
  "changed_function": "def func9(a: int):\n  g = lambda y: y * 2\n  h = lambda b: b * 3\n  return g(a) + h(a)",
  "function_name": "func9",
  "inputs": [
   "2",
   "5",
   "10",
   "1",
   "3"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "r",
  "original_function": "def func10(x: int):\n  g = lambda x: x * 3\n  return g(x)",
  "changed_function": "def func10(r: int):\n  g = lambda x: x * 3\n  return g(r)",
  "function_name": "func10",
  "inputs": [
   "3",
   "5",
   "10",
   "20",
   "4"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "m",
  "original_function": "def func1(n: int):\n  k = 1\n  if n > 0:\n    k = 2\n  return (lambda n: n * 2)(k)",
  "changed_function": "def func1(m: int):\n  k = 1\n  if m > 0:\n    k = 2\n  return (lambda n: n * 2)(k)",
  "function_name": "func1",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "n",
  "original_function": "def func2(x: int):\n  l = [1, 2]\n  if x == 1:\n    l.append(3)\n  return (lambda x: x * x)(len(l))",
  "changed_function": "def func2(n: int):\n  l = [1, 2]\n  if n == 1:\n    l.append(3)\n  return (lambda x: x * x)(len(l))",
  "function_name": "func2",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "a",
  "original_function": "def func3(s: str):\n  a = 1\n  for i in range(len(s)):\n    a += int(s[i])\n  return (lambda s: s + 1)(a)",
  "changed_function": "def func3(a: str):\n  b = 1\n  for i in range(len(a)):\n    b += int(a[i])\n  return (lambda s: s + 1)(b)",
  "function_name": "func3",
  "inputs": [
   "'1'",
   "'2'",
   "'3'",
   "'4'",
   "'5'"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "y",
  "original_function": "def func4(b: bool):\n  x = 1\n  if b:\n    x = 2\n  return (lambda b: b + x)(1)",
  "changed_function": "def func4(y: bool):\n  x = 1\n  if y:\n    x = 2\n  return (lambda b: b + x)(1)",
  "function_name": "func4",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "a",
  "original_function": "def func5(n: int):\n  l = []\n  for i in range(n):\n    l.append(i)\n  return (lambda n: n + 1)(len(l))",
  "changed_function": "def func5(a: int):\n  l = []\n  for i in range(a):\n    l.append(i)\n  return (lambda n: n + 1)(len(l))",
  "function_name": "func5",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "x",
  "original_function": "def func6(l: list):\n  n = 0\n  for i in l:\n    n += i\n  return (lambda l: l + 1)(n)",
  "changed_function": "def func6(x: list):\n  n = 0\n  for i in x:\n    n += i\n  return (lambda l: l + 1)(n)",
  "function_name": "func6",
  "inputs": [
   "[1, 2]",
   "[3, 4]",
   "[5, 6]",
   "[7, 8]",
   "[9, 10]"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "y",
  "original_function": "def func7(x: int):\n  y = 1\n  if x == 1:\n    y = 2\n  return (lambda x: x * y)(3)",
  "changed_function": "def func7(y: int):\n  z = 1\n  if y == 1:\n    z = 2\n  return (lambda x: x * z)(3)",
  "function_name": "func7",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def func8(a: int):\n  s = ''\n  for i in range(a):\n    s += str(i)\n  return (lambda a: a + 1)(len(s))",
  "changed_function": "def func8(n: int):\n  s = ''\n  for i in range(n):\n    s += str(i)\n  return (lambda a: a + 1)(len(s))",
  "function_name": "func8",
  "inputs": [
   "1",
   "2",
   "3",
   "4",
   "5"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "t",
  "original_function": "def func9(s: str):\n  n = 0\n  for i in s:\n    n += int(i)\n  return (lambda s: s + 1)(n)",
  "changed_function": "def func9(t: str):\n  n = 0\n  for i in t:\n    n += int(i)\n  return (lambda s: s + 1)(n)",
  "function_name": "func9",
  "inputs": [
   "'12'",
   "'34'",
   "'56'",
   "'78'",
   "'90'"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "n",
  "original_function": "def func10(b: bool):\n  if b:\n    return (lambda b: b + 1)(1)\n  else:\n    return (lambda b: b * 2)(1)",
  "changed_function": "def func10(n: bool):\n  if n:\n    return (lambda b: b + 1)(1)\n  else:\n    return (lambda b: b * 2)(1)",
  "function_name": "func10",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "True"
  ]
 },
 {
  "target_argument": "d",
  "change_to": "p",
  "original_function": "def func2(d: int):\n    b = 0\n    for i in range(d):\n        if i % 2 == 0:\n            b += i * i\n        else:\n            b -= i * i\n    return b",
  "changed_function": "def func2(p: int):\n    b = 0\n    for i in range(p):\n        if i % 2 == 0:\n            b += i * i\n        else:\n            b -= i * i\n    return b",
  "function_name": "func2",
  "inputs": [
   "10",
   "20",
   "30",
   "40",
   "50"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "p",
  "original_function": "def func3(x: int):\n    for i in range(x):\n        print(i, end=' ')\n        for j in range(x - i):\n            print(' * ', end=' ')\n        print()",
  "changed_function": "def func3(p: int):\n    for i in range(p):\n        print(i, end=' ')\n        for j in range(p - i):\n            print(' * ', end=' ')\n        print()",
  "function_name": "func3",
  "inputs": [
   "10",
   "5",
   "7",
   "3",
   "8"
  ]
 },
 {
  "target_argument": "l",
  "change_to": "n",
  "original_function": "def func4(l: list):\n    s = 0\n    for i in l:\n        s += i\n    return s",
  "changed_function": "def func4(n: list):\n    s = 0\n    for i in n:\n        s += i\n    return s",
  "function_name": "func4",
  "inputs": [
   "[1, 2, 3]",
   "[4, 5, 6]",
   "[7, 8, 9]",
   "[10, 11, 12]",
   "[13, 14, 15]"
  ]
 },
 {
  "target_argument": "n",
  "change_to": "x",
  "original_function": "def func5(n: int):\n    r = 0\n    while n > 0:\n        r += n % 10\n        n //= 10\n    return r",
  "changed_function": "def func5(x: int):\n    r = 0\n    while x > 0:\n        r += x % 10\n        x //= 10\n    return r",
  "function_name": "func5",
  "inputs": [
   "12345",
   "67890",
   "101010",
   "55555",
   "99999"
  ]
 },
 {
  "target_argument": "s",
  "change_to": "k",
  "original_function": "def func6(s: str):\n    l = len(s)\n    if l % 2 == 0:\n        m = l // 2\n        return s[:m] + s[m:]\n    else:\n        return s[:l//2] + s[l//2+1:]",
  "changed_function": "def func6(k: str):\n    l = len(k)\n    if l % 2 == 0:\n        m = l // 2\n        return k[:m] + k[m:]\n    else:\n        return k[:l//2] + k[l//2+1:]",
  "function_name": "func6",
  "inputs": [
   "\"string\"",
   "\"example\"",
   "\"test string\"",
   "\"python\"",
   "\"programming\""
  ]
 },
 {
  "target_argument": "n",
  "change_to": "k",
  "original_function": "def func7(n: int):\n    for i in range(n):\n        for j in range(i + 1):\n            print('* ', end='')\n        print()",
  "changed_function": "def func7(k: int):\n    for i in range(k):\n        for j in range(i + 1):\n            print('* ', end='')\n        print()",
  "function_name": "func7",
  "inputs": [
   "5",
   "7",
   "10",
   "3",
   "8"
  ]
 },
 {
  "target_argument": "a",
  "change_to": "n",
  "original_function": "def func8(a: int):\n    b = a\n    c = 0\n    while a > 0:\n        c = a % 10 + c * 10\n        a //= 10\n    return c == b",
  "changed_function": "def func8(n: int):\n    b = n\n    c = 0\n    while n > 0:\n        c = n % 10 + c * 10\n        n //= 10\n    return c == b",
  "function_name": "func8",
  "inputs": [
   "121",
   "321",
   "101",
   "151",
   "232"
  ]
 },
 {
  "target_argument": "x",
  "change_to": "a",
  "original_function": "def h(x: bool):\n    return (lambda x: (lambda y: x and y)(True))(lambda z: x or z)",
  "changed_function": "def h(a: bool):\n    return (lambda b: (lambda y: b and y)(True))(lambda z: a or z)",
  "function_name": "h",
  "inputs": [
   "True",
   "False",
   "False",
   "True",
   "True"
  ]
 },
 {
  "target_argument": "b",
  "change_to": "a",
  "original_function": "def l(b: bool):\n    return (lambda b: (lambda c: b and c)(False))(lambda d: b or d)",
  "changed_function": "def l(a: bool):\n    return (lambda b: (lambda c: b and c)(False))(lambda d: a or d)",
  "function_name": "l",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "False"
  ]
 },
 {
  "target_argument": "p",
  "change_to": "n",
  "original_function": "def quxbar(p: bool):\n  return (lambda p: p and True)(lambda q: p or False)",
  "changed_function": "def quxbar(n: bool):\n  return (lambda p: p and True)(lambda q: n or False)",
  "function_name": "quxbar",
  "inputs": [
   "True",
   "False",
   "True",
   "False",
   "False"
  ]
 }
]