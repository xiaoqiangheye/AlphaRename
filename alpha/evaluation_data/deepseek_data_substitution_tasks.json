[{"expr": "x + 2", "variable": "x", "original_function": "def bar(a: int):\n    x = 3\n    c = 5\n    for i in range(a):\n        c += i\n        x *= i\n    return c + x", "output_expr": "def bar():\n    z = 3\n    c = 5\n    for i in range(x + 2):\n        c += i\n        z *= i\n    return c + z", "function_name": "bar", "inputs": ["1", "2", "3"], "changed_function": "def bar():\n    x = 3\n    c = 5\n    for i in range(x + 2):\n        c += i\n        x *= i\n    return c + x"}, {"expr": "x * 2", "variable": "x", "original_function": "def baz(y: int):\n    result = 0\n    for i in range(y):\n        result += i\n        x = 2* i\n    return result + x", "output_expr": "def baz():\n    result = 0\n    for i in range(x * 2):\n        result += i\n        z = 2* i\n    return result + z", "function_name": "baz", "inputs": ["4", "6", "8"], "changed_function": "def baz():\n    result = 0\n    for i in range(x):\n        result += i\n        x = 2* i\n    return result + x"}, {"expr": "x - 5", "variable": "x", "original_function": "def foo(n: int):\n    x = 0\n    while x < n:\n        x += 1\n        print(x)\n    return x", "output_expr": "def foo():\n    y = 0\n    while y < x - 5:\n        y += 1\n        print(y)\n    return y", "function_name": "foo", "inputs": ["10", "20", "30"], "changed_function": "def foo():\n    x = 0\n    while x < n - 5:\n        x += 1\n        print(x)\n    return x"}, {"expr": "x + 1", "variable": "x", "original_function": "def foo(n: int):\n  x = 0\n  y = n + 2\n  z = 3\n  return x + y + z", "output_expr": "def foo():\n  w = 0\n  y = x + 1 + 2\n  z = 3\n  return w + y + z", "function_name": "foo", "inputs": ["5", "6", "1"], "changed_function": "def foo():\n  x = 0\n  y = x + 1 + 2\n  z = 3\n  return x + y + z"}, {"expr": "x + 1", "variable": "x", "original_function": "def qux(a: bool):\n  x = True\n  if a:\n    x = False\n  return x", "output_expr": "def qux():\n  y = True\n  if a:\n    y = False\n  return y", "function_name": "qux", "inputs": ["True", "False"], "changed_function": "def qux():\n  x = True\n  if x + 1:\n    x = False\n  return x"}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(x: int):\n  y = 1\n  z = x + y\n  return z * 2", "output_expr": "def foo():\n  y = 1\n  z = x + 2 + y\n  return z * 2", "function_name": "foo", "inputs": ["1", "2", "3"], "changed_function": "def foo():\n  y = 1\n  z = 2 + y\n  return z * 2"}, {"expr": "y * 2", "variable": "y", "original_function": "def bar(y: int):\n  x = 5\n  y = x + y\n  return x * y", "output_expr": "def bar():\n  x = 5\n  y = x + y * 2\n  return x * y", "function_name": "bar", "inputs": ["2", "4", "6"], "changed_function": "def bar():\n  x = 5\n  y = x + y\n  return x * y"}, {"expr": "x * 3", "variable": "x", "original_function": "def baz(x: str):\n  return x[0] * 3", "output_expr": "def baz():\n  return x * 3[0]", "function_name": "baz", "inputs": ["'abc'", "'def'", "'ghi'"], "changed_function": "def baz():\n  return x[0] * 3"}, {"expr": "x - 1", "variable": "x", "original_function": "def qux(x: bool):\n  if x:\n    return True\n  else:\n    return False", "output_expr": "def qux():\n  if x - 1:\n    return True\n  else:\n    return False", "function_name": "qux", "inputs": ["True", "False"], "changed_function": "def qux():\n  return qux(x - 1)"}, {"expr": "x + 5", "variable": "x", "original_function": "def fun1(a: int):\n        b = 10\n        return a + b - 1", "output_expr": "def fun1():\n        b = 10\n        return x + 5 + b - 1", "function_name": "fun1", "inputs": ["5", "10", "2"], "changed_function": "def fun1():\n        b = 10\n        return x + 5 + b - 1"}, {"expr": "y * 3", "variable": "y", "original_function": "def fun2(a: int):\n        y = 2\n        return a + y * 2", "output_expr": "def fun2():\n        z = 2\n        return y * 3 + z * 2", "function_name": "fun2", "inputs": ["2", "3", "6"], "changed_function": "def fun2():\n        y = 2\n        return y * 3"}, {"expr": "x * 10", "variable": "x", "original_function": "def fun3(a: str):\n        b = 'hello'\n        if a == 'world':\n            return a + b\n        else:\n            return a", "output_expr": "def fun3():\n        b = 'hello'\n        if x * 10 == 'world':\n            return x * 10 + b\n        else:\n            return x * 10", "function_name": "fun3", "inputs": ["'hello'", "'world'", "'foo'"], "changed_function": "def fun3():\n        b = 'hello'\n        if x == 'world':\n            return x + b\n        else:\n            return x"}, {"expr": "x / 2", "variable": "x", "original_function": "def fun5(a: bool):\n        if a:\n            return 'True'\n        else:\n            return 'False'", "output_expr": "def fun5():\n        if x / 2:\n            return 'True'\n        else:\n            return 'False'", "function_name": "fun5", "inputs": ["True", "False"], "changed_function": "def fun5():\n        if x / 2:\n            return 'True'\n        else:\n            return 'False'"}, {"expr": "x + 2", "variable": "x", "original_function": "def sum_with_offset(y: int):\n  offset = 3\n  return y + offset", "output_expr": "def sum_with_offset():\n  z = 3\n  return x + 2 + z", "function_name": "sum_with_offset", "inputs": ["5", "4", "1"], "changed_function": "def sum_with_offset():\n  offset = 3\n  return y + offset"}, {"expr": "y - 1", "variable": "y", "original_function": "def double_and_add_one(x: int):\n  doubled = 2 * x\n  return doubled + 1", "output_expr": "def double_and_add_one():\n  doubled = 2 * (y - 1)\n  return doubled + 1", "function_name": "double_and_add_one", "inputs": ["5", "4", "1"], "changed_function": "def double_and_add_one():\n  y = double_and_add_one.y\n  doubled = 2 * y\n  return doubled + 1"}, {"expr": "a * 2", "variable": "a", "original_function": "def calculate_area(a: int):\n  width = 5\n  area = a * width\n  return area", "output_expr": "def calculate_area():\n  width = 5\n  area = a * 2 * width\n  return area", "function_name": "calculate_area", "inputs": ["5", "4", "1"], "changed_function": "def calculate_area():\n  width = 5\n  area = a * width\n  return area"}, {"expr": "z * 3", "variable": "z", "original_function": "def check_even(z: int):\n  if z % 2 == 0:\n    return True\n  else:\n    return False", "output_expr": "def check_even():\n  if z * 3 % 2 == 0:\n    return True\n  else:\n    return False", "function_name": "check_even", "inputs": ["5", "4", "1"], "changed_function": "def check_even():\n  z = z * 3\n  if z % 2 == 0:\n    return True\n  else:\n    return False"}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(x: int):\n    temp = []\n    for y in range(x):\n        temp.append(y)\n    return temp", "output_expr": "def foo():\n    temp = []\n    for y in range(x + 2):\n        temp.append(y)\n    return temp", "function_name": "foo", "inputs": ["5", "1", "4"], "changed_function": "def foo():\n    temp = []\n    for y in range(x + 2):\n        temp.append(y)\n    return temp"}, {"expr": "y + 1", "variable": "y", "original_function": "def bar(y: int):\n    temp = []\n    for x in range(y):\n        temp.append(x)\n    return temp", "output_expr": "def bar():\n    temp = []\n    for x in range(y + 1):\n        temp.append(x)\n    return temp", "function_name": "bar", "inputs": ["5", "1", "4"], "changed_function": "def bar():\n    temp = []\n    for x in range(y + 1):\n        temp.append(x)\n    return temp"}, {"expr": "y - 1", "variable": "y", "original_function": "def baz(y: int):\n    return y * 2 + 1", "output_expr": "def baz():\n    return (y - 1) * 2 + 1", "function_name": "baz", "inputs": ["5", "1", "4"], "changed_function": "def baz():\n    return y - 1 * 2 + 1"}, {"expr": "y * 2", "variable": "y", "original_function": "def quux(y: int):\n    x = 0\n    for i in range(y):\n        x += i\n    return x", "output_expr": "def quux():\n    z = 0\n    for i in range(y * 2):\n        z += i\n    return z", "function_name": "quux", "inputs": ["5", "1", "4"], "changed_function": "def quux():\n    y = 2\n    x = 0\n    for i in range(y):\n        x += i\n    return x"}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(n: int):\n    result = 0\n    for i in range(n):\n        result += i\n    return result", "output_expr": "def foo():\n    result = 0\n    for i in range(x + 2):\n        result += i\n    return result", "function_name": "foo", "inputs": ["5", "4", "1"], "changed_function": "def foo():\n    result = 0\n    for i in range(x + 2):\n        result += i\n    return result"}, {"expr": "x * 2", "variable": "x", "original_function": "def bar(str1: str):\n    result = ''\n    for i in range(len(str1)):\n        result += str1[i] * 2\n    return result", "output_expr": "def bar():\n    result = ''\n    for i in range(len(str1)):\n        result += str1[i] * x * 2\n    return result", "function_name": "bar", "inputs": ["'abc'", "'def'", "'ghi'"], "changed_function": "def bar():\n    result = ''\n    for i in range(len(x)):\n        result += x[i] * 2\n    return result"}, {"expr": "x * 2", "variable": "x", "original_function": "def qux(b: bool):\n    if b:\n        return 'True'\n    else:\n        return 'False'", "output_expr": "def qux():\n    if b:\n        return 'True'\n    else:\n        return 'False'", "function_name": "qux", "inputs": ["True", "False"], "changed_function": "def qux():\n    return 'True' if x * 2 else 'False'"}, {"expr": "x * 3", "variable": "x", "original_function": "def quux(t: tuple[int, str]):\n    return t[0] + len(t[1])", "output_expr": "def quux():\n    return t[0] + x * 3 + len(t[1])", "function_name": "quux", "inputs": ["(1, 'abc')", "(2, 'def')", "(3, 'ghi')"], "changed_function": "def quux():\n    return x * 3"}, {"expr": "a + 5", "variable": "a", "original_function": "def foo(x: int):\n  if x <= 0:\n    return 0\n  else:\n    return x + foo(x - 1)", "output_expr": "def foo():\n  if a + 5 <= 0:\n    return 0\n  else:\n    return a + 5 + foo(a + 5 - 1)", "function_name": "foo", "inputs": ["5", "4", "1"], "changed_function": "def foo():\n  a = 5\n  if a <= 0:\n    return 0\n  else:\n    return a + foo()"}, {"expr": "b + 2", "variable": "b", "original_function": "def bar(x: int):\n  if x == 0:\n    return 1\n  elif x < 0:\n    return 0\n  else:\n    return x * bar(x - 1)", "output_expr": "def bar():\n  if b + 2 == 0:\n    return 1\n  elif b + 2 < 0:\n    return 0\n  else:\n    return b + 2 * bar(b + 2 - 1)", "function_name": "bar", "inputs": ["5", "4", "1"], "changed_function": "def bar():\n  return b + 2 * bar(b + 2 - 1)"}, {"expr": "c - 3", "variable": "c", "original_function": "def baz(x: int):\n  if x == 1:\n    return 1\n  else:\n    return x * baz(x - 1)", "output_expr": "def baz():\n  if c - 3 == 1:\n    return 1\n  else:\n    return c - 3 * baz(c - 3 - 1)", "function_name": "baz", "inputs": ["5", "4", "1"], "changed_function": "def baz():\n  c = 10\n  return baz(c - 3)"}, {"expr": "d * 2", "variable": "d", "original_function": "def qux(x: str):\n  if len(x) == 0:\n    return ''\n  else:\n    return x[0] + qux(x[1:])", "output_expr": "def qux():\n  if len(d * 2) == 0:\n    return ''\n  else:\n    return d * 2[0] + qux(d * 2[1:])", "function_name": "qux", "inputs": ["'hello'", "'world'", "'python'"], "changed_function": "def qux():\n  return d * 2"}, {"expr": "e + 4", "variable": "e", "original_function": "def quux(x: bool):\n  if x:\n    return True\n  else:\n    return False", "output_expr": "def quux():\n  if e + 4:\n    return True\n  else:\n    return False", "function_name": "quux", "inputs": ["True", "False"], "changed_function": "def quux():\n  return e + 4"}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(n: int):\n  x = 1\n  temp = 2\n  if n > 5:\n    temp = 3\n  else:\n    temp = 4\n  return n + x + temp", "output_expr": "def foo():\n  z = 1\n  temp = 2\n  if x + 2 > 5:\n    temp = 3\n  else:\n    temp = 4\n  return x + 2 + z + temp", "function_name": "foo", "inputs": ["5", "10", "-2"], "changed_function": "def foo():\n  x = 1\n  temp = 2\n  if n > 5:\n    temp = 3\n  else:\n    temp = 4\n  return n + x + temp"}, {"expr": "x * 3", "variable": "x", "original_function": "def bar(b: bool):\n  x = True\n  if b:\n    x = False\n  return x", "output_expr": "def bar():\n  z = True\n  if x * 3:\n    z = False\n  return z", "function_name": "bar", "inputs": ["True", "False"], "changed_function": "def bar():\n  x = True\n  if x:\n    x = False\n  return x * 3"}, {"expr": "x[0]", "variable": "x", "original_function": "def baz(s: str):\n  x = 'hello'\n  if len(s) > 5:\n    x = 'world'\n  return len(x)", "output_expr": "def baz():\n  z = 'hello'\n  if len(x[0]) > 5:\n    z = 'world'\n  return len(z)", "function_name": "baz", "inputs": ["'123456'", "'abcde'"], "changed_function": "def baz():\n  x = 'hello'\n  if len(x) > 5:\n    x = 'world'\n  return len(x)"}, {"expr": "a + 1", "variable": "a", "original_function": "def func1(a: int):\n    b = a + 1\n    c = b * 2\n    return c + a", "output_expr": "def func1():\n    b = a + 1 + 1\n    c = b * 2\n    return c + a + 1", "function_name": "func1", "inputs": ["1", "2", "3"], "changed_function": "def func1():\n    b = a + 1\n    c = b * 2\n    return c + a"}, {"expr": "a + 2", "variable": "a", "original_function": "def func2(a: int):\n    b = a + 1\n    c = b * 2\n    d = a + c\n    return d + 1", "output_expr": "def func2():\n    b = a + 2 + 1\n    c = b * 2\n    d = a + 2 + c\n    return d + 1", "function_name": "func2", "inputs": ["5", "10", "15"], "changed_function": "def func2():\n    b = 2 + 1\n    c = b * 2\n    d = 2 + c\n    return d + 1"}, {"expr": "a + 4", "variable": "a", "original_function": "def func4(a: bool):\n    b = a\n    c = not b\n    return b and c", "output_expr": "def func4():\n    b = a + 4\n    c = not b\n    return b and c", "function_name": "func4", "inputs": ["True", "False"], "changed_function": "def func4():\n    b = a + 4\n    c = not b\n    return b and c"}, {"expr": "x + 1", "variable": "x", "original_function": "def foo(x: int):\n    s = \"hello\"\n    if x > 5:\n        s += \" world\"\n    return s", "output_expr": "def foo():\n    s = \"hello\"\n    if x + 1 > 5:\n        s += \" world\"\n    return s", "function_name": "foo", "inputs": ["1", "2", "3", "4", "5"], "changed_function": "def foo():\n    s = \"hello\"\n    if x + 1 > 5:\n        s += \" world\"\n    return s"}, {"expr": "y - 2", "variable": "y", "original_function": "def bar(y: int):\n    x = y + 1\n    if x > 10:\n        x -= 2\n    return x", "output_expr": "def bar():\n    z = y - 2 + 1\n    if z > 10:\n        z -= 2\n    return z", "function_name": "bar", "inputs": ["2", "3", "4", "5", "6"], "changed_function": "def bar():\n    y = y - 2\n    if y > 10:\n        y -= 2\n    return y"}, {"expr": "x + 2", "variable": "x", "original_function": "def baz(x: int):\n    for i in range(x):\n        x += i\n    return x", "output_expr": "def baz():\n    for i in range(x + 2):\n        z = x + 2\n        z += i\n    return z", "function_name": "baz", "inputs": ["1", "2", "3", "4", "5"], "changed_function": "def baz():\n    for i in range(x + 2):\n        x += i\n    return x"}, {"expr": "a * 2", "variable": "a", "original_function": "def qux(a: int):\n    if a > 10:\n        a = a + 1\n    return a", "output_expr": "def qux():\n    if a * 2 > 10:\n        z = a * 2\n        z = z + 1\n    return z", "function_name": "qux", "inputs": ["1", "2", "3", "4", "5"], "changed_function": "def qux():\n    a = a * 2\n    if a > 10:\n        a = a + 1\n    return a"}, {"expr": "x + 1", "variable": "x", "original_function": "def foo(x: int):\n  y = x + 2\n  z = 3\n  return x + y + z", "output_expr": "def foo():\n  y = x + 1 + 2\n  z = 3\n  return x + 1 + y + z", "function_name": "foo", "inputs": ["1", "2", "3", "4", "5"], "changed_function": "def foo():\n  y = x + 2\n  z = 3\n  return x + y + z"}, {"expr": "y + 1", "variable": "y", "original_function": "def bar(y: int):\n  a = [1, 2, 3]\n  b = [y, y, y]\n  for i in range(len(a)):\n    a[i] = a[i] * y\n  return a", "output_expr": "def bar():\n  a = [1, 2, 3]\n  b = [y + 1, y + 1, y + 1]\n  for i in range(len(a)):\n    a[i] = a[i] * (y + 1)\n  return a", "function_name": "bar", "inputs": ["1", "2", "3", "4", "5"], "changed_function": "def bar():\n  a = [1, 2, 3]\n  b = [y + 1, y + 1, y + 1]\n  for i in range(len(a)):\n    a[i] = a[i] * (y + 1)\n  return a\n``"}, {"expr": "x + 10", "variable": "x", "original_function": "def baz(x: bool):\n  if x:\n    return True\n  else:\n    return False", "output_expr": "def baz():\n  if x + 10:\n    return True\n  else:\n    return False", "function_name": "baz", "inputs": ["True", "False"], "changed_function": "def baz():\n  if x + 10:\n    return True\n  else:\n    return False"}, {"expr": "x + 5", "variable": "x", "original_function": "def func1(y: int):\n    z = 2\n    x = 10\n    if y > 0:\n        return y + z + x\n    else:\n        return x - y\n    return z", "output_expr": "def func1():\n    z = 2\n    x1 = 10\n    if x + 5 > 0:\n        return x + 5 + z + x1\n    else:\n        return x1 - (x + 5)\n    return z", "function_name": "func1", "inputs": ["5", "4", "1"], "changed_function": "def func1():\n    z = 2\n    x = 10\n    y = x + 5\n    if y > 0:\n        return y + z + x\n    else:\n        return x - y\n    return z"}, {"expr": "x * 2", "variable": "x", "original_function": "def func3(y: bool):\n    x = True\n    if y:\n        return x\n    else:\n        return not x\n    return y", "output_expr": "def func3():\n    x1 = True\n    if x * 2:\n        return x1\n    else:\n        return not x1\n    return x * 2", "function_name": "func3", "inputs": ["True", "False"], "changed_function": "def func3():\n    x = True\n    y = True\n    if y:\n        return x\n    else:\n        return not x\n    return y"}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(x: int):\n  y = x + 1\n  if x > 5:\n    return y * 2\n  else:\n    return y + 1\n  return x + y", "output_expr": "def foo():\n  y = x + 2 + 1\n  if x + 2 > 5:\n    return y * 2\n  else:\n    return y + 1\n  return x + 2 + y", "function_name": "foo", "inputs": ["5", "4", "1", "10", "0"], "changed_function": "def foo():\n  y = x + 2\n  if x > 5:\n    return y * 2\n  else:\n    return y + 1\n  return x + y"}, {"expr": "x * 3", "variable": "x", "original_function": "def bar(x: int):\n  if x < 0:\n    return x * 2\n  elif x == 0:\n    return 0\n  else:\n    return x * 3\n  return x + 1", "output_expr": "def bar():\n  if x * 3 < 0:\n    return x * 3 * 2\n  elif x * 3 == 0:\n    return 0\n  else:\n    return x * 3 * 3\n  return x * 3 + 1", "function_name": "bar", "inputs": ["5", "4", "1", "10", "0"], "changed_function": "def bar():\n  if x < 0:\n    return x * 2\n  elif x == 0:\n    return 0\n  else:\n    return x * 3\n  return x + 1"}, {"expr": "x + 2", "variable": "x", "original_function": "def baz(x: bool):\n  if x:\n    return True\n  else:\n    return False\n  return x", "output_expr": "def baz():\n  if x + 2:\n    return True\n  else:\n    return False\n  return x + 2", "function_name": "baz", "inputs": ["True", "False"], "changed_function": "def baz():\n  return x + 2"}, {"expr": "x * 2", "variable": "x", "original_function": "def qux(x: str):\n  if x == \"hello\":\n    return \"world\"\n  else:\n    return \"goodbye\"\n  return x + \"!\"\n", "output_expr": "def qux():\n  if x * 2 == \"hello\":\n    return \"world\"\n  else:\n    return \"goodbye\"\n  return x * 2 + \"!\"\n", "function_name": "qux", "inputs": ["\"hello\"", "\"world\"", "\"goodbye\"", "\"hello world\"", "\"goodbye world\""], "changed_function": "def qux():\n  return \"world\""}, {"expr": "a * 2 + 3", "variable": "a", "original_function": "def fun1(a: int):\n    b = 5\n    for i in range(a):\n        b = b + 1\n    return b", "output_expr": "def fun1():\n    b = 5\n    for i in range(a * 2 + 3):\n        b = b + 1\n    return b", "function_name": "fun1", "inputs": ["1", "2", "3"], "changed_function": "def fun1():\n    b = 5\n    for i in range(a * 2 + 3):\n        b = b + 1\n    return b"}, {"expr": "y * 2", "variable": "y", "original_function": "def fun2(y: int):\n    list1 = [1, 2, 3, 4]\n    for i in range(y):\n        list1.append(y + 1)\n    return list1", "output_expr": "def fun2():\n    list1 = [1, 2, 3, 4]\n    for i in range(y * 2):\n        list1.append(y * 2 + 1)\n    return list1", "function_name": "fun2", "inputs": ["1", "2", "3"], "changed_function": "def fun2():\n    list1 = [1, 2, 3, 4]\n    for i in range(y * 2):\n        list1.append(y * 2 + 1)\n    return list1"}, {"expr": "z + 5", "variable": "z", "original_function": "def fun3(z: int):\n    x = z\n    for i in range(5):\n        x = x * 2\n    return x", "output_expr": "def fun3():\n    x1 = z + 5\n    for i in range(5):\n        x1 = x1 * 2\n    return x1", "function_name": "fun3", "inputs": ["1", "2", "3"], "changed_function": "def fun3():\n    x = z + 5\n    for i in range(5):\n        x = x * 2\n    return x"}, {"expr": "x + 10", "variable": "x", "original_function": "def fun4(x: int):\n    x1 = x\n    list1 = [1, 2]\n    while x1 < 10:\n        list1.append(x1 + 1)\n        x1 = x1 + 1\n    return list1", "output_expr": "def fun4():\n    x1 = x + 10\n    list1 = [1, 2]\n    while x1 < 10:\n        list1.append(x1 + 1)\n        x1 = x1 + 1\n    return list1", "function_name": "fun4", "inputs": ["1", "2", "3"], "changed_function": "def fun4():\n    x1 = x + 10\n    list1 = [1, 2]\n    while x1 < 10:\n        list1.append(x1 + 1)\n        x1 = x1 + 1\n    return list1"}, {"expr": "k / 3", "variable": "k", "original_function": "def fun5(k: int):\n    if k > 10:\n        k = k - 10\n    elif k < 5:\n        k = k + 10\n    else:\n        k = k\n    return k", "output_expr": "def fun5():\n    if k / 3 > 10:\n        k1 = k / 3 - 10\n    elif k / 3 < 5:\n        k1 = k / 3 + 10\n    else:\n        k1 = k / 3\n    return k1", "function_name": "fun5", "inputs": ["1", "2", "3"], "changed_function": "def fun5():\n    k = k / 3\n    if k > 10:\n        k = k - 10\n    elif k < 5:\n        k = k + 10\n    else:\n        k = k\n    return k"}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(a: int):\n    b = 2\n    if a == b:\n        return 0\n    else:\n        return b + 1\n    ", "output_expr": "def foo():\n    b = 2\n    if x + 2 == b:\n        return 0\n    else:\n        return b + 1\n    ", "function_name": "foo", "inputs": ["1", "2", "3"], "changed_function": "def foo():\n    b = 2\n    if x + 2 == b:\n        return 0\n    else:\n        return b + 1"}, {"expr": "x + 1", "variable": "x", "original_function": "def bar(a: int):\n    x = 5\n    if a > 5:\n        x = 10\n    elif a < 5:\n        return x\n    else:\n        return a\n    ", "output_expr": "def bar():\n    z = 5\n    if x + 1 > 5:\n        z = 10\n    elif x + 1 < 5:\n        return z\n    else:\n        return x + 1\n    ", "function_name": "bar", "inputs": ["4", "5", "6"], "changed_function": "def bar():\n    x = 5\n    if x > 5:\n        x = 10\n    elif x < 5:\n        return x\n    else:\n        return x"}, {"expr": "x + 1", "variable": "x", "original_function": "def quux(a: bool):\n    x = True\n    if a:\n        x = False\n    elif a == False:\n        return x\n    else:\n        return not a\n    ", "output_expr": "def quux():\n    y = True\n    if x + 1:\n        y = False\n    elif x + 1 == False:\n        return y\n    else:\n        return not x + 1\n    ", "function_name": "quux", "inputs": ["True", "False"], "changed_function": "def quux():\n    x = True\n    if x + 1:\n        x = False\n    elif x + 1 == False:\n        return x\n    else:\n        return not x + 1"}, {"expr": "x + 1", "variable": "x", "original_function": "def decimal_To_Binary(N: int):\n    B_Number = 0\n    cnt = 0\n    while (N != 0):\n        rem = N % 2\n        c = pow(10,cnt)\n        B_Number += rem*c\n        N //= 2\n        cnt += 1\n    return B_Number", "output_expr": "def decimal_To_Binary():\n    B_Number = 0\n    cnt = 0\n    while (x + 1 != 0):\n        rem = x + 1 % 2\n        c = pow(10,cnt)\n        B_Number += rem*c\n        x + 1 //= 2\n        cnt += 1\n    return B_Number", "function_name": "decimal_To_Binary", "inputs": ["5", "4", "1", "10", "100"], "changed_function": "def decimal_To_Binary():\n    B_Number = 0\n    cnt = 0\n    while (x + 1 != 0):\n        rem = (x + 1) % 2\n        c = pow(10,cnt)\n        B_Number += rem*c\n        x += 1\n        cnt += 1\n    return B_Number"}, {"expr": "x * 2", "variable": "x", "original_function": "def is_palindrome(text: str):\n    text = text.lower()\n    return text == text[::-1]", "output_expr": "def is_palindrome():\n    z = x * 2.lower()\n    return z == z[::-1]", "function_name": "is_palindrome", "inputs": ["'racecar'", "'madam'", "'level'", "'rotor'", "'noon'"], "changed_function": "def is_palindrome():\n    text = x * 2\n    return text == text[::-1]"}, {"expr": "x * 3", "variable": "x", "original_function": "def find_max(numbers: list):\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num", "output_expr": "def find_max():\n    max_num = x * 3[0]\n    for num in x * 3:\n        if num > max_num:\n            max_num = num\n    return max_num", "function_name": "find_max", "inputs": ["[1, 2, 3, 4, 5]", "[10, 20, 30, 40, 50]", "[5, 10, 15, 20, 25]", "[100, 50, 25, 10, 5]", "[1, 2, 4, 8, 16]"], "changed_function": "def find_max():\n    max_num = x * 3\n    for num in x * 3:\n        if num > max_num:\n            max_num = num\n    return max_num"}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(x: int):\n  y = x * 2\n  z = x - 1\n  w = x + y\n  return z + w", "output_expr": "def foo():\n  y = x + 2 * 2\n  z = x + 2 - 1\n  w = x + 2 + y\n  return z + w", "function_name": "foo", "inputs": ["5", "4", "1"], "changed_function": "def foo():\n  y = x + 2 * 2\n  z = x + 2 - 1\n  w = x + 2 + y\n  return z + w"}, {"expr": "x + 2", "variable": "x", "original_function": "def bar(x: bool):\n  y = x\n  if x == True:\n    z = x\n  else:\n    z = False\n  return y or z", "output_expr": "def bar():\n  y = x + 2\n  if x + 2 == True:\n    z = x + 2\n  else:\n    z = False\n  return y or z", "function_name": "bar", "inputs": ["True", "False"], "changed_function": "def bar():\n  y = x + 2\n  if x + 2 == True:\n    z = x + 2\n  else:\n    z = False\n  return y or z"}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(x: int):\n    y = 1\n    return x + y + 1", "output_expr": "def foo():\n    y = 1\n    return x + 2 + y + 1", "function_name": "foo", "inputs": ["5", "4", "1"], "changed_function": "def foo():\n    y = 1\n    return 2 + y + 1"}, {"expr": "x + 5", "variable": "x", "original_function": "def bar(x: int):\n    y = x + 2\n    z = x + 3\n    return z * y", "output_expr": "def bar():\n    y = x + 5 + 2\n    z = x + 5 + 3\n    return z * y", "function_name": "bar", "inputs": ["5", "4", "1"], "changed_function": "def bar():\n    y = x + 2\n    z = x + 3\n    return z * y"}, {"expr": "x * 2", "variable": "x", "original_function": "def baz(x: int):\n    y = x\n    while y > 0:\n        y -= 1\n    return x + y", "output_expr": "def baz():\n    y = x * 2\n    while y > 0:\n        y -= 1\n    return x * 2 + y", "function_name": "baz", "inputs": ["5", "4", "1"], "changed_function": "def baz():\n    x = x * 2\n    y = x\n    while y > 0:\n        y -= 1\n    return x + y"}, {"expr": "x * 3", "variable": "x", "original_function": "def qux(x: str):\n    y = x\n    z = ''\n    for i in range(len(x)):\n        z += x[i]\n    return z", "output_expr": "def qux():\n    y = x * 3\n    z = ''\n    for i in range(len(x * 3)):\n        z += (x * 3)[i]\n    return z", "function_name": "qux", "inputs": ["'hello'", "'world'", "'bye'"], "changed_function": "def qux():\n    y = x * 3\n    z = ''\n    for i in range(len(x * 3)):\n        z += x * 3[i]\n    return z"}, {"expr": "x * 3", "variable": "x", "original_function": "def sum_string_lengths(string_list: list[str]):\n    sum_len = 0\n    for x in string_list:\n        sum_len += len(x)\n    return sum_len", "output_expr": "def sum_string_lengths():\n    sum_len = 0\n    for z in string_list:\n        sum_len += len(z)\n    return sum_len", "function_name": "sum_string_lengths", "inputs": ["['hello', 'world']", "['abc', 'def']", "['']"], "changed_function": "def sum_string_lengths():\n    string_list = [x * 3 for x in range(10)]\n    sum_len = 0\n    for x in string_list:\n        sum_len += len(x)\n    return sum_len"}, {"expr": "x + 2", "variable": "x", "original_function": "def multiply_by_two(x: int):\n    y = 2\n    return x * y", "output_expr": "def multiply_by_two():\n    y = 2\n    return z * y", "function_name": "multiply_by_two", "inputs": ["5", "10", "1"], "changed_function": "def multiply_by_two():\n    y = 2\n    return x + 2 * y"}, {"expr": "x * 2", "variable": "x", "original_function": "def check_odd(n: int):\n    x = n % 2\n    if x == 0:\n        return False\n    return True", "output_expr": "def check_odd():\n    z = n % 2\n    if z == 0:\n        return False\n    return True", "function_name": "check_odd", "inputs": ["4", "5", "7"], "changed_function": "def check_odd():\n    x = x * 2\n    if x % 2 == 0:\n        return False\n    return True"}, {"expr": "a + 2", "variable": "a", "original_function": "def foo(a: int):\n    b = a + 1\n    if b < 10:\n        return b * 2\n    else:\n        return b - 5\n    ", "output_expr": "def foo():\n    b = a + 2 + 1\n    if b < 10:\n        return b * 2\n    else:\n        return b - 5\n    ", "function_name": "foo", "inputs": ["1", "2", "3"], "changed_function": "def foo():\n    b = a + 2\n    if b < 10:\n        return b * 2\n    else:\n        return b - 5"}, {"expr": "b + 1", "variable": "b", "original_function": "def bar(b: int):\n    if b == 0:\n        return 0\n    elif b == 1:\n        return 1\n    else:\n        return bar(b - 1) + bar(b - 2)\n    ", "output_expr": "def bar():\n    if b + 1 == 0:\n        return 0\n    elif b + 1 == 1:\n        return 1\n    else:\n        return bar(b + 1 - 1) + bar(b + 1 - 2)\n    ", "function_name": "bar", "inputs": ["1", "2", "3"], "changed_function": "def bar():\n    b = b + 1\n    if b == 0:\n        return 0\n    elif b == 1:\n        return 1\n    else:\n        return bar() + bar()"}, {"expr": "c * 3", "variable": "c", "original_function": "def baz(c: int):\n    d = c * 2\n    if d > 5:\n        return c + 5\n    else:\n        return c * c\n    ", "output_expr": "def baz():\n    d = c * 3 * 2\n    if d > 5:\n        return c * 3 + 5\n    else:\n        return c * 3 * c * 3\n    ", "function_name": "baz", "inputs": ["1", "2", "3"], "changed_function": "def baz():\n    c = c * 3\n    d = c * 2\n    if d > 5:\n        return c + 5\n    else:\n        return c * c"}, {"expr": "d * 2", "variable": "d", "original_function": "def qux(d: int):\n    e = 2\n    while d > 0:\n        e = e * d\n        d = d - 1\n    return e\n    ", "output_expr": "def qux():\n    e = 2\n    while d * 2 > 0:\n        e = e * d * 2\n        d = d * 2 - 1\n    return e\n    ", "function_name": "qux", "inputs": ["1", "2", "3"], "changed_function": "def qux():\n    d = e * 2\n    e = 2\n    while d > 0:\n        e = e * d\n        d = d - 1\n    return e"}, {"expr": "x + 5", "variable": "x", "original_function": "def func1(a: int):\n  b = 10\n  c = a + 2\n  return b + c", "output_expr": "def func1():\n  b = 10\n  c = x + 5 + 2\n  return b + c", "function_name": "func1", "inputs": ["1", "2", "3"], "changed_function": "def func1():\n  b = 10\n  c = x + 5 + 2\n  return b + c"}, {"expr": "x * 2", "variable": "x", "original_function": "def func2(a: str):\n  b = 'Hello'\n  c = a + ' World'\n  return b + c", "output_expr": "def func2():\n  b = 'Hello'\n  c = x * 2 + ' World'\n  return b + c", "function_name": "func2", "inputs": ["'abc'", "'def'", "'ghi'"], "changed_function": "def func2():\n  b = 'Hello'\n  c = x * 2 + ' World'\n  return b + c"}, {"expr": "x - 1", "variable": "x", "original_function": "def func3(a: bool):\n  b = True\n  if a:\n    c = False\n  else:\n    c = True\n  return b and c", "output_expr": "def func3():\n  b = True\n  if x - 1:\n    c = False\n  else:\n    c = True\n  return b and c", "function_name": "func3", "inputs": ["True", "False"], "changed_function": "def func3():\n  b = True\n  if x - 1:\n    c = False\n  else:\n    c = True\n  return b and c"}, {"expr": "x + 10", "variable": "x", "original_function": "def foo(n: int):\n  sum = 0\n  for i in range(n):\n    sum = sum + i\n  return sum", "output_expr": "def foo():\n  sum = 0\n  for i in range(x + 10):\n    sum = sum + i\n  return sum", "function_name": "foo", "inputs": ["5", "10", "-5"], "changed_function": "def foo():\n  sum = 0\n  for i in range(x + 10):\n    sum = sum + i\n  return sum"}, {"expr": "x * 2", "variable": "x", "original_function": "def baz(n: int):\n  result = 1\n  for i in range(n):\n    result = result * i\n  return result", "output_expr": "def baz():\n  result = 1\n  for i in range(x * 2):\n    result = result * i\n  return result", "function_name": "baz", "inputs": ["5", "10", "-5"], "changed_function": "def baz():\n  result = 1\n  for i in range(x * 2):\n    result = result * i\n  return result"}, {"expr": "x - 5", "variable": "x", "original_function": "def quux(n: int):\n  if n > 10:\n    return n - 5\n  else:\n    return n + 5", "output_expr": "def quux():\n  if x - 5 > 10:\n    return x - 5 - 5\n  else:\n    return x - 5 + 5", "function_name": "quux", "inputs": ["15", "20", "30"], "changed_function": "def quux():\n  return x - 5"}, {"expr": "y + 3", "variable": "y", "original_function": "def foo(x: int):\n  if x > 5:\n    return x + 1\n  else:\n    return x - 1\n  return 1", "output_expr": "def foo():\n  if y + 3 > 5:\n    return y + 3 + 1\n  else:\n    return y + 3 - 1\n  return 1", "function_name": "foo", "inputs": ["5", "6", "3", "10", "2"], "changed_function": "def foo():\n  y = 3\n  if y > 5:\n    return y + 1\n  else:\n    return y - 1\n  return 1"}, {"expr": "z * 2", "variable": "z", "original_function": "def bar(x: int):\n  if x < 10:\n    return x + 5\n  else:\n    return x - 5\n  return 1", "output_expr": "def bar():\n  if z * 2 < 10:\n    return z * 2 + 5\n  else:\n    return z * 2 - 5\n  return 1", "function_name": "bar", "inputs": ["10", "5", "2", "3", "7"], "changed_function": "def bar():\n  z = 10\n  if z < 10:\n    return z + 5\n  else:\n    return z - 5\n  return 1"}, {"expr": "t + 1", "variable": "t", "original_function": "def baz(x: bool):\n  if x:\n    return \"True\"\n  else:\n    return \"False\"\n  return \"Invalid\"", "output_expr": "def baz():\n  if t + 1:\n    return \"True\"\n  else:\n    return \"False\"\n  return \"Invalid\"", "function_name": "baz", "inputs": ["True", "False", "1", "-1", "0"], "changed_function": "def baz():\n  return \"True\""}, {"expr": "a * 5", "variable": "a", "original_function": "def quux(x: list):\n  if len(x) > 2:\n    return x[0] + x[1]\n  else:\n    return x[0]\n  return 0", "output_expr": "def quux():\n  if len(a * 5) > 2:\n    return (a * 5)[0] + (a * 5)[1]\n  else:\n    return (a * 5)[0]\n  return 0", "function_name": "quux", "inputs": ["[1,2,3,4,5]", "[1,2]", "[1]", "[1,2,3]", "[1,2,3,4]"], "changed_function": "def quux():\n  return a * 5"}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(y: int):\n  x = 1\n  z = 2\n  for i in range(y):\n    x += i\n  return x + y + z", "output_expr": "def foo():\n  z = 1\n  w = 2\n  for i in range(x + 2):\n    w += i\n  return w + x + 2 + z", "function_name": "foo", "inputs": ["5", "4", "1"], "changed_function": "def foo():\n  x = 1\n  z = 2\n  for i in range(x + 2):\n    x += i\n  return x + x + 2 + z"}, {"expr": "x * 3", "variable": "x", "original_function": "def bar(y: int):\n  x = 10\n  if y < 10:\n    x = 5\n  return x + y", "output_expr": "def bar():\n  z = 10\n  if x * 3 < 10:\n    z = 5\n  return z + x * 3", "function_name": "bar", "inputs": ["5", "4", "1"], "changed_function": "def bar():\n  x = 10\n  y = x * 3\n  if y < 10:\n    x = 5\n  return x + y"}, {"expr": "x == True", "variable": "x", "original_function": "def quux(y: bool):\n  x = False\n  if y:\n    x = True\n  return x", "output_expr": "def quux():\n  z = False\n  if x == True:\n    z = True\n  return z", "function_name": "quux", "inputs": ["True", "False"], "changed_function": "def quux():\n  x = False\n  if x:\n    x = True\n  return x"}, {"expr": "x * 2", "variable": "x", "original_function": "def func1(x: int):\n  x = 1\n  y = 2\n  z = 3\n  return x + y + z", "output_expr": "def func1():\n  z_1 = 1\n  y = 2\n  z = 3\n  return x * 2 + y + z", "function_name": "func1", "inputs": ["1", "2", "3"], "changed_function": "def func1():\n  x = 1\n  y = 2\n  z = 3\n  return x * 2 + y + z"}, {"expr": "x + 5", "variable": "x", "original_function": "def func2(x: bool):\n  if x:\n    return True\n  else:\n    return False", "output_expr": "def func2():\n  if x + 5:\n    return True\n  else:\n    return False", "function_name": "func2", "inputs": ["True", "False"], "changed_function": "def func2():\n  if x + 5:\n    return True\n  else:\n    return False"}, {"expr": "x * 2", "variable": "x", "original_function": "def func3(x: str):\n  y = 'hello'\n  return y + x", "output_expr": "def func3():\n  y = 'hello'\n  return y + x * 2", "function_name": "func3", "inputs": ["'world'", "'python'"], "changed_function": "def func3():\n  y = 'hello'\n  return y + x * 2"}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(y: int):\n  x = 1\n  if y == 1:\n    return x + 2\n  elif y == 2:\n    return x + 1\n  else:\n    return x - 1", "output_expr": "def foo():\n  z = 1\n  if x + 2 == 1:\n    return z + 2\n  elif x + 2 == 2:\n    return z + 1\n  else:\n    return z - 1", "function_name": "foo", "inputs": ["1", "2", "3"], "changed_function": "def foo():\n  x = 1\n  return x + 2"}, {"expr": "x * 3", "variable": "x", "original_function": "def bar(y: int):\n  x = 2\n  return y * x", "output_expr": "def bar():\n  z = 2\n  return x * 3 * z", "function_name": "bar", "inputs": ["1", "2", "3"], "changed_function": "def bar():\n  x = 2\n  return x * 3"}, {"expr": "x == True", "variable": "x", "original_function": "def baz(y: bool):\n  x = True\n  if y == x:\n    return True\n  else:\n    return False", "output_expr": "def baz():\n  z = True\n  if x == True == z:\n    return True\n  else:\n    return False", "function_name": "baz", "inputs": ["True", "False"], "changed_function": "def baz():\n  x = True\n  if x == True:\n    return True\n  else:\n    return False"}, {"expr": "x * 3", "variable": "x", "original_function": "def foo(y: int):\n    z = 1\n    if y > 0:\n        for i in range(y):\n            z = z * 2\n    return z + 1", "output_expr": "def foo():\n    z = 1\n    if x * 3 > 0:\n        for i in range(x * 3):\n            z = z * 2\n    return z + 1", "function_name": "foo", "inputs": ["1", "5", "-2"], "changed_function": "def foo():\n    z = 1\n    if y > 0:\n        for i in range(y):\n            z = z * 2\n    return z + 1"}, {"expr": "x == True", "variable": "x", "original_function": "def qux(y: bool):\n    if y:\n        return True\n    else:\n        return False", "output_expr": "def qux():\n    if x == True:\n        return True\n    else:\n        return False", "function_name": "qux", "inputs": ["True", "False"], "changed_function": "def qux():\n    return x == True"}, {"expr": "x + 10", "variable": "x", "original_function": "def is_prime(n: int):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "output_expr": "def is_prime():\n    if x + 10 <= 1:\n        return False\n    for i in range(2, int((x + 10)**0.5) + 1):\n        if x + 10 % i == 0:\n            return False\n    return True", "function_name": "is_prime", "inputs": ["2", "3", "7", "11", "13"], "changed_function": "def is_prime():\n    if x + 10 <= 1:\n        return False\n    for i in range(2, int((x + 10)**0.5) + 1):\n        if (x + 10) % i == 0:\n            return False\n    return True"}, {"expr": "x - 5", "variable": "x", "original_function": "def sum_of_digits(n: int):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum", "output_expr": "def sum_of_digits():\n    sum = 0\n    while x - 5 > 0:\n        sum += x - 5 % 10\n        x - 5 //= 10\n    return sum", "function_name": "sum_of_digits", "inputs": ["123", "456", "789", "1011", "1213"], "changed_function": "def sum_of_digits():\n    sum = 0\n    while x - 5 > 0:\n        sum += (x - 5) % 10\n        (x - 5) //= 10\n    return sum"}, {"expr": "x * 3", "variable": "x", "original_function": "def count_ones(n: int):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count", "output_expr": "def count_ones():\n    count = 0\n    while x * 3 > 0:\n        count += x * 3 & 1\n        x * 3 >>= 1\n    return count", "function_name": "count_ones", "inputs": ["10", "15", "20", "25", "30"], "changed_function": "def count_ones():\n    count = 0\n    while x > 0:\n        count += x & 1\n        x >>= 1\n    return count"}, {"expr": "x + 1", "variable": "x", "original_function": "def foo(n: int):\n    sum = 0\n    for i in range(n):\n        sum = sum + i\n    return sum", "output_expr": "def foo():\n    sum = 0\n    for i in range(x + 1):\n        sum = sum + i\n    return sum", "function_name": "foo", "inputs": ["5", "4", "1"], "changed_function": "def foo():\n    sum = 0\n    for i in range(x + 1):\n        sum = sum + i\n    return sum"}, {"expr": "x * 2", "variable": "x", "original_function": "def bar(s: str):\n    return s * 3", "output_expr": "def bar():\n    return x * 2 * 3", "function_name": "bar", "inputs": ["'abc'", "'def'", "'ghi'"], "changed_function": "def bar():\n    return x * 2"}, {"expr": "x + 2", "variable": "x", "original_function": "def qux(b: bool):\n    if b:\n        return 1\n    else:\n        return 0", "output_expr": "def qux():\n    if x + 2:\n        return 1\n    else:\n        return 0", "function_name": "qux", "inputs": ["True", "False"], "changed_function": "def qux():\n    return x + 2"}]