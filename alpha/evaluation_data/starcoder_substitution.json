[{"expr": "x + 2", "variable": "x", "original_function": "def bar(a: int):\n    x = 3\n    c = 5\n    for i in range(a):\n        c += i\n        x *= i\n    return c + x", "output_expr": "\ndef bar():\n    z = 1\n    c = 5\n    for i in range(x + 2):\n        c += i\n        x *= i\n    return c + x\n\n\u201c\u201d\u201dfunction ends\"\"\"\n\ndef sym_function(function_name: str, expr: str, expr1: str, variable: str, inputs: list, defs: dict) -> dict:\n    \"\"\"\n    Args:\n        function_name: name of function.\n        expr: the property the original", "function_name": "bar", "inputs": ["1", "2", "3"]}, {"expr": "x * 2", "variable": "x", "original_function": "def baz(y: int):\n    result = 0\n    for i in range(y):\n        result += i\n        x = 2* i\n    return result + x", "output_expr": "\ndef baz():\n    result = 0\n    for i in range(x*2):\n        result += i\n        k = 2* i\n    return result + k\n", "function_name": "baz", "inputs": ["4", "6", "8"]}, {"expr": "x - 5", "variable": "x", "original_function": "def foo(n: int):\n    x = 0\n    while x < n:\n        x += 1\n        print(x)\n    return x", "output_expr": "\ndef foo():\n    z = 3\n    while x < n + 3:\n        x += 1\n        print(x)\n    return x + 2 + z + 1\nfn delta: int -> int\n\ndelta(x: int )  = x + 2 + z + 1\nfn main ():\n    y : int\n    y = 1\n    foo ()\n    foo (y)\n    y = 3\n    fn delta\n    y1 = 4\n    print (delta", "function_name": "foo", "inputs": ["10", "20", "30"]}, {"expr": "x + 1", "variable": "x", "original_function": "def foo(n: int):\n  x = 0\n  y = n + 2\n  z = 3\n  return x + y + z", "output_expr": "\ndef foo():\n  z = 1\n  return x + 2 + z + 1\n", "function_name": "foo", "inputs": ["5", "6", "1"]}, {"expr": "x + 1", "variable": "x", "original_function": "def qux(a: bool):\n  x = True\n  if a:\n    x = False\n  return x", "output_expr": "\ndef qux():\n\t   \n\t    z = 1\n\t    \n\t    return x + 1 + z + 1\n\u2018\u2019\u2019Above example ends\u2019\u2019\u2019\n\n.. code-block:: python\n\n  def qux(a: bool):\n      x = True\n      if a:\n          x = False\n      return x\n\nafter transformed into \n", "function_name": "qux", "inputs": ["True", "False"]}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(x: int):\n  y = 1\n  z = x + y\n  return z * 2", "output_expr": "\ndef foo():\nz = 1\nreturn x + 2 + z + 1\n", "function_name": "foo", "inputs": ["1", "2", "3"]}, {"expr": "y * 2", "variable": "y", "original_function": "def bar(y: int):\n  x = 5\n  y = x + y\n  return x * y", "output_expr": "\ndef bar():\n  z = 5\n  y = z * 2\n  return z * y\n", "function_name": "bar", "inputs": ["2", "4", "6"]}, {"expr": "x * 3", "variable": "x", "original_function": "def baz(x: str):\n  return x[0] * 3", "output_expr": "\ndef baz():\ny = x * 3\nreturn y[0] * 3\n", "function_name": "baz", "inputs": ["'abc'", "'def'", "'ghi'"]}, {"expr": "x - 1", "variable": "x", "original_function": "def qux(x: bool):\n  if x:\n    return True\n  else:\n    return False", "output_expr": "\ndef qux():\n  y = 2\n  if y - 1:\n    return True\n  else:\n    return False\n", "function_name": "qux", "inputs": ["True", "False"]}, {"expr": "x + 5", "variable": "x", "original_function": "def fun1(a: int):\n        b = 10\n        return a + b - 1", "output_expr": "\ndef fun1():\n        b = 10\n        return x + 5 + b + 10 - 1\n\n", "function_name": "fun1", "inputs": ["5", "10", "2"]}, {"expr": "y * 3", "variable": "y", "original_function": "def fun2(a: int):\n        y = 2\n        return a + y * 2", "output_expr": "\ndef fun2():\n    z = 2\n    return x + z * 2\n", "function_name": "fun2", "inputs": ["2", "3", "6"]}, {"expr": "x * 10", "variable": "x", "original_function": "def fun3(a: str):\n        b = 'hello'\n        if a == 'world':\n            return a + b\n        else:\n            return a", "output_expr": "\ndef fun3():\n    b = 'hello'\n    if (x * 10) == 'world':\n        return (x * 10) + b\n    else:\n        return (x * 10)\n", "function_name": "fun3", "inputs": ["'hello'", "'world'", "'foo'"]}, {"expr": "x / 2", "variable": "x", "original_function": "def fun5(a: bool):\n        if a:\n            return 'True'\n        else:\n            return 'False'", "output_expr": "\ndef fun5():\n    x = 5/2\n    if x:\n        return 'True'\n    else:\n        return 'False'\n", "function_name": "fun5", "inputs": ["True", "False"]}, {"expr": "x + 2", "variable": "x", "original_function": "def sum_with_offset(y: int):\n  offset = 3\n  return y + offset", "output_expr": "\ndef sum_with_offset():\n  offset = 3\n  return x + 2 + offset\n", "function_name": "sum_with_offset", "inputs": ["5", "4", "1"]}, {"expr": "y - 1", "variable": "y", "original_function": "def double_and_add_one(x: int):\n  doubled = 2 * x\n  return doubled + 1", "output_expr": "\ndef double_and_add_one():\n  x = 9\n  doubled = 2 * x\n  return doubled + 1\n", "function_name": "double_and_add_one", "inputs": ["5", "4", "1"]}, {"expr": "a * 2", "variable": "a", "original_function": "def calculate_area(a: int):\n  width = 5\n  area = a * width\n  return area", "output_expr": "\ndef calculate_area():\n  width = 5\n  area = x * width\n  return area\n\n", "function_name": "calculate_area", "inputs": ["5", "4", "1"]}, {"expr": "z * 3", "variable": "z", "original_function": "def check_even(z: int):\n  if z % 2 == 0:\n    return True\n  else:\n    return False", "output_expr": "\ndef check_even():\n  if z * 2  % 2 == 0:\n    return True\n  else:\n    return False\n", "function_name": "check_even", "inputs": ["5", "4", "1"]}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(x: int):\n    temp = []\n    for y in range(x):\n        temp.append(y)\n    return temp", "output_expr": "\ndef foo():\n    temp = []\n    for y in range(x + 2):\n        temp.append(y)\n    return temp + x + 1\n", "function_name": "foo", "inputs": ["5", "1", "4"]}, {"expr": "y + 1", "variable": "y", "original_function": "def bar(y: int):\n    temp = []\n    for x in range(y):\n        temp.append(x)\n    return temp", "output_expr": "\ndef bar():\n    y = 7\n    x = 1\n    return y + x + 1\n", "function_name": "bar", "inputs": ["5", "1", "4"]}, {"expr": "y - 1", "variable": "y", "original_function": "def baz(y: int):\n    return y * 2 + 1", "output_expr": "\ndef baz():\n    return y - 1 + 1\n", "function_name": "baz", "inputs": ["5", "1", "4"]}, {"expr": "y * 2", "variable": "y", "original_function": "def quux(y: int):\n    x = 0\n    for i in range(y):\n        x += i\n    return x", "output_expr": "\ndef quux():\n    z =  y * 2\n    for i in range (y * 2):\n        x += i\n    return x\n", "function_name": "quux", "inputs": ["5", "1", "4"]}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(n: int):\n    result = 0\n    for i in range(n):\n        result += i\n    return result", "output_expr": "\ndef foo():\n    z = 1\n    return x + 2 + z + 1\n", "function_name": "foo", "inputs": ["5", "4", "1"]}, {"expr": "x * 2", "variable": "x", "original_function": "def bar(str1: str):\n    result = ''\n    for i in range(len(str1)):\n        result += str1[i] * 2\n    return result", "output_expr": "\ndef bar():\n    return x * 2\n", "function_name": "bar", "inputs": ["'abc'", "'def'", "'ghi'"]}, {"expr": "x * 2", "variable": "x", "original_function": "def qux(b: bool):\n    if b:\n        return 'True'\n    else:\n        return 'False'", "output_expr": "\ndef qux():\n    if x * 2 < 5:\n        if x * 2 < 3:\n            return 'True'\n        else:\n            return 'False'\n    if x * 2 + 1 > 4:\n        return False\n    return 'False'\n", "function_name": "qux", "inputs": ["True", "False"]}, {"expr": "x * 3", "variable": "x", "original_function": "def quux(t: tuple[int, str]):\n    return t[0] + len(t[1])", "output_expr": "\ndef quux():\n    x = 3\n    return x + len('ney')\n", "function_name": "quux", "inputs": ["(1, 'abc')", "(2, 'def')", "(3, 'ghi')"]}, {"expr": "a + 5", "variable": "a", "original_function": "def foo(x: int):\n  if x <= 0:\n    return 0\n  else:\n    return x + foo(x - 1)", "output_expr": "\ndef foo():\n  return z + 2 + z + 1\ndef foo(x: int) -> int:\n  if x <= 0:\n    return foo(0)\n  else:\n    return x + foo(x - 1)\n", "function_name": "foo", "inputs": ["5", "4", "1"]}, {"expr": "b + 2", "variable": "b", "original_function": "def bar(x: int):\n  if x == 0:\n    return 1\n  elif x < 0:\n    return 0\n  else:\n    return x * bar(x - 1)", "output_expr": "\ndef bar():\n    d = 0\n    return b * bar() + d + 1\n", "function_name": "bar", "inputs": ["5", "4", "1"]}, {"expr": "c - 3", "variable": "c", "original_function": "def baz(x: int):\n  if x == 1:\n    return 1\n  else:\n    return x * baz(x - 1)", "output_expr": "\ndef baz():\n  if x == 1:\n    return 1\n  else:\n    return x * baz()\n", "function_name": "baz", "inputs": ["5", "4", "1"]}, {"expr": "d * 2", "variable": "d", "original_function": "def qux(x: str):\n  if len(x) == 0:\n    return ''\n  else:\n    return x[0] + qux(x[1:])", "output_expr": "\ndef qux():\n    z = 1\n    return d * 2 + z\n", "function_name": "qux", "inputs": ["'hello'", "'world'", "'python'"]}, {"expr": "e + 4", "variable": "e", "original_function": "def quux(x: bool):\n  if x:\n    return True\n  else:\n    return False", "output_expr": "\ndef quux():\n  if e + 4:\n    return True\n  else:\n    return False\n\n", "function_name": "quux", "inputs": ["True", "False"]}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(n: int):\n  x = 1\n  temp = 2\n  if n > 5:\n    temp = 3\n  else:\n    temp = 4\n  return n + x + temp", "output_expr": "\ndef foo():\n   z = 1\n   return x + 2 + z + 1\n", "function_name": "foo", "inputs": ["5", "10", "-2"]}, {"expr": "x * 3", "variable": "x", "original_function": "def bar(b: bool):\n  x = True\n  if b:\n    x = False\n  return x", "output_expr": "\ndef bar():\n  return x + x + 1\n", "function_name": "bar", "inputs": ["True", "False"]}, {"expr": "x[0]", "variable": "x", "original_function": "def baz(s: str):\n  x = 'hello'\n  if len(s) > 5:\n    x = 'world'\n  return len(x)", "output_expr": "\ndef baz():\n  x = 'hello'\n  if len(x[0]) > 5:\n    x = 'world'\n  return len(x)\n ", "function_name": "baz", "inputs": ["'123456'", "'abcde'"]}, {"expr": "a + 1", "variable": "a", "original_function": "def func1(a: int):\n    b = a + 1\n    c = b * 2\n    return c + a", "output_expr": "\ndef func1():\n    a = 5\n    b = a + 1\n    c = b * 2\n    return c + a\n", "function_name": "func1", "inputs": ["1", "2", "3"]}, {"expr": "a + 2", "variable": "a", "original_function": "def func2(a: int):\n    b = a + 1\n    c = b * 2\n    d = a + c\n    return d + 1", "output_expr": "\ndef func2():\n    a = 5\n    local_b = a + 1\n    c = local_b * 2\n    d = a + c\n    return d + 1\n\n", "function_name": "func2", "inputs": ["5", "10", "15"]}, {"expr": "a + 4", "variable": "a", "original_function": "def func4(a: bool):\n    b = a\n    c = not b\n    return b and c", "output_expr": "\ndef func4():\n    a = x + 4\n    b = a\n    c = not b\n    return b and c\n\n", "function_name": "func4", "inputs": ["True", "False"]}, {"expr": "x + 1", "variable": "x", "original_function": "def foo(x: int):\n    s = \"hello\"\n    if x > 5:\n        s += \" world\"\n    return s", "output_expr": "\ndef foo():\n return x + 2 + z + 1\n", "function_name": "foo", "inputs": ["1", "2", "3", "4", "5"]}, {"expr": "y - 2", "variable": "y", "original_function": "def bar(y: int):\n    x = y + 1\n    if x > 10:\n        x -= 2\n    return x", "output_expr": "\ndef bar():\n    x = y + 1\n    if x > 10:\n        x -= 2\n    return x\n", "function_name": "bar", "inputs": ["2", "3", "4", "5", "6"]}, {"expr": "x + 2", "variable": "x", "original_function": "def baz(x: int):\n    for i in range(x):\n        x += i\n    return x", "output_expr": "\ndef baz():\n    out = x + 2\n    for i in range(x + 2):\n        x += i\n    return out\n", "function_name": "baz", "inputs": ["1", "2", "3", "4", "5"]}, {"expr": "a * 2", "variable": "a", "original_function": "def qux(a: int):\n    if a > 10:\n        a = a + 1\n    return a", "output_expr": "\ndef qux():\n    if (a * 2) > 10:\n        a = a + 1\n    return (a * 2)\n", "function_name": "qux", "inputs": ["1", "2", "3", "4", "5"]}, {"expr": "x + 1", "variable": "x", "original_function": "def foo(x: int):\n  y = x + 2\n  z = 3\n  return x + y + z", "output_expr": "\ndef foo():\n  z = 1\n  x = 1\n  return x + 2 + z + 1\n", "function_name": "foo", "inputs": ["1", "2", "3", "4", "5"]}, {"expr": "y + 1", "variable": "y", "original_function": "def bar(y: int):\n  a = [1, 2, 3]\n  b = [y, y, y]\n  for i in range(len(a)):\n    a[i] = a[i] * y\n  return a", "output_expr": "\ndef bar(): # now the function takes no argument\n  z = 1\n  a = [1, 2, 3] # x => z\n  b = [x, x, x] # y => z\n  for i in range(len(a)):\n    a[i] = a[i] * x\n  return a # y => z\n", "function_name": "bar", "inputs": ["1", "2", "3", "4", "5"]}, {"expr": "x + 10", "variable": "x", "original_function": "def baz(x: bool):\n  if x:\n    return True\n  else:\n    return False", "output_expr": "\ndef baz():\n  if x + 10:\n    return True\n  else:\n      return False\n", "function_name": "baz", "inputs": ["True", "False"]}, {"expr": "x + 5", "variable": "x", "original_function": "def func1(y: int):\n    z = 2\n    x = 10\n    if y > 0:\n        return y + z + x\n    else:\n        return x - y\n    return z", "output_expr": "\ndef func1():\n    z = 2\n    x = 10\n    if x + 5 > 0:\n        return x + 5 + z + 10\n    else:\n        return 10 - (x + 5)\n    return z\n", "function_name": "func1", "inputs": ["5", "4", "1"]}, {"expr": "x * 2", "variable": "x", "original_function": "def func3(y: bool):\n    x = True\n    if y:\n        return x\n    else:\n        return not x\n    return y", "output_expr": "\ndef func3():\n    z = True\n    if z * 2:\n        return z\n    else:\n        return not z\n    return z * 2\n", "function_name": "func3", "inputs": ["True", "False"]}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(x: int):\n  y = x + 1\n  if x > 5:\n    return y * 2\n  else:\n    return y + 1\n  return x + y", "output_expr": "\ndef foo():\n  z = 1\n  return x + 2 + z + 1\n\n\u201c\u2018\u2019Example end\u2019\u2019\u2019\n\nImplementation hint: no extra method is required to expose new functionalities. The substitute function can use at most one additional method in fuzzi/policemgr.py or fuzzi/policymgr_tools.py.\"\"\"\n    __definitions__ = [\n        FunctionArgument(\"function\", type=str, help=\"Substitute original function with", "function_name": "foo", "inputs": ["5", "4", "1", "10", "0"]}, {"expr": "x * 3", "variable": "x", "original_function": "def bar(x: int):\n  if x < 0:\n    return x * 2\n  elif x == 0:\n    return 0\n  else:\n    return x * 3\n  return x + 1", "output_expr": "\ndef bar():\n    if x * 3 < 0:\n        return x * 3 * 2\n    elif x * 3 == 0:\n        return 0\n    else:\n        return x * 3 * 3\n    return x + 1\n\n", "function_name": "bar", "inputs": ["5", "4", "1", "10", "0"]}, {"expr": "x + 2", "variable": "x", "original_function": "def baz(x: bool):\n  if x:\n    return True\n  else:\n    return False\n  return x", "output_expr": "\ndef baz():\n  z = 1\n  if x + 2 + z + 1:\n    return True\n  else:\n    return False\n  return x + 2 + z + 1  \n", "function_name": "baz", "inputs": ["True", "False"]}, {"expr": "x * 2", "variable": "x", "original_function": "def qux(x: str):\n  if x == \"hello\":\n    return \"world\"\n  else:\n    return \"goodbye\"\n  return x + \"!\"\n", "output_expr": "\ndef qux():\n    def qux_16():\n        if x == 10:\n          return x * 2 - 5\n        else:\n          return x * 2\n        return x * 2 + 5\n    return qux_16()\n\n", "function_name": "qux", "inputs": ["\"hello\"", "\"world\"", "\"goodbye\"", "\"hello world\"", "\"goodbye world\""]}, {"expr": "a * 2 + 3", "variable": "a", "original_function": "def fun1(a: int):\n    b = 5\n    for i in range(a):\n        b = b + 1\n    return b", "output_expr": "\ndef fun1():\n    a = 2*3 + 3\n    b = 5\n    for i in range(a):\n        b = b + 1\n    return b \n", "function_name": "fun1", "inputs": ["1", "2", "3"]}, {"expr": "y * 2", "variable": "y", "original_function": "def fun2(y: int):\n    list1 = [1, 2, 3, 4]\n    for i in range(y):\n        list1.append(y + 1)\n    return list1", "output_expr": "\ndef fun2():\n    list1 = [1, 2, 3, 4]\n    for i in range(2 * 2):\n        list1.append(2 + 1)\n    return list1\n", "function_name": "fun2", "inputs": ["1", "2", "3"]}, {"expr": "z + 5", "variable": "z", "original_function": "def fun3(z: int):\n    x = z\n    for i in range(5):\n        x = x * 2\n    return x", "output_expr": "\ndef fun3():                                   # rename function\n    z = 5                                    # rename variable\n    if (z == 0): \n        z = 1                              # change 1 to z\n    else:\n        if (z == (1 + 1)):\n            z = 2\n        else:\n            z = 3 \n    x = z\n    for i in range(5):\n        x = x * 2\n    return x\n", "function_name": "fun3", "inputs": ["1", "2", "3"]}, {"expr": "x + 10", "variable": "x", "original_function": "def fun4(x: int):\n    x1 = x\n    list1 = [1, 2]\n    while x1 < 10:\n        list1.append(x1 + 1)\n        x1 = x1 + 1\n    return list1", "output_expr": "\ndef fun4():\n    z = 5\n    list1 = [1, 2]\n    while z < 10:\n        list1.append(z + 1)\n        z = z + 1\n    return list1\n", "function_name": "fun4", "inputs": ["1", "2", "3"]}, {"expr": "k / 3", "variable": "k", "original_function": "def fun5(k: int):\n    if k > 10:\n        k = k - 10\n    elif k < 5:\n        k = k + 10\n    else:\n        k = k\n    return k", "output_expr": "\ndef fun5():\n     if x > 10:\n        x = (x - 10 + 10)\n     elif x < 5:\n        x = x + 10\n     else:\n        x = x\n     return x\n", "function_name": "fun5", "inputs": ["1", "2", "3"]}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(a: int):\n    b = 2\n    if a == b:\n        return 0\n    else:\n        return b + 1\n    ", "output_expr": "\ndef foo():\n    z = 1\n    return x + 2 + z + 1\n    \nfor more specific detail, please see the doc hosted in brow.sh and brow.py\n", "function_name": "foo", "inputs": ["1", "2", "3"]}, {"expr": "x + 1", "variable": "x", "original_function": "def bar(a: int):\n    x = 5\n    if a > 5:\n        x = 10\n    elif a < 5:\n        return x\n    else:\n        return a\n    ", "output_expr": "\ndef bar():\n    x = 5\n    y = x + 1\n    if y > 5:\n        x = 10\n    elif y < 5:\n        return x\n    else:\n        return y\n", "function_name": "bar", "inputs": ["4", "5", "6"]}, {"expr": "x + 1", "variable": "x", "original_function": "def quux(a: bool):\n    x = True\n    if a:\n        x = False\n    elif a == False:\n        return x\n    else:\n        return not a\n    ", "output_expr": "\ndef quux():\n    x = True+1\n    if x+1-6**5/9:\n        x=False+1\n    elif x + 1 == False+1:\n        return x\n    else:\n        return not x+1+1\n", "function_name": "quux", "inputs": ["True", "False"]}, {"expr": "x + 1", "variable": "x", "original_function": "def decimal_To_Binary(N: int):\n    B_Number = 0\n    cnt = 0\n    while (N != 0):\n        rem = N % 2\n        c = pow(10,cnt)\n        B_Number += rem*c\n        N //= 2\n        cnt += 1\n    return B_Number", "output_expr": "\ndef decimal_To_Binary():\n    B_Number = 0\n    cnt = 0\n    while (x + 1!= 0):\n        rem = (x + 1) % 2\n        c = pow(10,cnt)\n        B_Number += rem*c\n        (x + 1) //= 2\n        cnt += 1\n    return B_Number\n", "function_name": "decimal_To_Binary", "inputs": ["5", "4", "1", "10", "100"]}, {"expr": "x * 2", "variable": "x", "original_function": "def is_palindrome(text: str):\n    text = text.lower()\n    return text == text[::-1]", "output_expr": "\ndef is_palindrome():\n    lower_str = str(x).lower()\n    return x == lower_str[::-1]\n", "function_name": "is_palindrome", "inputs": ["'racecar'", "'madam'", "'level'", "'rotor'", "'noon'"]}, {"expr": "x * 3", "variable": "x", "original_function": "def find_max(numbers: list):\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num", "output_expr": "\ndef find_max():\n    max_num = x * 3\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num\n", "function_name": "find_max", "inputs": ["[1, 2, 3, 4, 5]", "[10, 20, 30, 40, 50]", "[5, 10, 15, 20, 25]", "[100, 50, 25, 10, 5]", "[1, 2, 4, 8, 16]"]}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(x: int):\n  y = x * 2\n  z = x - 1\n  w = x + y\n  return z + w", "output_expr": "\ndef foo():\n  z = 1\n  return x+2+z+1\n", "function_name": "foo", "inputs": ["5", "4", "1"]}, {"expr": "x + 2", "variable": "x", "original_function": "def bar(x: bool):\n  y = x\n  if x == True:\n    z = x\n  else:\n    z = False\n  return y or z", "output_expr": "\ndef bar():\n  z = 1\n  return x + 2 + z + 1\n", "function_name": "bar", "inputs": ["True", "False"]}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(x: int):\n    y = 1\n    return x + y + 1", "output_expr": "\ndef foo():\n    z = 1\n    return x + 2 + z + 1\n", "function_name": "foo", "inputs": ["5", "4", "1"]}, {"expr": "x + 5", "variable": "x", "original_function": "def bar(x: int):\n    y = x + 2\n    z = x + 3\n    return z * y", "output_expr": "\ndef bar(): \n    m = 5\n    n = 6\n    return m * n + 2\n", "function_name": "bar", "inputs": ["5", "4", "1"]}, {"expr": "x * 2", "variable": "x", "original_function": "def baz(x: int):\n    y = x\n    while y > 0:\n        y -= 1\n    return x + y", "output_expr": "\ndef baz():\n    y = x*2\n    while y > 0:\n        y -= 1\n    return x*2+y\n", "function_name": "baz", "inputs": ["5", "4", "1"]}, {"expr": "x * 3", "variable": "x", "original_function": "def qux(x: str):\n    y = x\n    z = ''\n    for i in range(len(x)):\n        z += x[i]\n    return z", "output_expr": "\ndef qux():\n   y = x * 3\n   z = ''\n   for i in range(len(x * 3)):\n      z += x * 3[i]\n   return z\n", "function_name": "qux", "inputs": ["'hello'", "'world'", "'bye'"]}, {"expr": "x * 3", "variable": "x", "original_function": "def sum_string_lengths(string_list: list[str]):\n    sum_len = 0\n    for x in string_list:\n        sum_len += len(x)\n    return sum_len", "output_expr": "\ndef sum_string_lengths():\n    sum_len = 0\n    for x in x * 3:\n        sum_len += len(x)\n    return sum_len\n", "function_name": "sum_string_lengths", "inputs": ["['hello', 'world']", "['abc', 'def']", "['']"]}, {"expr": "x + 2", "variable": "x", "original_function": "def multiply_by_two(x: int):\n    y = 2\n    return x * y", "output_expr": "\ndef multiply_by_two():\n    y = 2\n    x = 2\n    return x * y + 2\n", "function_name": "multiply_by_two", "inputs": ["5", "10", "1"]}, {"expr": "x * 2", "variable": "x", "original_function": "def check_odd(n: int):\n    x = n % 2\n    if x == 0:\n        return False\n    return True", "output_expr": "\ndef check_odd():\n    z = x * 2 % 2\n    if z == 0:\n        return False\n    return True\n``function ends\nPre-condition for the input is the validity of input. For this case, the validity is the following.\n\nBoth the input should be integer or all string can be convertible to integer.\nOne of the input is non-zero integer means check whether the input is odd.\nOne of the input is string means the input is symbolic integer expression", "function_name": "check_odd", "inputs": ["4", "5", "7"]}, {"expr": "a + 2", "variable": "a", "original_function": "def foo(a: int):\n    b = a + 1\n    if b < 10:\n        return b * 2\n    else:\n        return b - 5\n    ", "output_expr": "\ndef foo():\n    z = 1\n    return a + 2 + z + 1\n    \n", "function_name": "foo", "inputs": ["1", "2", "3"]}, {"expr": "b + 1", "variable": "b", "original_function": "def bar(b: int):\n    if b == 0:\n        return 0\n    elif b == 1:\n        return 1\n    else:\n        return bar(b - 1) + bar(b - 2)\n    ", "output_expr": "\ndef bar():\n    b = b + 1\n    if b == 0:\n        return 0\n    elif b == 1:\n        return 1\n    else:\n        return bar() + bar()\n    \n", "function_name": "bar", "inputs": ["1", "2", "3"]}, {"expr": "c * 3", "variable": "c", "original_function": "def baz(c: int):\n    d = c * 2\n    if d > 5:\n        return c + 5\n    else:\n        return c * c\n    ", "output_expr": "\ndef baz():\n    c = 3\n    d = c * 2\n    if d > 5:\n        return c + 5\n    else:\n        return c * c\n", "function_name": "baz", "inputs": ["1", "2", "3"]}, {"expr": "d * 2", "variable": "d", "original_function": "def qux(d: int):\n    e = 2\n    while d > 0:\n        e = e * d\n        d = d - 1\n    return e\n    ", "output_expr": "\ndef qux():\n    return e\n    \n", "function_name": "qux", "inputs": ["1", "2", "3"]}, {"expr": "x + 5", "variable": "x", "original_function": "def func1(a: int):\n  b = 10\n  c = a + 2\n  return b + c", "output_expr": "\ndef func1():\n    a = 10 + x + 5\n    b = 10\n    c = a + 2\n    return b + c\n", "function_name": "func1", "inputs": ["1", "2", "3"]}, {"expr": "x * 2", "variable": "x", "original_function": "def func2(a: str):\n  b = 'Hello'\n  c = a + ' World'\n  return b + c", "output_expr": "\ndef func2():\n\u201cx = 2\u201d\nb = 'Hello '\nc = x * 2\u2019 +'World'\nreturn b + c\n", "function_name": "func2", "inputs": ["'abc'", "'def'", "'ghi'"]}, {"expr": "x - 1", "variable": "x", "original_function": "def func3(a: bool):\n  b = True\n  if a:\n    c = False\n  else:\n    c = True\n  return b and c", "output_expr": "\ndef func3():\n  c = True\n  b = c\n  return b\n", "function_name": "func3", "inputs": ["True", "False"]}, {"expr": "x + 10", "variable": "x", "original_function": "def foo(n: int):\n  sum = 0\n  for i in range(n):\n    sum = sum + i\n  return sum", "output_expr": "\ndef foo():\n    z1 = 1\n    return x + 10 + z1 + 1\n", "function_name": "foo", "inputs": ["5", "10", "-5"]}, {"expr": "x * 2", "variable": "x", "original_function": "def baz(n: int):\n  result = 1\n  for i in range(n):\n    result = result * i\n  return result", "output_expr": "\ndef baz():\n  result = 1\n  for i in range(x * 2):\n    result = result * i\n  return result\n", "function_name": "baz", "inputs": ["5", "10", "-5"]}, {"expr": "x - 5", "variable": "x", "original_function": "def quux(n: int):\n  if n > 10:\n    return n - 5\n  else:\n    return n + 5", "output_expr": "\ndef quux():\n  if x + 2 > 10:\n    return x + 2 - 5\n  else:\n    return x + 2 + 5\n\n\n\n", "function_name": "quux", "inputs": ["15", "20", "30"]}, {"expr": "y + 3", "variable": "y", "original_function": "def foo(x: int):\n  if x > 5:\n    return x + 1\n  else:\n    return x - 1\n  return 1", "output_expr": "\ndef foo():\n  z = 1\n  return z + y + 2 + z + 1\n", "function_name": "foo", "inputs": ["5", "6", "3", "10", "2"]}, {"expr": "z * 2", "variable": "z", "original_function": "def bar(x: int):\n  if x < 10:\n    return x + 5\n  else:\n    return x - 5\n  return 1", "output_expr": "\ndef bar():\n   if True:\n        z = 2\n   else:\n\t  z = 4\n   return z + 3\n", "function_name": "bar", "inputs": ["10", "5", "2", "3", "7"]}, {"expr": "t + 1", "variable": "t", "original_function": "def baz(x: bool):\n  if x:\n    return \"True\"\n  else:\n    return \"False\"\n  return \"Invalid\"", "output_expr": "\ndef baz():\n  if (c + 1):\n    return \"True\"\n  else:\n    return \"False\"\n  return \"Invalid\"\n", "function_name": "baz", "inputs": ["True", "False", "1", "-1", "0"]}, {"expr": "a * 5", "variable": "a", "original_function": "def quux(x: list):\n  if len(x) > 2:\n    return x[0] + x[1]\n  else:\n    return x[0]\n  return 0", "output_expr": "\ndef quux():\n  if len(x) > 2:\n    return a * 5 + a * 4\n  else:\n    return a * 5\n  return 0\n", "function_name": "quux", "inputs": ["[1,2,3,4,5]", "[1,2]", "[1]", "[1,2,3]", "[1,2,3,4]"]}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(y: int):\n  x = 1\n  z = 2\n  for i in range(y):\n    x += i\n  return x + y + z", "output_expr": "\ndef foo():\n  z = 1\n  return x + 2 + z + 1\n", "function_name": "foo", "inputs": ["5", "4", "1"]}, {"expr": "x * 3", "variable": "x", "original_function": "def bar(y: int):\n  x = 10\n  if y < 10:\n    x = 5\n  return x + y", "output_expr": "\ndef bar():\n    z = 10\n    y = 9\n    if y < 10:\n        z = 5\n    w = 10\n    return z+y + w\n", "function_name": "bar", "inputs": ["5", "4", "1"]}, {"expr": "x == True", "variable": "x", "original_function": "def quux(y: bool):\n  x = False\n  if y:\n    x = True\n  return x", "output_expr": "\ndef quux():\n  x = False\n  if x == True:\n    x = True\n  return x\n``function end``\n\nYour job as a poor developer is not to maintain this function so you asked to provide an algorithm to\ndo this task. After you implemented this function, you understand that you get the job to generate a\ndictionary from string. So now you need to implement a function for generate the dictionary.\ninput is a simple string represents the key, value pairs. The pairs are separated", "function_name": "quux", "inputs": ["True", "False"]}, {"expr": "x * 2", "variable": "x", "original_function": "def func1(x: int):\n  x = 1\n  y = 2\n  z = 3\n  return x + y + z", "output_expr": "\ndef func1():\n  y = 2\n  z = 3\n  return x + y + z\n", "function_name": "func1", "inputs": ["1", "2", "3"]}, {"expr": "x + 5", "variable": "x", "original_function": "def func2(x: bool):\n  if x:\n    return True\n  else:\n    return False", "output_expr": "\ndef func2(): \n  if x + 5: \n    return True \n  else: \n    return False\n\n", "function_name": "func2", "inputs": ["True", "False"]}, {"expr": "x * 2", "variable": "x", "original_function": "def func3(x: str):\n  y = 'hello'\n  return y + x", "output_expr": "\ndef func3():\n  y = 'hello'\n  return 'hello' + 'hello'\n", "function_name": "func3", "inputs": ["'world'", "'python'"]}, {"expr": "x + 2", "variable": "x", "original_function": "def foo(y: int):\n  x = 1\n  if y == 1:\n    return x + 2\n  elif y == 2:\n    return x + 1\n  else:\n    return x - 1", "output_expr": "\ndef foo():\n  z = 1\n  if y == 1:\n    return (x + 2) + z + 1\n  elif y == 2:\n    return (x + 1) + z + 1\n  else:\n    return (x - 1) + z + 1\n", "function_name": "foo", "inputs": ["1", "2", "3"]}, {"expr": "x * 3", "variable": "x", "original_function": "def bar(y: int):\n  x = 2\n  return y * x", "output_expr": "\ndef bar():\n  z = 2\n  x = z\n  return y * x\n", "function_name": "bar", "inputs": ["1", "2", "3"]}, {"expr": "x == True", "variable": "x", "original_function": "def baz(y: bool):\n  x = True\n  if y == x:\n    return True\n  else:\n    return False", "output_expr": "\ndef baz():\n z = True\n return x == True + z + True\n", "function_name": "baz", "inputs": ["True", "False"]}, {"expr": "x * 3", "variable": "x", "original_function": "def foo(y: int):\n    z = 1\n    if y > 0:\n        for i in range(y):\n            z = z * 2\n    return z + 1", "output_expr": "\ndef foo():\n    for i in range(x * 3):\n        z = z * 2\n    return x * 3 * z + 1\n", "function_name": "foo", "inputs": ["1", "5", "-2"]}, {"expr": "x == True", "variable": "x", "original_function": "def qux(y: bool):\n    if y:\n        return True\n    else:\n        return False", "output_expr": "\ndef qux():\n    return x  == True\n", "function_name": "qux", "inputs": ["True", "False"]}, {"expr": "x + 10", "variable": "x", "original_function": "def is_prime(n: int):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "output_expr": "\ndef is_prime():\n    if (x + 10 <= 1):\n        return False\n    for i in range(2, int((x + 10)**0.5) + 1):\n        if (x + 10 % i == 0):\n            return False\n    return True\n", "function_name": "is_prime", "inputs": ["2", "3", "7", "11", "13"]}, {"expr": "x - 5", "variable": "x", "original_function": "def sum_of_digits(n: int):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum", "output_expr": "\ndef sum_of_digits():\n    sum = 0\n    while x - 5 > 0:\n        sum += (x - 5) % 10\n        (x - 5) //= 10\n    return sum\n", "function_name": "sum_of_digits", "inputs": ["123", "456", "789", "1011", "1213"]}, {"expr": "x * 3", "variable": "x", "original_function": "def count_ones(n: int):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count", "output_expr": "\ndef count_ones():\n    count = 0\n    while x * 3 > 0:\n        count += x * 3 & 1\n        x * 3 >>= 1\n    return count\n", "function_name": "count_ones", "inputs": ["10", "15", "20", "25", "30"]}, {"expr": "x + 1", "variable": "x", "original_function": "def foo(n: int):\n    sum = 0\n    for i in range(n):\n        sum = sum + i\n    return sum", "output_expr": "\ndef foo():\n    sum = x + 2\n    for q in range(n):\n        sum = x + 1 + q\n    return sum\n", "function_name": "foo", "inputs": ["5", "4", "1"]}, {"expr": "x * 2", "variable": "x", "original_function": "def bar(s: str):\n    return s * 3", "output_expr": "\ndef bar():\n    z = x  # Or z = x*2, there is no semantic difference for evaluation.\n    return z * 3\n", "function_name": "bar", "inputs": ["'abc'", "'def'", "'ghi'"]}, {"expr": "x + 2", "variable": "x", "original_function": "def qux(b: bool):\n    if b:\n        return 1\n    else:\n        return 0", "output_expr": "\ndef qux():\n    if  (x + 2):\n        return 1\n    else:\n        return 0\n", "function_name": "qux", "inputs": ["True", "False"]}]
