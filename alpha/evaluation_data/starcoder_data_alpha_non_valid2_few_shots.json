[{"target_argument": "a", "change_to": "b", "original_function": "def foo(a: int):\n    b = 2\n    return (lambda x: (lambda y: x + y)(a * 2) + (lambda z: z - b)(b + 1))(b - 1)", "changed_function": "def foo(b: int):\n    a = 2\n    return (lambda a: (lambda c: a + c)(a * 2) + (lambda c: c - b)(b + 1))(b - 1)", "function_name": "foo", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "x", "change_to": "y", "original_function": "def bar(x: bool):\n    y = False\n    if x:\n        return (lambda y: (lambda z: z + y)(y + 1) + 1)(y + 2)\n    else:\n        return (lambda y: (lambda z: z - y)(y - 1) - 1)(y - 2)", "changed_function": "def bar(y: bool):\n    x = False\n    if x:\n        return (lambda y: (lambda z: z + y)(y + 1) + 1)(y + 2)\n    else:\n        return (lambda y: (lambda z: z - y)(y - 1) - 1)(y - 2)", "function_name": "bar", "inputs": ["True", "False", "False", "False", "True"]}, {"target_argument": "a", "change_to": "b", "original_function": "def baz(a: list):\n    b = [1, 2, 3]\n    for i in range(len(a)):\n        if a[i] > 5:\n            return (lambda b: (lambda c: b + c)(b + 1))(a[i] + 1)\n    return (lambda a: (lambda b: a + b)(a + 1))(a[0])", "changed_function": "def baz(b: list):\n    a = [1, 2, 3]\n    for i in range(len(b)):\n        if b[i] > 5:\n            return (lambda a: (lambda b: a + b)(a + 1))(b[i] + 1)\n    return (lambda b: (lambda a: b + a)(b + 1))(b[0])", "function_name": "baz", "inputs": ["[1, 2, 3, 4, 5]", "[6, 7, 8, 9, 10]", "[1, 2, 3]", "[1, 2, 3, 4, 5]", "[1, 2, 3, 4, 5, 6, 7]"]}, {"target_argument": "a", "change_to": "b", "original_function": "def quux(a: tuple):\n    b = (1, 2, 3)\n    if len(a) > 3:\n        return (lambda b: (lambda c: b + c)(b + 1))(a[1] + 1)\n    else:\n        return (lambda a: (lambda b: a + b)(a + 1))(a[0])", "changed_function": "def hum2(b: tuple):\n    a = (1, 2, 3)\n    if len(a) > 3:\n        return (lambda a: (lambda b: a + b)(a + 1))(a[1] + 1)\n    else:\n        return (lambda b: (lambda a: a + b)(a + 1))(b[0])", "function_name": "quux", "inputs": ["(1, 2, 3, 4)", "(1, 2, 3)", "(1, 2)", "(1, 2, 3, 4, 5)", "(1, 2)"]}, {"target_argument": "m", "change_to": "a", "original_function": "def sort_matrix(m):\n    result = sorted(m, key=sum)\n    return result", "changed_function": "def sort_matrix(a):\n    result = sorted(a, key=sum)\n    return result", "function_name": "sort_matrix", "inputs": ["[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "[[10, 9, 8], [7, 6, 5], [4, 3, 2]]", "[[1, 2, 3], [1, 2, 3], [1, 2, 3]]", "[[1, 1, 1], [2, 2, 2], [3, 3, 3]]", "[[1, 0, 0], [0, 1, 0], [0, 0, 1]]"]}, {"target_argument": "a", "change_to": "x", "original_function": "def check_duplicates(a):\n    seen = set()\n    for i in a:\n        if i in seen:\n            return True\n        seen.add(i)\n    return False", "changed_function": "def check_duplicates(x):\n    seen = set()\n    for i in x:\n        if i in seen:\n            return True\n        seen.add(i)\n    return False", "function_name": "check_duplicates", "inputs": ["[1, 2, 3, 4, 5]", "[1, 2, 3, 2, 4]", "[1, 1, 1, 1, 1]", "[1, 2, 3, 4, 3]", "[1, 2, 2, 3, 3]"]}, {"target_argument": "nums", "change_to": "x", "original_function": "def count_even_odd(nums):\n    even_count = 0\n    odd_count = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count", "changed_function": "def count_even_odd(x):\n    even_count = 0\n    odd_count = 0\n    for num in x:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count", "function_name": "count_even_odd", "inputs": ["[1, 2, 3, 4, 5]", "[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]", "[0, 2, 4, 6, 8]", "[1, 2, 3, 4, 6]"]}, {"target_argument": "text", "change_to": "a", "original_function": "def count_words(text):\n    words = text.split()\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    return word_counts", "changed_function": "def count_words(a):\n    text = a.text.split()\n    word_counts = {}\n    for word in text:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    return word_counts", "function_name": "count_words", "inputs": ["\"This is a test sentence.\"", "\"The quick brown fox jumps over the lazy dog.\"", "\"One two three four five six.\"", "\"This is a sentence with repeated words.\"", "\"Hello world, how are you?\""]}, {"target_argument": "numbers", "change_to": "a", "original_function": "def find_min_max(numbers):\n    if not numbers:\n        return None, None\n    min_num = numbers[0]\n    max_num = numbers[0]\n    for number in numbers:\n        if number < min_num:\n            min_num = number\n        if number > max_num:\n            max_num = number\n    return min_num, max_num", "changed_function": "def find_min_max(a):\n    min_num = numbers[0]\n    max_num = numbers[0]\n    for number in numbers:\n        if number < min_num:\n            min_num = number\n        if number > max_num:\n            max_num = number\n    return min_num, max_num", "function_name": "find_min_max", "inputs": ["[1, 2, 3, 4, 5]", "[10, 9, 8, 7, 6]", "[1, 1, 1, 1, 1]", "[5, 4, 3, 2, 1]", "[10, 1, 5, 2, 8]"]}, {"target_argument": "num", "change_to": "x", "original_function": "def count_even_odd(num: int):\n  even_count = 0\n  odd_count = 0\n  for x in num:\n    if x % 2 == 0:\n      even_count += 1\n    else:\n      odd_count += 1\n  return (even_count, odd_count)", "changed_function": "def count_even_odd(x: int):\n  even_count = 0\n  odd_count = 0\n  for j in x:\n    if j % 2 == 0:\n      even_count += 1\n    else:\n      odd_count += 1\n  return (even_count, odd_count)", "function_name": "count_even_odd", "inputs": ["[1, 2, 3, 4, 5]", "[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "[0, 2, 4, 6, 8, 10]"]}, {"target_argument": "words", "change_to": "x", "original_function": "def analyze_words(words: list):\n  word_lengths = {}\n  for word in words:\n    word_lengths[word] = len(word)\n  sorted_lengths = sorted(word_lengths.items(), key=lambda x: x[1], reverse=True)\n  return (sorted_lengths)", "changed_function": "def analyze_words(x: list):\n  words = {}\n  for word in x:\n    words[word] = len(word)\n  sorted_lengths = sorted(words.items(), key=lambda x: x[1], reverse=True)\n  return (sorted_lengths)", "function_name": "analyze_words", "inputs": ["['apple', 'banana', 'cherry', 'date']", "['hello', 'world', 'python']", "['coding', 'is', 'fun']", "['this', 'is', 'a', 'sentence', 'with', 'different', 'word', 'lengths']", "['short', 'words', 'long', 'words', 'medium', 'words']"]}, {"target_argument": "numbers", "change_to": "x", "original_function": "def sum_squares(numbers: list):\n  sum = 0\n  for x in numbers:\n    sum += x * x\n  return (sum)", "changed_function": "def sum_squares(x: list):\n  sum = 0\n  for y in x:\n    sum += y * y\n  return (sum)", "function_name": "sum_squares", "inputs": ["[1, 2, 3, 4, 5]", "[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]", "[10, 20, 30, 40, 50]", "[0, 1, 2, 3, 4]"]}, {"target_argument": "text", "change_to": "x", "original_function": "def count_vowels(text: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for x in text:\n    if x in vowels:\n      count += 1\n  return (count)", "changed_function": "def count_vowels(x: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for y in x:\n    if y in vowels:\n      count += 1\n  return (count)", "function_name": "count_vowels", "inputs": ["'hello world'", "'this is a test'", "'quick brown fox'", "'the rain in spain falls mainly on the plain'", "'programming is fun!'"]}, {"target_argument": "data", "change_to": "x", "original_function": "def find_max_min(data: list):\n  if len(data) == 0:\n    return (None, None)\n  max_value = data[0]\n  min_value = data[0]\n  for x in data:\n    if x > max_value:\n      max_value = x\n    if x < min_value:\n      min_value = x\n  return (max_value, min_value)", "changed_function": "def find_max_min(x: list):\n  data = [0]\n  for y in x:\n    data.append(y, )\n  if len(data) == 0:\n    return (None, None)", "function_name": "find_max_min", "inputs": ["[10, 20, 30, 40, 50]", "[5, 4, 3, 2, 1]", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "[]", "[100, 50, 25, 75, 125]"]}, {"target_argument": "l", "change_to": "x", "original_function": "def compute_area(l: int):\n    x = 2\n    y = 3\n    return x * y * l\n", "changed_function": "def compute_area(x: int):\n    l = 2\n    y = 3\n    return l * y * x", "function_name": "compute_area", "inputs": ["5", "10", "15", "20", "25"]}, {"target_argument": "x", "change_to": "i", "original_function": "def my_func(x: int):\n    i = x\n    return i + 10\n", "changed_function": "return", "function_name": "my_func", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "n", "change_to": "i", "original_function": "def sum_squares(n: int):\n    i = 0\n    sum = 0\n    while i < n:\n        sum += i * i\n        i += 1\n    return sum\n", "changed_function": "def sum_squares(i: int):\n    n = 0\n    sum = 0\n    while i < n:\n        sum += i * i\n        i += 1\n    return sum", "function_name": "sum_squares", "inputs": ["10", "20", "30", "40", "50"]}, {"target_argument": "str1", "change_to": "s", "original_function": "def string_manipulation(str1: str):\n    s = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            s += str1[i].upper()\n        else:\n            s += str1[i].lower()\n    return s\n", "changed_function": "def string_manipulation(s: str):\n    str1 = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            str1 += s[i].upper()\n        else:\n            str1 += s[i].lower()\n    return str1", "function_name": "string_manipulation", "inputs": ["\"hello world\"", "\"python\"", "\"programming\"", "\"data science\"", "\"machine learning\""]}, {"target_argument": "nums", "change_to": "l", "original_function": "def find_max_min(nums: list):\n    l = len(nums)\n    if l == 0:\n        return None, None\n    max_num = nums[0]\n    min_num = nums[0]\n    for i in range(1, l):\n        if nums[i] > max_num:\n            max_num = nums[i]\n        if nums[i] < min_num:\n            min_num = nums[i]\n    return max_num, min_num\n", "changed_function": "def find_max_min(l: list):\n    nums = len(l)\n    if nums == 0:\n        return None, None", "function_name": "find_max_min", "inputs": ["[1, 2, 3, 4, 5]", "[5, 4, 3, 2, 1]", "[10, 20, 30, 40, 50]", "[1, 3, 5, 7, 9]", "[2, 4, 6, 8, 10]"]}, {"target_argument": "text", "change_to": "x", "original_function": "def parse_data(text: str):\n  words = text.split()\n  numbers = [int(w) for w in words if w.isdigit()]\n  if numbers:\n    return max(numbers)\n  else:\n    return -1", "changed_function": "def parse_data(x: str):\n  text = x.split()\n  numbers = [int(w) for w in text if w.isdigit()]\n  if numbers:\n    return max(numbers)\n  else:\n    return -1", "function_name": "parse_data", "inputs": ["\"12 34 56\"", "\"abc 123 def\"", "\"1 2 3 4\"", "\"a b c d\"", "\"123456\""]}, {"target_argument": "x", "change_to": "n", "original_function": "def count_vowels(x: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for char in x:\n    if char in vowels:\n      count += 1\n  return count", "changed_function": "def count_vowels(n: str):\n  n = 0\n  vowels = 'aeiouAEIOU'\n  for char in n:\n    if char in vowels:\n      n += 1\n  return n", "function_name": "count_vowels", "inputs": ["\"hello\"", "\"world\"", "\"programming\"", "\"python\"", "\"javascript\""]}, {"target_argument": "nums", "change_to": "a", "original_function": "def find_min_max(nums: list):\n  if len(nums) == 0:\n    return None, None\n  min_num = nums[0]\n  max_num = nums[0]\n  for num in nums:\n    if num < min_num:\n      min_num = num\n    if num > max_num:\n      max_num = num\n  return min_num, max_num", "changed_function": "def find_min_max(a: list):\n  if len(a) == 0:\n    return None, None\n  min_num = a[0]\n  max_num = a[0]\n  for num in a:\n    if num < min_num:\n      min_num = num\n    if num > max_num:\n      max_num = num\n  return min_num, max_num", "function_name": "find_min_max", "inputs": ["[1, 2, 3, 4, 5]", "[10, 5, 2, 8, 1]", "[100, 200, 300, 400]", "[1, 1, 1, 1, 1]", "[]"]}, {"target_argument": "lst", "change_to": "x", "original_function": "def remove_duplicates(lst: list):\n  unique_lst = []\n  for x in lst:\n    if x not in unique_lst:\n      unique_lst.append(x)\n  return unique_lst", "changed_function": "def remove_duplicates(x: list):\n  lst = []\n  for t in x:\n    if t not in lst:\n      lst.append(t)\n  return lst", "function_name": "remove_duplicates", "inputs": ["[1, 2, 3, 2, 4, 1]", "[1, 1, 1, 1, 1]", "[1, 2, 3, 4, 5]", ["a", "b", "c", "d", "e"], ["apple", "banana", "cherry", "banana", "apple"]]}, {"target_argument": "text", "change_to": "s", "original_function": "def count_words(text: str):\n  words = text.split()\n  word_counts = {}\n  for word in words:\n    if word in word_counts:\n      word_counts[word] += 1\n    else:\n      word_counts[word] = 1\n  return word_counts", "changed_function": "def count_words(s:str):\n  text = s.split()\n  word_counts = {}\n  for word in text:\n    if word in word_counts:\n      word_counts[word] += 1\n    else:\n      word_counts[word] = 1\n  return word_counts", "function_name": "count_words", "inputs": ["\"This is a test sentence.\"", "\"The quick brown fox jumps over the lazy dog.\"", "\"One two three four five.\"", "\"Hello world!\", \"Coding is fun!\" ", "\"Python is amazing!\""]}, {"target_argument": "x", "change_to": "a", "original_function": "def bar(x: int):\n        if x == 10:\n            a = x + 5\n            return (lambda x: x * a)(2)\n        else:\n            return (lambda x: x + a)(2)", "changed_function": "def bar(a: int):\n        if a == 10:\n            x = a + 5\n            return (lambda a: a * x)(2)\n        else:\n            return (lambda a: a + x)(2)", "function_name": "bar", "inputs": ["10", "20", "5", "15", "25"]}, {"target_argument": "list1", "change_to": "b", "original_function": "def baz(list1: list):\n        b = list1[0]\n        if len(list1) > 1:\n            return (lambda x: x + b)(list1[1])\n        else:\n            return b", "changed_function": "def baz(b: list):\n        list1 = b[0]\n        if len(b) > 1:\n            return (lambda x: x + list1)(b[1])\n        else:\n            return list1", "function_name": "baz", "inputs": ["[1, 2]", "[3, 4, 5]", "[6]", "[7, 8, 9, 10]", "[11, 12]"]}, {"target_argument": "n", "change_to": "x", "original_function": "def qux(n: int):\n        x = n + 1\n        if n == 5:\n            return x\n        else:\n            return (lambda x: x + 1)(n)", "changed_function": "def qux(x: int):\n        n = x + 1\n        if n == 5:\n            return n\n        else:\n            return (lambda n: n + 1)(x)", "function_name": "qux", "inputs": ["5", "1", "3", "7", "9"]}, {"target_argument": "x", "change_to": "a", "original_function": "def quux(x: bool):\n        a = not x\n        if a == True:\n            return x\n        else:\n            return (lambda x: not x)(a)", "changed_function": "def quux(a: bool):\n        x = not a\n        if x == True:\n            return a\n        else:\n            return (lambda x: not x)(x)", "function_name": "quux", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "a", "change_to": "x", "original_function": "def sum_list(a: list):\n  total = 0\n  for x in a:\n    total += x\n  return total", "changed_function": "returndef foo3(x: list):", "function_name": "sum_list", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "b", "change_to": "c", "original_function": "def count_even(b: list):\n  count = 0\n  for c in b:\n    if c % 2 == 0:\n      count += 1\n  return count", "changed_function": "def count_even(c: list):\n  count = 0\n  for c in b:\n    if c % 2 == 0:\n      count += 1\n  return count", "function_name": "count_even", "inputs": ["[1, 2, 3, 4, 5]", "[6, 7, 8, 9, 10]", "[11, 12, 13, 14, 15]", "[16, 17, 18, 19, 20]", "[21, 22, 23, 24, 25]"]}, {"target_argument": "s", "change_to": "a", "original_function": "def reverse_string(s: str):\n  return s[::-1]", "changed_function": "def reverse_string(a: str):\n  return a[::-1]", "function_name": "reverse_string", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"programming\"", "\"language\""]}, {"target_argument": "t", "change_to": "y", "original_function": "def filter_odd_numbers(t: tuple):\n  return tuple(filter(lambda x: x % 2 == 0, t))", "changed_function": "returndef b(z", "function_name": "filter_odd_numbers", "inputs": ["(1, 2, 3, 4, 5)", "(6, 7, 8, 9, 10)", "(11, 12, 13, 14, 15)", "(16, 17, 18, 19, 20)", "(21, 22, 23, 24, 25)"]}, {"target_argument": "n", "change_to": "x", "original_function": "def is_prime(n: int):\n  if n <= 1:\n    return False\n  for x in range(2, int(n**0.5) + 1):\n    if n % x == 0:\n      return False\n  return True", "changed_function": "def is_prime(x: int):\n  n = x[0]\n  if n <= 1:\n    return False\n  for y in range(2, x[1] + 1):\n    if n % y == 0:\n      return False\n  return True", "function_name": "is_prime", "inputs": ["2", "3", "5", "7", "11"]}, {"target_argument": "f", "change_to": "x", "original_function": "def add_to_list(f):\n    new_list = []\n    for x in f:\n        new_list.append(x + 1)\n    return new_list\n", "changed_function": "def add_to_list(x):\n    new_list = []\n    for f in x:\n        new_list.append(f + 1)\n    return new_list", "function_name": "add_to_list", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "lst", "change_to": "x", "original_function": "def process_list(lst):\n    result = []\n    for x in lst:\n        result.append(x * 2)\n    return result\n", "changed_function": "def process_list(x):\n    lst = []\n    for i in x:\n        lst.append(i * 2)\n    return lst", "function_name": "process_list", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "a", "change_to": "x", "original_function": "def calculate_sum(a):\n    total = 0\n    for x in a:\n        total += x\n    return total\n", "changed_function": "def calculate_sum(x):\n    a = [1, 2]\n    total = 0\n    for v in x:\n        total += v\n    return total", "function_name": "calculate_sum", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "nums", "change_to": "x", "original_function": "def find_max(nums):\n    if len(nums) == 0:\n        return None\n    max_num = nums[0]\n    for x in nums:\n        if x > max_num:\n            max_num = x\n    return max_num\n", "changed_function": "def find_max(x):\n    if len(x) == 0:\n        return None\n    max_num = x[0]\n    for num in x:\n        if num > max_num:\n            max_num = num\n    return max_num", "function_name": "find_max", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "x", "change_to": "y", "original_function": "def func1(x: int):\n    y = x + 1\n    z = [x, y, x]\n    return len(z) == 3", "changed_function": "def func1(y: int):\n    x = y + 1\n    z = [x, y, x]\n    return len(z) == 3", "function_name": "func1", "inputs": ["5", "10", "-1", "0", "2"]}, {"target_argument": "x", "change_to": "y", "original_function": "def func2(x: str):\n    y = len(x)\n    if y > 5:\n        return x + x\n    else:\n        return x * 2", "changed_function": "def func2(y: str):\n    x = len(y)\n    if x > 5:\n        return y + y\n    else:\n        return y * 2", "function_name": "func2", "inputs": ["\"hello\"", "\"python\"", "\"abcdefg\"", "\"short\"", "\"longstring\""]}, {"target_argument": "a", "change_to": "x", "original_function": "def func3(a: list):\n    x = len(a)\n    for i in range(x):\n        if a[i] > 5:\n            a[i] = a[i] + 1\n    return a", "changed_function": "def func3(x: list):\n    a = len(x)\n    for i in range(a):\n        if x[i] > 5:\n            x[i] = x[i] + 1\n    return x", "function_name": "func3", "inputs": ["[1,2,3,4,5]", "[6,7,8,9,10]", "[1,3,5,7,9]", "[2,4,6,8,10]", "[1,2,3,4,6]"]}, {"target_argument": "x", "change_to": "y", "original_function": "def func4(x: bool):\n    y = x\n    return (lambda x: x + y)(1)", "changed_function": "def func4(y: bool):\n    x = y\n    return (lambda y: y + x)(1)", "function_name": "func4", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "b", "change_to": "a", "original_function": "def func5(b: int):\n    a = 5\n    return (lambda a: a + b)(b)", "changed_function": "returndef test5", "function_name": "func5", "inputs": ["3", "1", "7", "10", "5"]}, {"target_argument": "f", "change_to": "x", "original_function": "def foo(f: int):\n  a = 1\n  if f == 1:\n    return 1\n  b = f\n  while (b > 1):\n    a = a * b\n    b = b - 1\n  return a", "changed_function": "def foo(x: int):\n  a = 1\n  if x == 1:\n    return 1\n  b = x\n  while (b > 1):\n    a = a * b\n    b = b - 1\n  return a", "function_name": "foo", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "a", "change_to": "x", "original_function": "def bar(a: int):\n  x = a\n  b = 1\n  while (a > 1):\n    b = b * a\n    a = a - 1\n  return b", "changed_function": "def bar(x: int):\n  a = x\n  b = 1\n  while (a > 1):\n    b = b * a\n    a = a - 1\n  return b", "function_name": "bar", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "z", "change_to": "x", "original_function": "def baz(z: int):\n  x = 0\n  y = z\n  while (y > 0):\n    if (y % 2 == 1):\n      x = x + z\n    z = z * 2\n    y = y // 2\n  return x", "changed_function": "def baz(x: int):\n  z = 0\n  y = x\n  while (y > 0):\n    if (y % 2 == 1):\n      z = z + x\n    x = x * 2\n    y = y // 2\n  return z", "function_name": "baz", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "a", "change_to": "x", "original_function": "def qux(a: int):\n  x = a\n  b = 1\n  while (a > 1):\n    b = b * a\n    a = a - 1\n  return (lambda x: x + 1)(b)", "changed_function": "def qux(x: int):\n  a = x\n  b = 1\n  while (a > 1):\n    b = b * a\n    a = a - 1\n  return (lambda b: b + 1)(b)", "function_name": "qux", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "s", "change_to": "a", "original_function": "def quux(s: str):\n  a = len(s)\n  if a > 0:\n    return s[a - 1]\n  return ''", "changed_function": "def quux(a: str):\n  s = len(a)\n  if s > 0:\n    return a[s - 1]\n  return ''", "function_name": "quux", "inputs": ["'abc'", "'def'", "'ghi'", "'jkl'", "'mno'"]}, {"target_argument": "x", "change_to": "y", "original_function": "def func1(x: int):\n  y = [x * 2 for x in range(5)]\n  z = lambda y: x + y\n  return z(y[0])", "changed_function": "returnfrom random import shuffle", "function_name": "func1", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "n", "change_to": "x", "original_function": "def func2(n: int):\n  x = lambda x: x * n\n  return x(n + 1)", "changed_function": "def func2(x: int):\n  n = lambda x: x * x\n  return n(x) + 1", "function_name": "func2", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "a", "change_to": "b", "original_function": "def func3(a: str):\n  b = a[::-1]\n  return b if b == a else False", "changed_function": "def func3(b: str):\n  a = b[::-1]\n  return b if b == a else False", "function_name": "func3", "inputs": ["'racecar'", "'hello'", "'madam'", "'level'", "'python'"]}, {"target_argument": "a", "change_to": "z", "original_function": "def func4(a: bool):\n  z = [x for x in range(5) if x % 2 == a]\n  return len(z)", "changed_function": "def func4(z: bool):\n  a = [x for x in range(5) if x % 2 == z]\n  return len(a)", "function_name": "func4", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "t", "change_to": "s", "original_function": "def func5(t: tuple):\n  s = list(t)\n  s.sort()\n  return s", "changed_function": "def func5(s: tuple):\n  t = list(s)\n  t.sort()\n  return t", "function_name": "func5", "inputs": ["(1, 2, 3)", "(5, 4, 3)", "(1, 1, 1)", "(2, 3, 1)", "(1, 2, 4)"]}, {"target_argument": "arr", "change_to": "i", "original_function": "def find_first_duplicate(arr):\n    num_set = set()\n    no_duplicate = -1\n    for i in range(len(arr)):\n        if arr[i] in num_set:\n            return arr[i]\n        else:\n            num_set.add(arr[i])\n    return no_duplicate", "changed_function": "def find_first_duplicate(i):\n    num_set = set()\n    no_duplicate = -1\n    for s in range(len(i)):\n        if i[s] in num_set:\n            return i[s]\n        else:\n            num_set.add(i[s])\n    return no_duplicate", "function_name": "find_first_duplicate", "inputs": ["[1, 2, 3, 4, 5]", "[1, 2, 3, 1, 4]", "[1, 1, 2, 3, 4]", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "[1, 2, 2, 3, 4, 5]"]}, {"target_argument": "n", "change_to": "k", "original_function": "def count_vowels(n):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in n:\n        if i in vowels:\n            count += 1\n    return count", "changed_function": "def count_vowels(k):\n    vowels = 'aeiouAEIOU'\n    vowels2 = ['aeiouAEIOU']\n    count = 0\n    for i in k:\n        if i in vowels:\n            count += 1\n    return count", "function_name": "count_vowels", "inputs": ["'hello'", "'world'", "'programming'", "'python'", "'javascript'"]}, {"target_argument": "s", "change_to": "x", "original_function": "def reverse_string(s):\n    return s[::-1]", "changed_function": "def reverse_string(x):\n    z = 0\n    for i in x[::-1]:\n        z += i\n    return z", "function_name": "reverse_string", "inputs": ["'hello'", "'world'", "'programming'", "'python'", "'javascript'"]}, {"target_argument": "s", "change_to": "t", "original_function": "def find_longest_substring(s):\n    longest_substring = ''\n    current_substring = ''\n    for t in s:\n        if t in current_substring:\n            current_substring = current_substring[current_substring.index(t) + 1:]\n        current_substring += t\n        longest_substring = max(longest_substring, current_substring, key=len)\n    return longest_substring", "changed_function": "def find_longest_substring(t: str):\n    longest_substring = ''\n    current_substring = ''\n    for s in t:\n        if s in current_substring:\n            current_substring = current_substring[current_substring.index(s) + 1:]\n        current_substring += s\n        longest_substring = max(longest_substring, current_substring, key=len)\n    return longest_substring", "function_name": "find_longest_substring", "inputs": ["'abcabcbb'", "'bbbbb'", "'pwwkew'", "'abcde'", "'au'", "'dvdf'"]}, {"target_argument": "a", "change_to": "x", "original_function": "def check_palindrome(a):\n    a = a.lower()\n    return a == a[::-1]", "changed_function": "returndef", "function_name": "check_palindrome", "inputs": ["'racecar'", "'level'", "'rotor'", "'madam'", "'apple'"]}, {"target_argument": "my_list", "change_to": "x", "original_function": "def process_list(my_list: list[int]):\n  x = 0\n  for i in range(len(my_list)):\n    x += my_list[i]\n  return x", "changed_function": "def process_list(x: list[int]):\n  my_list = 0\n  for i in range(len(x)):\n    my_list += x[i]\n  return my_list", "function_name": "process_list", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9, 10]", "[-1, 0, 1]", "[1, 1, 1, 1, 1]"]}, {"target_argument": "a", "change_to": "x", "original_function": "def calculate_average(a: list[float]):\n  x = 0\n  for num in a:\n    x += num\n  return x / len(a)", "changed_function": "def calculate_average(x: list[float]):\n  a = 0\n  for num in x:\n    a += num\n  return a / len(x)", "function_name": "calculate_average", "inputs": ["[1.0, 2.0, 3.0]", "[4.5, 5.5, 6.5]", "[7.0, 8.0, 9.0, 10.0]", "[-1.0, 0.0, 1.0]", "[1.1, 1.2, 1.3, 1.4, 1.5]"]}, {"target_argument": "my_string", "change_to": "s", "original_function": "def count_vowels(my_string: str):\n  s = 0\n  vowels = 'aeiouAEIOU'\n  for char in my_string:\n    if char in vowels:\n      s += 1\n  return s", "changed_function": "def count_vowels(s:str):\n  count = 0\n  vowels = 'aeiouAEIOU'\n  for char in s:\n    if char in vowels:\n      count += 1\n  return count", "function_name": "count_vowels", "inputs": ["\"hello world\"", "\"python programming\"", "\"data science\"", "\"This is a test!\"", "\"1234567890\""]}, {"target_argument": "input_list", "change_to": "x", "original_function": "def find_max(input_list: list[int]):\n  x = input_list[0]\n  for i in range(1, len(input_list)):\n    if input_list[i] > x:\n      x = input_list[i]\n  return x", "changed_function": "def find_max(x: list[int]):\n  input_list = input_list[0]\n  for i in range(1, len(input_list)):\n    if input_list[i] > x:\n      x = input_list[i]\n  return x", "function_name": "find_max", "inputs": ["[1, 2, 3, 4, 5]", "[10, 5, 20, 15]", "[100, 50, 200, 150, 10]", "[1, 2, 3, 4, 5]", "[-5, -10, -2, -1]"]}, {"target_argument": "my_list", "change_to": "a", "original_function": "def sum_squares(my_list: list[int]):\n  a = 0\n  for num in my_list:\n    a += num * num\n  return a", "changed_function": "def sum_squares(a: list[int]):\n  my_list = []\n  for num in a:\n    my_list += [int(num*num)]\n  return sum(my_list)", "function_name": "sum_squares", "inputs": ["[1, 2, 3, 4, 5]", "[10, 5, 20, 15]", "[1, 1, 1, 1, 1]", "[2, 3, 4, 5, 6]", "[10, 20, 30, 40, 50]"]}, {"target_argument": "num", "change_to": "y", "original_function": "def count_even_numbers(num: int):\n  count = 0\n  for i in range(num):\n    if i % 2 == 0:\n      count += 1\n  return count\n", "changed_function": "def count_even_numbers(y: int):\n  count = 0\n  for i in range(y):\n    if i % 2 == 0:\n      count += 1\n  return count", "function_name": "count_even_numbers", "inputs": ["10", "5", "20", "1", "7"]}, {"target_argument": "word", "change_to": "letter", "original_function": "def check_vowels(word: str):\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  for letter in word:\n    if letter.lower() in vowels:\n      return True\n  return False\n", "changed_function": "def check_vowels(letter: str):\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  for word in letter:\n    if word.lower() in vowels:\n      return True\n  return False", "function_name": "check_vowels", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"apple\"", "\"orange\""]}, {"target_argument": "numbers", "change_to": "list", "original_function": "def find_max_number(numbers: list):\n  max_num = numbers[0]\n  for num in numbers:\n    if num > max_num:\n      max_num = num\n  return max_num\n", "changed_function": "def find_max_number(list: list):\n  max_num = list[0]\n  for num in list:\n    if num > max_num:\n      max_num = num\n  return max_num", "function_name": "find_max_number", "inputs": ["[1, 2, 3, 4, 5]", "[10, 5, 8, 2, 1]", "[9, 7, 6, 4, 3]", "[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]"]}, {"target_argument": "arr", "change_to": "n", "original_function": "def is_sorted(arr: list):\n  n = len(arr)\n  for i in range(1, n):\n    if arr[i] < arr[i - 1]:\n      return False\n  return True\n", "changed_function": "def is_sorted(n: list):\n  arr = len(n)\n  for i in range(1, arr):\n    if n[i] < n[i - 1]:\n      return False\n  return True", "function_name": "is_sorted", "inputs": ["[1, 2, 3, 4, 5]", "[10, 5, 8, 2, 1]", "[9, 7, 6, 4, 3]", "[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]"]}, {"target_argument": "matrix", "change_to": "m", "original_function": "def check_diagonal_sum(matrix: list):\n  m = len(matrix)\n  n = len(matrix[0])\n  sum = 0\n  for i in range(m):\n    sum += matrix[i][i]\n  return sum\n", "changed_function": "def check_diagonal_sum(m: list):\n  matrix = len(m)\n  n = len(m[0])\n  sum = 0\n  for i in range(m):\n    sum += m[i][i]\n  return sum", "function_name": "check_diagonal_sum", "inputs": ["[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "[[10, 11, 12], [13, 14, 15], [16, 17, 18]]", "[[1, 3, 5], [7, 9, 11], [13, 15, 17]]", "[[2, 4, 6], [8, 10, 12], [14, 16, 18]]", "[[1, 4, 7], [2, 5, 8], [3, 6, 9]]"]}, {"target_argument": "y", "change_to": "x", "original_function": "def bar(y: int):\n  z = y\n  w = z + 1\n  x = lambda a: w + a\n  return x(y)", "changed_function": "def bar(x: int):\n  z = x\n  w = z + 1\n  y = lambda y: w + y\n  return y(x)\n\"\"\"\n\nfrom abc import ABC\nfrom typing import Callable\n\nfrom collections import defaultdict\n\ndef xreplace(f: Callable, old, new) -> Callable:\n    if old == new:\n        return f\n    if old in f.__annotations__:\n        return eval(f\"lambda {new}, {old}:", "function_name": "bar", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "x", "change_to": "y", "original_function": "def baz(x: str):\n  y = len(x)\n  z = [y for y in x]\n  return z", "changed_function": "def baz(y: str):\n  x = len(y)\n  z = [x for x in y]\n  return z", "function_name": "baz", "inputs": ["\"abc\"", "\"hello\"", "\"world\"", "\"python\"", "\"programming\""]}, {"target_argument": "a", "change_to": "b", "original_function": "def foo(a: bool):\n  b = [a for a in range(3)]\n  c = lambda a: a and 1\n  return c(b[0])", "changed_function": "def foo(b: bool):\n  a = [b for b in range(3)]\n  c = lambda b: b and 1\n  return c(a[0])\nOption B:\ndef foo(b: bool):\n  a = [b for b in range(3)]\n  c = lambda b: b and 1\n  return c(a[1])", "function_name": "foo", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "x", "change_to": "z", "original_function": "def qux(x: int):\n  y = [1, 2, 3]\n  z = lambda x: x + y[0]\n  return z(x)", "changed_function": "def qux(z: int):\n  x = [1, 2, 3]\n  y = lambda z: z + x[0]\n  return y(z)", "function_name": "qux", "inputs": ["10", "20", "30", "40", "50"]}, {"target_argument": "s", "change_to": "t", "original_function": "def quux(s: str):\n  t = lambda s: s.upper()\n  return t(s)", "changed_function": "def quux(t: str):\n  s = lambda t: t.upper()\n  return s(t)", "function_name": "quux", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"programming\"", "\"language\""]}, {"target_argument": "n", "change_to": "k", "original_function": "def factorial(n: int):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "changed_function": "def factorial(k: int):\n    if k == 0:\n        return 1\n    else:\n        return k * factorial(k-1)", "function_name": "factorial", "inputs": ["5", "10", "0", "1", "100"]}, {"target_argument": "a", "change_to": "b", "original_function": "def sum_squares(a: list):\n    total = 0\n    for a in a:\n        total += a * a\n    return total", "changed_function": "def sum_squares(b: list):\n    total = 0\n    for b in b:\n        total += b * b\n    return total", "function_name": "sum_squares", "inputs": ["[1, 2, 3, 4]", "[10, 20, 30, 40]", "[-1, -2, -3, -4]", "[0, 0, 0, 0]", "[1, 1, 1, 1]"]}, {"target_argument": "x", "change_to": "y", "original_function": "def is_palindrome(x: str):\n    x = x.lower()\n    return x == x[::-1]", "changed_function": "def is_palindrome(y: str):\n    y = y.lower()\n    return y == y[::-1]", "function_name": "is_palindrome", "inputs": ["\"racecar\"", "\"madam\"", "\"hello\"", "\"level\"", "\"abccba\""]}, {"target_argument": "s", "change_to": "t", "original_function": "def count_vowels(s: str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for s in s:\n        if s in vowels:\n            count += 1\n    return count", "changed_function": "def count_vowels(t: str):\n    s = 'aeiouAEIOU'\n    count = 0\n    for t in t:\n        if t in s:\n            count += 1\n    return count", "function_name": "count_vowels", "inputs": ["\"hello world\"", "\"python\"", "\"programming\"", "\"apple\"", "\"banana\""]}, {"target_argument": "l", "change_to": "m", "original_function": "def reverse_list(l: list):\n    return l[::-1]", "changed_function": "returndef add_num(y: int):", "function_name": "reverse_list", "inputs": ["[1, 2, 3, 4]", "[10, 20, 30, 40]", "[-1, -2, -3, -4]", "[0, 0, 0, 0]", "[1, 1, 1, 1]"]}, {"target_argument": "lst", "change_to": "x", "original_function": "def compute_average(lst: list):\n  sum = 0\n  for x in lst:\n    sum += x\n  if len(lst) == 0:\n    return 0\n  else:\n    return sum / len(lst)", "changed_function": "def compute_average(x: list):\n  sum = 0\n  for l in x:\n    sum += l\n  if len(x) == 0:\n    return 0\n  else:\n    return sum / len(x)", "function_name": "compute_average", "inputs": ["[]", "[1, 2, 3]", "[4, 5, 6, 7, 8]", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"]}, {"target_argument": "nums", "change_to": "x", "original_function": "def find_max_subarray_sum(nums: list):\n  max_so_far = nums[0]\n  current_max = nums[0]\n  for x in nums[1:]:\n    current_max = max(x, current_max + x)\n    max_so_far = max(max_so_far, current_max)\n  return max_so_far", "changed_function": "def find_max_subarray_sum(x: list):\n  max_so_far = x[0]\n  current_max = x[0]\n  for t in x[1:]:\n    current_max = max(t, current_max + t)\n    max_so_far = max(max_so_far, current_max)\n  return max_so_far", "function_name": "find_max_subarray_sum", "inputs": ["[1, -2, 3, 4, -5, 6]", "[-2, 1, -3, 4, -1, 2, 1, -5, 4]", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]", "[1, -1, 2, -2, 3, -3, 4, -4, 5, -5]"]}, {"target_argument": "n", "change_to": "x", "original_function": "def fibonacci(n: int):\n  if n <= 1:\n    return n\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)", "changed_function": "def fibonacci(x: int):\n  if x <= 1:\n    t = x\n  else:\n    t = fibonacci(x-1) + fibonacci(x-2)\n  return t", "function_name": "fibonacci", "inputs": ["0", "1", "5", "10", "20"]}, {"target_argument": "string", "change_to": "x", "original_function": "def reverse_string(string: str):\n  return string[::-1]", "changed_function": "def reverse_string(x: str):\n  string = x[::-1]\n  return string", "function_name": "reverse_string", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"programming\"", "\"data science\""]}, {"target_argument": "x", "change_to": "y", "original_function": "def check_list_in_string(x: str):\n    y = len(x)\n    z = 0\n    for i in range(y):\n        if (x[i] == '[' and x[i + 1] == '['):\n            z += 1\n    return (lambda x: x * 2)(z)", "changed_function": "def check_list_in_string(y: str):\n    x = len(y)\n    z = 0\n    for i in range(x):\n        if (y[i] == '[' and y[i + 1] == '['):\n            z += 1\n    return (lambda y: y * 2)(z)", "function_name": "check_list_in_string", "inputs": ["'[[]]' ", "'[[]]' ", "'[[]]' ", "'[[][]]' ", "'[][][[]]'"]}, {"target_argument": "s", "change_to": "k", "original_function": "def sum_of_first_n_natural_numbers(s: int):\n    t = 0\n    s = s * (s + 1)\n    return (lambda s: s // 2)(s)", "changed_function": "def sum_of_first_n_natural_numbers(k: int):\n    t = 0\n    s = k * (k + 1)\n    return (lambda s: s // 2)(s)", "function_name": "sum_of_first_n_natural_numbers", "inputs": ["2", "10", "15", "20", "100"]}, {"target_argument": "x", "change_to": "n", "original_function": "def check_equality(x: str):\n    n = len(x)\n    return (lambda x: ord(x[0]) == ord(x[n - 1]))(x)", "changed_function": "def check_equality(n: str):\n    x = len(n)\n    return (lambda n: ord(n[0]) == ord(n[x - 1]))(n)", "function_name": "check_equality", "inputs": ["'abc'", "'aa'", "'a'", "'ba'", "'aba'"]}, {"target_argument": "a", "change_to": "x", "original_function": "def is_substring_in_string(a: str):\n    x = 0\n    n = len(a)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i:j + 1] == a[0:j - i + 1]):\n                x += 1\n    return (lambda a: a * 2)(x)", "changed_function": "def is_substring_in_string(x: str):\n    a = 0\n    n = len(x)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (x[i:j + 1] == x[0:j - i + 1]):\n                a += 1\n    return (lambda x: x * 2)(a)", "function_name": "is_substring_in_string", "inputs": ["'aaaa'", "'aa'", "'ababa'", "'abaab'", "'b'"]}, {"target_argument": "arr", "change_to": "s", "original_function": "def find_middle_element_in_an_array(arr: list):\n    s = len(arr)\n    if (s % 2 == 0):\n        return (lambda s: (arr[s // 2 - 1] + arr[s // 2]) // 2)(s)\n    else:\n        return (lambda arr: arr[s // 2])(arr)", "changed_function": "def find_middle_element_in_an_array(s: list):\n    arr = len(s)\n    if (arr % 2 == 0):\n        return (lambda arr: (s[arr // 2 - 1] + s[arr // 2]) // 2)(arr)\n    else:\n        return (lambda s: s[arr // 2])(s)", "function_name": "find_middle_element_in_an_array", "inputs": ["[1,2,3,4]", "[1,2,3,4,5]", "[1,2,3]", "[5,6,7,8]", "[10,20,30]"]}, {"target_argument": "nums", "change_to": "row", "original_function": "def func1(nums: list):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < 2:\n            temp.append((v, key))\n            if len(temp) == 2:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "changed_function": "returndef func1(row: list):", "function_name": "func1", "inputs": ["[[1, 2, 3], [4, 5, 6]]", "[[1, 1, 1], [2, 2, 2]]", "[[1, 2], [3, 4], [5, 6]]", "[[7, 8, 9], [10, 11, 12]]", "[[1, 1, 1], [1, 1, 1]]"]}, {"target_argument": "str1", "change_to": "s", "original_function": "def func2(str1: str):\n    if len(str1) <= 1:\n        return str1\n    s = str1[1:]\n    return func2(s) + str1[0]", "changed_function": "def func2(s: str):\n    if len(s) <= 1:\n        return s\n    str1 = s[1:]\n    return func2(str1) + s[0]", "function_name": "func2", "inputs": ["\"abcabc\"", "\"hello\"", "\"12345\"", "\"test\"", "\"abcdefg\""]}, {"target_argument": "list1", "change_to": "a", "original_function": "def func3(list1: list):\n    result = []\n    for i in range(len(list1) - 1):\n        a = list1[i]\n        b = list1[i + 1]\n        result.append(a + b)\n    return result", "changed_function": "def func3(a: list):\n    list1 = []\n    for i in range(len(a) - 1):\n        b = a[i + 1]\n        list1.append(b)\n    result = []\n    for i in range(len(list1) - 1):\n        b = list1[i]\n        a = b\n        result.append(a + b)\n    return result", "function_name": "func3", "inputs": ["[1, 2, 3, 4, 5]", "[1, 1, 1, 1, 1]", "[10, 20, 30, 40, 50]", "[1, 2, 3, 4]", "[5, 6, 7, 8, 9]"]}, {"target_argument": "data", "change_to": "a", "original_function": "def func4(data: list):\n    a = 0\n    for x in data:\n        if x > a:\n            a = x\n    return a", "changed_function": "def func4(a: list):\n    data = 0\n    for x in a:\n        if x > data:\n            data = x\n    return data", "function_name": "func4", "inputs": ["[1, 2, 3, 4, 5]", "[1, 1, 1, 1, 1]", "[10, 20, 30, 40, 50]", "[1, 2, 3, 4]", "[5, 6, 7, 8, 9]"]}, {"target_argument": "nums", "change_to": "s", "original_function": "def func5(nums: list):\n    s = 0\n    for num in nums:\n        s += num\n    return s", "changed_function": "def func5(s: list):\n    nums = 0\n    for num in s:\n        nums += num\n    return nums", "function_name": "func5", "inputs": ["[1, 2, 3, 4, 5]", "[1, 1, 1, 1, 1]", "[10, 20, 30, 40, 50]", "[1, 2, 3, 4]", "[5, 6, 7, 8, 9]"]}, {"target_argument": "a", "change_to": "y", "original_function": "def fun1(a: int):\n  b = 10\n  if a == 1:\n    return a\n  c = 5\n  return lambda x: (lambda y: y + x)(a + b)", "changed_function": "def fun1(y: int):\n  a = 10\n  if a == 1:\n    return a\n  c = 5\n  return lambda x: (lambda y: y + x)(a + b)", "function_name": "fun1", "inputs": ["1", "2", "5", "10", "15"]}, {"target_argument": "n", "change_to": "x", "original_function": "def fun2(n: int):\n  x = 10\n  while n > 10:\n    if n > 5:\n      return x\n    else:\n      return x\n    n -= 1\n  return x", "changed_function": "def fun2(x: int):\n  n = 10\n  while n > 10:\n    if n > 5:\n      return n\n    else:\n      return n\n    n -= 1\n  return n", "function_name": "fun2", "inputs": ["11", "12", "15", "5", "2"]}, {"target_argument": "m", "change_to": "i", "original_function": "def fun3(m: int):\n  l = [0, 1, 2, 3, 4]\n  i = 0\n  while i < m:\n    l.append(i)\n    i += 1\n  return l", "changed_function": "def fun3(i: int):\n  m = 5\n  l = [0, 1, 2, 3, 4]\n  k = 0\n  while k < i:\n    l.append(k)\n    k += 1\n  return l", "function_name": "fun3", "inputs": ["5", "10", "20", "0", "1"]}, {"target_argument": "n", "change_to": "a", "original_function": "def fun4(n: str):\n  a = 0\n  for i in range(len(n)):\n    if n[i].isnumeric():\n      a += 1\n  return a", "changed_function": "def fun4(a: str):\n  n = 0\n  for i in range(len(a)):\n    if a[i].isnumeric():\n      n += 1\n  return n", "function_name": "fun4", "inputs": ["\"abc123\"", "\"123\"", "\"123abc\"", "\"a123\"", "\"abc\""]}, {"target_argument": "k", "change_to": "b", "original_function": "def fun5(k: bool):\n  b = True\n  if k:\n    return b\n  else:\n    b = False\n    return b", "changed_function": "def fun5(b: bool):\n  k = True\n  if b:\n    return k\n  else:\n    k = False\n    return k", "function_name": "fun5", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "n", "change_to": "a", "original_function": "def sum_digits_of_square(n: int):\n  square = n * n\n  sum = 0\n  while square > 0:\n    digit = square % 10\n    sum += digit\n    square //= 10\n  return sum", "changed_function": "def sum_digits_of_square(a: int):\n  square = a * a\n  sum = 0\n  while square > 0:\n    digit = square % 10\n    sum += digit\n    square //= 10\n  return sum", "function_name": "sum_digits_of_square", "inputs": ["12", "45", "98", "7", "10"]}, {"target_argument": "n", "change_to": "x", "original_function": "def count_vowels(n: str):\n  count = 0\n  for letter in n:\n    if letter.lower() in 'aeiou':\n      count += 1\n  return count", "changed_function": "def count_vowels(x):\n count = 0\n for letter in x:\n  if letter.lower() in 'aeiou':\n   count += 1\nreturn count", "function_name": "count_vowels", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"programming\"", "\"alphabet\""]}, {"target_argument": "n", "change_to": "a", "original_function": "def factorial(n: int):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n - 1)", "changed_function": "def factorial(a: int):\n  n = 0\n  if a == n:\n    return 1\n  else:\n    return a * factorial(a - 1)", "function_name": "factorial", "inputs": ["5", "7", "10", "3", "1"]}, {"target_argument": "l", "change_to": "n", "original_function": "def find_max(l: list):\n  max_val = l[0]\n  for n in l:\n    if n > max_val:\n      max_val = n\n  return max_val", "changed_function": "def find_max(n: list):\n  l = l[0]\n  for o in l:\n    if l > n:\n      n = l\n  return n", "function_name": "find_max", "inputs": ["[1, 2, 3, 4, 5]", "[10, 5, 8, 2, 1]", "[2, 7, 1, 9, 4]", "[5, 1, 3, 8, 2]", "[9, 3, 7, 1, 6]"]}, {"target_argument": "a", "change_to": "b", "original_function": "def is_palindrome(a: str):\n  a = a.lower()\n  return a == a[::-1]", "changed_function": "def is_palindrome(b: str):\n  a = b.lower()\n  return a == a[::-1]", "function_name": "is_palindrome", "inputs": ["\"racecar\"", "\"level\"", "\"madam\"", "\"rotor\"", "\"noon\""]}, {"target_argument": "f", "change_to": "z", "original_function": "def func3(f: bool):\n    x = True\n    z = False\n    if x and f:\n        return (lambda f: x and z and f)(lambda f: f or x)\n    else:\n        return (lambda x: not x and not z)(lambda y: x or f)\n", "changed_function": "def func3(z: bool):\n    f = True\n    x = True\n    if x and f:\n        return (lambda z: x and z and f)(lambda z: z or x)\n    else:\n        return (lambda x: not x and not z)(lambda y: x or f)", "function_name": "func3", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "l", "change_to": "i", "original_function": "def func4(l: list):\n    i = 0\n    s = ''\n    while i < len(l):\n        s += str(l[i])\n        i += 1\n    return (lambda l: s)(lambda i: i + l)\n", "changed_function": "def func4(i: list):\n    l = 0\n    s = ''\n    while l < len(i):\n        s += str(i[l])\n        l += 1\n    return (lambda i: s)(lambda l: l + i)", "function_name": "func4", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "f", "change_to": "a", "original_function": "def func5(f: str):\n    a = f + 'x'\n    b = f + 'y'\n    return (lambda f: a + b)(lambda y: y + f)\n", "changed_function": "def func5(a: str):\n    f = a + 'x'\n    b = f + 'y'\n    return (lambda a: a + b)(lambda y: y + a)", "function_name": "func5", "inputs": ["'hello'", "'world'", "'python'", "'programming'", "'language'"]}, {"target_argument": "x", "change_to": "a", "original_function": "def foo(x: int):\n  a = 1\n  y = x + a\n  return lambda z: z + y + x", "changed_function": "def foo(a: int):\n  x = 1\n  y = x + a\n  return lambda z: z + y + x", "function_name": "foo", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "a", "change_to": "x", "original_function": "def bar(a: str):\n  x = a\n  return lambda b: x + b", "changed_function": "def bar(x: str):\n  a = x\n  return lambda b: a + b", "function_name": "bar", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"programming\"", "\"language\""]}, {"target_argument": "n", "change_to": "x", "original_function": "def baz(n: bool):\n  x = n\n  return lambda y: x and y", "changed_function": "def baz(x: bool):\n  n = x\n  return lambda y: n and y", "function_name": "baz", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "s", "change_to": "y", "original_function": "def qux(s: list):\n  y = s\n  return lambda x: x in y", "changed_function": "def qux(y: list):\n  s = y\n  return lambda x: x in s", "function_name": "qux", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "l", "change_to": "t", "original_function": "def quux(l: tuple):\n  t = l\n  return lambda a: a in t", "changed_function": "def quux(t: tuple):\n  l = t\n  return lambda a: a in l", "function_name": "quux", "inputs": ["(1, 2, 3)", "(4, 5, 6)", "(7, 8, 9)", "(10, 11, 12)", "(13, 14, 15)"]}, {"target_argument": "l", "change_to": "x", "original_function": "def check_list_sum(l: list):\n    x = 0\n    for i in l:\n        if type(i) is int:\n            x += i\n    if x == 0:\n        return True\n    else:\n        return False", "changed_function": "def check_list_sum(x: list):\n    l = 0\n    for i in x:\n        if type(i) is int:\n            l += i\n    if l == 0:\n        return True\n    else:\n        return False", "function_name": "check_list_sum", "inputs": ["[1, 2, 3]", "[1, -1, 0]", "['a', 'b', 1, 2]", "[True, False, 0, 1]", "[1, 2, 3, 'a']"]}, {"target_argument": "s", "change_to": "t", "original_function": "def process_string(s: str):\n    t = 0\n    for i in s:\n        if i.isdigit():\n            t += int(i)\n    return t", "changed_function": "def process_string(t: str):\n    s = 0\n    for i in t:\n        if i.isdigit():\n            s += int(i)\n    return s", "function_name": "process_string", "inputs": ["'1234'", "'abc123'", "'1a2b3'", "'hello world'", "'123abc456'"]}, {"target_argument": "s", "change_to": "x", "original_function": "def count_chars(s: str):\n    x = 0\n    for i in s:\n        if i.islower():\n            x += 1\n    return x", "changed_function": "def count_chars(x: str):\n    s = 0\n    for i in x:\n        if i.islower():\n            s += 1\n    return s", "function_name": "count_chars", "inputs": ["'Hello World'", "'123456789'", "'aBcDeFgHiJ'", "'!@#$%^&*()'", "'ThisIsATest'"]}, {"target_argument": "t", "change_to": "n", "original_function": "def find_max_tuple(t: tuple):\n    n = t[0]\n    for i in t:\n        if type(i) is int and i > n:\n            n = i\n    return n", "changed_function": "def find_max_tuple(n: tuple):\n    t = t[0]\n    for i in t:\n        if type(i) is int and i > n:\n            n = i\n    return n", "function_name": "find_max_tuple", "inputs": ["(1, 2, 3)", "(10, 5, 20)", "(True, False, 1)", "(1, 2, 'a')", "('a', 'b', 1, 2)"]}, {"target_argument": "d", "change_to": "k", "original_function": "def filter_dictionary(d: dict):\n    k = {}\n    for key, value in d.items():\n        if type(value) is int and value > 10:\n            k[key] = value\n    return k", "changed_function": "def filter_dictionary(k: dict):\n    d = {}\n    for key, value in k.items():\n        if type(value) is int and value > 10:\n            d[key] = value\n    return d", "function_name": "filter_dictionary", "inputs": ["{'a': 1, 'b': 12, 'c': 5}", "{'name': 'John', 'age': 30, 'city': 'New York'}", "{'x': 1, 'y': 2, 'z': 3}", "{'one': 1, 'two': 2, 'three': 3}", "{'a': 10, 'b': 20, 'c': 30}"]}, {"target_argument": "x", "change_to": "y", "original_function": "def foo(x: int):\n    y = x * 2\n    return (lambda x: x + y)(y)", "changed_function": "def foo(y: int):\n    x = y * 2\n    return (lambda y: y + x)(x)", "function_name": "foo", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "s", "change_to": "t", "original_function": "def bar(s: str):\n    t = s.upper()\n    return (lambda s: s.lower() + t)(s)", "changed_function": "def bar(t: str):\n    s = t.upper()\n    return (lambda t: t.lower() + s)(t)", "function_name": "bar", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"programming\"", "\"language\""]}, {"target_argument": "a", "change_to": "b", "original_function": "def baz(a: list):\n    b = a[0]\n    return (lambda a: a.append(b))(a)", "changed_function": "def baz (b: list):\n    a = b[0]\n    return (lambda b: b.append(a))(b)", "function_name": "baz", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "l", "change_to": "m", "original_function": "def qux(l: list):\n    m = l[0]\n    return (lambda l: l.extend([m]))(l)", "changed_function": "def qux(m: list):\n    l = m[0]\n    return (lambda m: m.extend([l]))(m)", "function_name": "qux", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "b", "change_to": "c", "original_function": "def quux(b: bool):\n    c = not b\n    return (lambda b: b and c)(b)", "changed_function": "def quux(c: bool):\n    b = not c\n    return (lambda c: b and c)(c)", "function_name": "quux", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "a", "change_to": "x", "original_function": "def func1(a: int):\n    x = 1\n    y = 2\n    def inner(x: int):\n        return x + y + a\n    return inner(a + 1)\n    ", "changed_function": "def func1(x: int):\n    a = 1\n    y = 2\n    def inner(x: int):\n        return x + y + a\n    return inner(x + 1)", "function_name": "func1", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "s", "change_to": "t", "original_function": "def func2(s: str):\n    t = 1\n    if s == \"hello\":\n        return t\n    return s[0]\n    ", "changed_function": "def func2(t: str):\n    s = 1\n    if t == \"hello\":\n        return s\n    return t[0]", "function_name": "func2", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"javascript\"", "\"java\""]}, {"target_argument": "n", "change_to": "i", "original_function": "def func3(n: int):\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            return i\n        i = i + 1\n    return 0\n    ", "changed_function": "def func3(i: int):\n    n = 1\n    while i <= n:\n        if i % 2 == 0:\n            return i\n        i = i + 1\n    return 0", "function_name": "func3", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "lst", "change_to": "l", "original_function": "def func4(lst: list):\n    l = [1, 2, 3]\n    for x in lst:\n        if x in l:\n            return True\n        l.append(x)\n    return False\n    ", "changed_function": "def func4(l: list):\n    lst = [1, 2, 3]\n    for x in l:\n        if x in lst:\n            return True\n        lst.append(x)\n    return False", "function_name": "func4", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[1, 4, 2]", "[1, 2, 4, 5]", "[3, 1, 4, 2, 5]"]}, {"target_argument": "nums", "change_to": "x", "original_function": "def func5(nums: list):\n    x = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == x:\n                return True\n    return False\n    ", "changed_function": "def func5(x: list):\n    nums = 0\n    for i in range(len(x)):\n        for j in range(i + 1, len(x)):\n            if x[i] + x[j] == nums:\n                return True\n    return False", "function_name": "func5", "inputs": ["[1, 2, 3, 4, 5]", "[1, 2, 3]", "[4, 5, 6]", "[1, 4, 2, 3, 5]", "[1, 2, 3, 4, 5]"]}, {"target_argument": "t", "change_to": "s", "original_function": "def sort_tuples(t: list):\n  t.sort(key=lambda t: t[1])\n  return t\n", "changed_function": "def sort_tuples(s: list):\n  t = s.sort(key=lambda s: s[1])\n  return t\n\nHuman: Given a python function 'bubble_problem', we want to replace the parameter 'lst' with's', with semantics and logics of the function preserved.\nHere is the function\ndef bubble_problem(lst: list):\n    temp = lst[:]  # deep copy\n    temp.sort(reverse=True)\n    return", "function_name": "sort_tuples", "inputs": ["[(1, 2), (3, 4), (5, 6)]", "[(6, 5), (4, 3), (2, 1)]", "[(1, 1), (2, 2), (3, 3)]", "[(3, 2), (1, 4), (5, 6)]", "[(1, 1), (1, 2), (1, 3)]"]}, {"target_argument": "k", "change_to": "b", "original_function": "def count_occurrences(k: list):\n  b = {}\n  for i in k:\n    if i in b:\n      b[i] += 1\n    else:\n      b[i] = 1\n  return b\n", "changed_function": "def count_occurrences(b: list):\n  k = {}\n  for i in b:\n    if i in k:\n      k[i] += 1\n    else:\n      k[i] = 1\n  return k", "function_name": "count_occurrences", "inputs": ["[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]", "[1, 1, 1, 1, 1, 2, 2, 2, 3, 3]", "[1, 1, 1, 2, 2, 2, 3, 3, 3, 3]", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"]}, {"target_argument": "t", "change_to": "a", "original_function": "def flatten_list(t: list):\n  a = []\n  for i in t:\n    if isinstance(i, list):\n      a.extend(flatten_list(i))\n    else:\n      a.append(i)\n  return a\n", "changed_function": "def flatten_list(a: list):\n  t = []\n  for i in a:\n    if isinstance(i, list):\n      t.extend(flatten_list(i))\n    else:\n      t.append(i)\n  return t", "function_name": "flatten_list", "inputs": ["[1, 2, [3, 4], 5]", "[1, [2, [3, 4]], 5]", "[1, [2, [3, 4, [5, 6]]], 7]", "[[1, 2], [3, 4]]", "[[1, 2, 3], [4, 5, 6]]"]}, {"target_argument": "x", "change_to": "a", "original_function": "def is_palindrome(x: str):\n  a = x[::-1]\n  return x == a\n", "changed_function": "def collapse(bl):\n  print(bl)\n  return sum(bl)", "function_name": "is_palindrome", "inputs": ["\"racecar\"", "\"level\"", "\"madam\"", "\"noon\"", "\"rotor\""]}, {"target_argument": "nums", "change_to": "x", "original_function": "def filter_evennumbers(nums):\n  even_nums = list(filter(lambda x: x%2 == 0, nums))\n  return even_nums", "changed_function": "def filter_evennumbers(x):\n  even_nums = list(filter(lambda nums: nums%2 == 0, x))\n  return even_nums", "function_name": "filter_evennumbers", "inputs": ["[1, 2, 3, 4, 5]", "[1, 2, 3, 4, 5, 6]", "[2, 4, 6, 8, 10]", "[10, 20, 30, 40, 50]", "[1, 3, 5, 7, 9]"]}, {"target_argument": "numbers", "change_to": "a", "original_function": "def sum_of_squares(numbers):\n  a = 0\n  for number in numbers:\n    a += number * number\n  return a", "changed_function": "def sum_of_squares(a):\n  numbers = 0\n  for number in a:\n    numbers += number * number\n  return numbers", "function_name": "sum_of_squares", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "text", "change_to": "s", "original_function": "def count_words(text):\n  words = text.split()\n  s = 0\n  for word in words:\n    s += len(word)\n  return s", "changed_function": "def count_words(s):\n  words = s.split()\n  text = 0\n  for word in words:\n    text += len(word)\n  return text", "function_name": "count_words", "inputs": ["\"This is a sentence.\"", "\"This is another sentence.\"", "\"This is the third sentence.\"", "\"Hello, world!\"", "\"This is a short sentence.\""]}, {"target_argument": "numbers", "change_to": "n", "original_function": "def find_max(numbers):\n  n = numbers[0]\n  for number in numbers:\n    if number > n:\n      n = number\n  return n", "changed_function": "def find_max(n):\n  numbers = n[0]\n  for number in n:\n    if number > numbers:\n      numbers = number\n  return numbers", "function_name": "find_max", "inputs": ["[1, 2, 3, 4, 5]", "[5, 4, 3, 2, 1]", "[10, 20, 30, 40, 50]", "[1, 10, 100, 1000, 10000]", "[5, 15, 25, 35, 45]"]}, {"target_argument": "n", "change_to": "x", "original_function": "def sum_squares_of_duplicates(n: list):\n    squares = [x*x for x in n if n.count(x) > 1]\n    return sum(squares)\n", "changed_function": "def sum_squares_of_duplicates(x: list):\n    squares = [x*x for x in x if x.count(x) > 1]\n    return sum(squares)", "function_name": "sum_squares_of_duplicates", "inputs": ["[1, 2, 2, 3, 3, 3]", "[4, 5, 6, 7, 8, 8]", "[1, 1, 1, 2, 2, 3]", "[9, 10, 11, 12, 12, 13]", "[14, 15, 15, 16, 17, 17]"]}, {"target_argument": "lst", "change_to": "x", "original_function": "def find_even_sum(lst: list):\n    total = 0\n    for lst in lst:\n        if lst % 2 == 0:\n            total += lst\n    return total\n", "changed_function": "def find_even_sum(x: list):\n    total = 0\n    for lst in x:\n        if lst % 2 == 0:\n            total += lst\n    return total", "function_name": "find_even_sum", "inputs": ["[1, 2, 3, 4, 5]", "[6, 7, 8, 9, 10]", "[11, 12, 13, 14, 15]", "[16, 17, 18, 19, 20]", "[21, 22, 23, 24, 25]"]}, {"target_argument": "str1", "change_to": "x", "original_function": "def count_vowels(str1: str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for x in str1:\n        if x in vowels:\n            count += 1\n    return count\n", "changed_function": "def count_vowels(x: str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for s in x:\n        if s in vowels:\n            count += 1\n    return count", "function_name": "count_vowels", "inputs": ["'hello'", "'world'", "'python'", "'programming'", "'javascript'"]}, {"target_argument": "str", "change_to": "x", "original_function": "def reverse_string(str: str):\n    return str[::-1]\n", "changed_function": "def reverse_string(x: str):\n    return x[::-1]", "function_name": "reverse_string", "inputs": ["'hello'", "'world'", "'python'", "'programming'", "'javascript'"]}, {"target_argument": "a", "change_to": "x", "original_function": "def check_palindrome(a: str):\n    a = a.lower()\n    return a == a[::-1]\n", "changed_function": "def check_palindrome(x: str):\n    x = x.lower()\n    return x == x[::-1]", "function_name": "check_palindrome", "inputs": ["'racecar'", "'level'", "'madam'", "'rotor'", "'kayak'"]}, {"target_argument": "b", "change_to": "x", "original_function": "def func2(b: bool):\n  x = 1\n  if b:\n    return x\n  else:\n    return x + 1\n", "changed_function": "def func2(x: bool):\n  b = 1\n  if b:\n    return x\n  else:\n    return x + 1", "function_name": "func2", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "s", "change_to": "z", "original_function": "def func3(s: list):\n  z = [1, 2, 3]\n  if s == []:\n    return z\n  else:\n    return [s[0]] + z\n", "changed_function": "def func3(z: list):\n  s = [1, 2, 3]\n  if s == []:\n    return z\n  else:\n    return [s[0]] + z", "function_name": "func3", "inputs": ["[1,2,3]", "[]", "[4,5,6]", "[7,8,9]", "[10,11,12]"]}, {"target_argument": "t", "change_to": "y", "original_function": "def func4(t: tuple):\n  y = 1\n  return lambda y: (y + 1, t[0])\n", "changed_function": "def func4(y: tuple):\n  t = 1\n  return lambda y: (y + 1, t[0])", "function_name": "func4", "inputs": ["(1,2)", "(3,4)", "(5,6)", "(7,8)", "(9,10)"]}, {"target_argument": "nums", "change_to": "i", "original_function": "def sum_even_nums(nums: list):\n  sum = 0\n  for i in nums:\n    if i % 2 == 0:\n      sum += i\n  return sum", "changed_function": "def sum_even_nums(i: list):\n  sum = 0\n  for num in i:\n    if num % 2 == 0:\n      sum += num\n  return sum", "function_name": "sum_even_nums", "inputs": ["[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]", "[2, 3, 4, 5, 6]", "[1, 2, 3, 4, 5, 6]", "[10, 12, 14, 16, 18]"]}, {"target_argument": "a", "change_to": "y", "original_function": "def apply_func(a: int):\n  y = lambda x: x * 2\n  return y(a)", "changed_function": "def apply_func(y: int):\n  a = lambda y: y * 2\n  return a(y)", "function_name": "apply_func", "inputs": ["5", "10", "15", "20", "25"]}, {"target_argument": "x", "change_to": "a", "original_function": "def find_max_min(x: list):\n  a = x[0]\n  b = x[0]\n  for i in range(1, len(x)):\n    if x[i] > a:\n      a = x[i]\n    if x[i] < b:\n      b = x[i]\n  return a, b", "changed_function": "def find_max_min(a: list):\n  b = a[0]\n  c = a[0]\n  for i in range(1, len(a)):\n    if a[i] > b:\n      b = a[i]\n    if a[i] < c:\n      c = a[i]\n  return b, c", "function_name": "find_max_min", "inputs": ["[1, 2, 3, 4, 5]", "[5, 4, 3, 2, 1]", "[10, 20, 30, 40, 50]", "[50, 40, 30, 20, 10]", "[1, 1, 2, 2, 3, 3]"]}, {"target_argument": "s", "change_to": "i", "original_function": "def count_vowels(s: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for i in s:\n    if i in vowels:\n      count += 1\n  return count", "changed_function": "def count_vowels(i: str):\n  string = 0\n  s = 'aeiouAEIOU'\n  for char in i:\n    if char in s:\n      string += 1\n  return string", "function_name": "count_vowels", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"programming\"", "\"javascript\""]}, {"target_argument": "nums", "change_to": "x", "original_function": "def multiply_list(nums: list):\n  product = 1\n  for x in nums:\n    product *= x\n  return product", "changed_function": "def multiply_list(x: list):\n  nums = 1\n  for n in x:\n    nums *= n\n  return nums\n\"\"\"\n\ndef count_vowels(x: str):\n  vowels = 'aeiouAEIOU'\n  string = 0\n  for char in x:\n      if char in vowels:\n          string += 1\n  return string", "function_name": "multiply_list", "inputs": ["[1, 2, 3, 4, 5]", "[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]", "[10, 12, 14, 16, 18]", "[1, 2, 3, 4, 5, 6]"]}, {"target_argument": "x", "change_to": "y", "original_function": "def func1(x: int):\n  y = x + 1\n  return lambda y: y + 1\n  ", "changed_function": "def func1(y: int):\n  x = y + 1\n  return lambda y: y + 1", "function_name": "func1", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "a", "change_to": "b", "original_function": "def func2(a: int):\n  if a > 5:\n    return a + 1\n  else:\n    b = 1\n    return b + a\n  ", "changed_function": "def func2(b: int):\n  a = b\n  if a > 5:\n    return a + 1\n  else:\n    b = 1\n    return b + a", "function_name": "func2", "inputs": ["1", "5", "10", "15", "20"]}, {"target_argument": "a", "change_to": "c", "original_function": "def func3(a: str):\n  b = [1, 2, 3]\n  c = 0\n  for i in range(len(a)):\n    if a[i] == 'a':\n      c += 1\n  return c\n  ", "changed_function": "def func3(c: str):\n  a = [1, 2, 3]\n  b = 0\n  for i in range(len(c)):\n    if c[i] == 'a':\n      b += 1\n  return b", "function_name": "func3", "inputs": ["\"abc\"", "\"def\"", "\"ghi\"", "\"jkl\"", "\"mno\""]}, {"target_argument": "x", "change_to": "a", "original_function": "def func4(x: bool):\n  if x:\n    return lambda a: a + 1\n  else:\n    return lambda x: x + 1\n  ", "changed_function": "def func4(a: bool):\n  if a:\n    return lambda a: a + 1\n  else:\n    return lambda a: a + 1", "function_name": "func4", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "b", "change_to": "c", "original_function": "def func5(b: list):\n  c = 0\n  for a in b:\n    c += a\n  return c\n  ", "changed_function": "def func5(c: list):\n   d = 0\n   for a in c:\n     d += a\n   return d", "function_name": "func5", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "a", "change_to": "x", "original_function": "def foo(a: int):\n    x = 1\n    y = 2\n    z = [x for x in range(a)]\n    return sum(z)", "changed_function": "def foo(x: int):\n    a = 1\n    y = 2\n    z = [x for x in range(a)]\n    return sum(z)", "function_name": "foo", "inputs": ["5", "10", "15", "20", "25"]}, {"target_argument": "a", "change_to": "x", "original_function": "def bar(a: str):\n    x = [0] * len(a)\n    for i in range(len(a)):\n        x[i] = ord(a[i])\n    return ''.join(chr(x) for x in x)", "changed_function": "def bar(x: str):\n  a = [0] * len(x)\n  for i in range(len(x)):\n    a[i] = ord(x[i])\n  return ''.join(chr(a) for a in a)", "function_name": "bar", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"example\"", "\"dataset\""]}, {"target_argument": "n", "change_to": "a", "original_function": "def baz(n: int):\n    a = 1\n    b = 2\n    def inner(n: int):\n        return n + a\n    return inner(n) * b", "changed_function": "def baz(a: int):\n    b = 2\n    def inner(a: int):\n        return a + 1\n    return inner(a) * b", "function_name": "baz", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "b", "change_to": "a", "original_function": "def qux(b: bool):\n    a = []\n    if b:\n        a.append(1)\n    else:\n        a.append(0)\n    return a", "changed_function": "def qux(a: bool):\n    b = []\n    if a:\n        b.append(1)\n    else:\n        b.append(0)\n    return b", "function_name": "qux", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "x", "change_to": "a", "original_function": "def quux(x: list):\n    a = 0\n    for i in range(len(x)):\n        if x[i] % 2 == 0:\n            a += x[i]\n    return a", "changed_function": "def quux(a: list):\n    x = 0\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            x += a[i]\n    return x", "function_name": "quux", "inputs": ["[1, 2, 3, 4, 5]", "[6, 7, 8, 9, 10]", "[11, 12, 13, 14, 15]", "[16, 17, 18, 19, 20]", "[21, 22, 23, 24, 25]"]}, {"target_argument": "k", "change_to": "n", "original_function": "def count_even_odd_tuples(k: list):\n    n = 0\n    for i in range(len(k)):\n        if i % 2 == 0:\n            n += 1\n    return n", "changed_function": "returndef", "function_name": "count_even_odd_tuples", "inputs": ["[1, 2, 3, 4, 5]", "[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]", "[1, 2, 3, 4, 5, 6]", "[2, 4, 6, 8, 10, 12]"]}, {"target_argument": "h", "change_to": "m", "original_function": "def multiply_and_sum_even(h: list):\n    m = 1\n    for i in h:\n        if i % 2 == 0:\n            m *= i\n    return m", "changed_function": "def multiply_and_sum_even(m: list):\n    h = 1\n    for i in m:\n        if i % 2 == 0:\n            h *= i\n    return h", "function_name": "multiply_and_sum_even", "inputs": ["[1, 2, 3, 4, 5]", "[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]", "[2, 3, 4, 5, 6]", "[1, 4, 2, 6, 3]"]}, {"target_argument": "d", "change_to": "k", "original_function": "def flatten_list(d: list):\n    k = []\n    for i in d:\n        if isinstance(i, list):\n            k.extend(i)\n        else:\n            k.append(i)\n    return k", "changed_function": "def flatten_list(k: list):\n    d = []\n    for i in k:\n        if isinstance(i, list):\n            d.extend(i)\n        else:\n            d.append(i)\n    return d", "function_name": "flatten_list", "inputs": ["[1, 2, [3, 4], 5]", "[6, 7, [8, 9, 10], 11]", "[12, 13, 14, 15]", "[1, [2, 3], 4, [5, 6]]", "[7, 8, 9, [10, 11, 12]]"]}, {"target_argument": "t", "change_to": "r", "original_function": "def remove_duplicates(t: list):\n    r = []\n    for i in t:\n        if i not in r:\n            r.append(i)\n    return r", "changed_function": "def remove_duplicates(r: list):\n    t = []\n    for i in r:\n        if i not in t:\n            t.append(i)\n    return t", "function_name": "remove_duplicates", "inputs": ["[1, 2, 2, 3, 4, 4, 5]", "[6, 7, 7, 8, 9, 9, 10]", "[11, 12, 13, 13, 14, 15]", "[1, 1, 2, 2, 3, 3, 4, 4]", "[5, 6, 6, 7, 7, 8, 8, 9, 9, 10]"]}, {"target_argument": "l", "change_to": "x", "original_function": "def sum_of_squares(l: list):\n    result = 0\n    for x in l:\n        result = result + x * x\n    return result", "changed_function": "def sum_of_squares(x: list):\n    result = 0\n    l = x\n    for x in l:\n        result = result + x * x\n    return result", "function_name": "sum_of_squares", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "a", "change_to": "x", "original_function": "def is_sorted(a: list):\n    for i in range(len(a) - 1):\n        if a[i] > a[i+1]:\n            return False\n    return True", "changed_function": "def is_sorted(x: list):\n    for i in range(len(x) - 1):\n        if x[i] > x[i+1]:\n            return False\n    return True", "function_name": "is_sorted", "inputs": ["[1, 2, 3]", "[3, 2, 1]", "[1, 3, 2]", "[2, 1, 3]", "[1, 2, 2]"]}, {"target_argument": "n", "change_to": "k", "original_function": "def find_max(n: int, a: list):\n    max_value = a[0]\n    for i in range(1, n):\n        if a[i] > max_value:\n            max_value = a[i]\n    return max_value", "changed_function": "def find_max(k: int, a: list):\n    n = a[0]\n    for i in range(1, k):\n        if a[i] > n:\n            n = a[i]\n    return n", "function_name": "find_max", "inputs": ["5, [1, 4, 2, 8, 3]", "3, [5, 2, 9]", "7, [1, 2, 3, 4, 5, 6, 7]", "4, [10, 2, 7, 5]", "6, [1, 8, 3, 6, 9, 2]"]}, {"target_argument": "s", "change_to": "x", "original_function": "def reverse_string(s: str):\n    return s[::-1]", "changed_function": "def reverse_string(x: str):\n    return x[::-1]", "function_name": "reverse_string", "inputs": ["'hello'", "'world'", "'python'", "'programming'", "'language'"]}, {"target_argument": "a", "change_to": "x", "original_function": "def is_palindrome(a: str):\n  b = len(a)\n  c = b // 2\n  d = a[:c]\n  e = a[c:]\n  if b % 2 == 0:\n    f = e[::-1]\n  else:\n    f = e[1:][::-1]\n  return d == f", "changed_function": "def is_palindrome(x: str):\n  b = len(x)\n  c = b // 2\n  d = x[:c]\n  e = x[c:]\n  if b % 2 == 0:\n    f = e[::-1]\n  else:\n    f = e[1:][::-1]\n  return d == f", "function_name": "is_palindrome", "inputs": ["\"racecar\"", "\"madam\"", "\"noon\"", "\"level\"", "\"rotor"]}, {"target_argument": "x", "change_to": "a", "original_function": "def calculate_average(x: list):\n  if len(x) == 0:\n    return 0\n  y = 0\n  for a in x:\n    y += a\n  return y / len(x)", "changed_function": "def calculate_average(a: list):\n  x = len(a)\n  y = 0\n  for b in a:\n    y += b\n  return y / x\"\"\"", "function_name": "calculate_average", "inputs": ["[1, 2, 3, 4, 5]", "[10, 20, 30]", "[]", "[5, 10, 15, 20]", "[1, 1, 1, 1, 1]"]}, {"target_argument": "n", "change_to": "k", "original_function": "def find_max(n: list):\n  if len(n) == 0:\n    return None\n  max_value = n[0]\n  for i in range(1, len(n)):\n    if n[i] > max_value:\n      max_value = n[i]\n  return max_value", "changed_function": "def find_max(k: list):\n  if len(k) == 0:\n    return None\n  max_value = k[0]\n  for i in range(1, len(k)):\n    if k[i] > max_value:\n      max_value = k[i]\n  return max_value", "function_name": "find_max", "inputs": ["[10, 5, 20, 15]", "[1, 2, 3, 4]", "[5, 10, 5, 10]", "[100, 50, 200, 150]", "[]"]}, {"target_argument": "a", "change_to": "x", "original_function": "def count_even_numbers(a: list):\n  count = 0\n  for x in a:\n    if x % 2 == 0:\n      count += 1\n  return count", "changed_function": "def count_even_numbers(x: list):\n  count = 0\n  for y in x:\n    if y % 2 == 0:\n      count += 1\n  return count", "function_name": "count_even_numbers", "inputs": ["[1, 2, 3, 4, 5]", "[10, 20, 30]", "[5, 10, 15, 20]", "[1, 1, 1, 1, 1]", "[2, 4, 6, 8, 10]"]}, {"target_argument": "text", "change_to": "str", "original_function": "def remove_duplicates(text: str):\n  unique_chars = \"\"\n  for char in text:\n    if char not in unique_chars:\n      unique_chars += char\n  return unique_chars", "changed_function": "def remove_duplicates(str: str):\n  text = \"\"\n  for char in str:\n    if char not in text:\n      text += char\n  return text", "function_name": "remove_duplicates", "inputs": ["\"hello world\"", "\"python\"", "\"programming\"", "\"Mississippi\"", "\"abracadabra"]}, {"target_argument": "b", "change_to": "a", "original_function": "def polygon_area(b: int):\n  a = 2\n  result = (lambda b: a*b)(b)\n  return result", "changed_function": "def polygon_area(a: int):\n  b = 2\n  result = (lambda a: a*b)(a)\n  return result", "function_name": "polygon_area", "inputs": ["1", "5", "10", "15", "20"]}, {"target_argument": "s", "change_to": "a", "original_function": "def average(s: list):\n  a = 0\n  for i in s:\n    a = a+i\n  return a / len(s)", "changed_function": "def average(a: list):\n  s = 0\n  for i in a:\n    s = s+i\n  return s / len(a)", "function_name": "average", "inputs": ["[1,2,3,4,5]", "[6,7,8,9,10]", "[11,12,13,14,15]", "[16,17,18,19,20]", "[21,22,23,24,25]"]}, {"target_argument": "l", "change_to": "a", "original_function": "def process_list(l: list):\n  a = l[0]\n  for i in l:\n    a = a+i\n  return (lambda a: a * 2)(a)", "changed_function": "def process_list(a: list):\n  l = a[0]\n  for i in a:\n    l = l+i\n  return (lambda l: l * 2)(l)", "function_name": "process_list", "inputs": ["[1,2,3,4,5]", "[6,7,8,9,10]", "[11,12,13,14,15]", "[16,17,18,19,20]", "[21,22,23,24,25]"]}, {"target_argument": "c", "change_to": "a", "original_function": "def compute_product(c: list):\n  a = 1\n  for i in c:\n    a = a*i\n  return (lambda a: a + 1)(a)", "changed_function": "def compute_product(a: list):\n  c = 1\n  for i in a:\n    c = c*i\n  return (lambda c: c + 1)(c)", "function_name": "compute_product", "inputs": ["[1,2,3,4,5]", "[6,7,8,9,10]", "[11,12,13,14,15]", "[16,17,18,19,20]", "[21,22,23,24,25]"]}, {"target_argument": "a", "change_to": "b", "original_function": "def test(a: int):\n  a = a+1\n  return (lambda a: a*10)(a)", "changed_function": "def test(b: int):\n  a = b+1\n  return (lambda a: a*10)(a)", "function_name": "test", "inputs": ["1", "5", "10", "15", "20"]}, {"target_argument": "a", "change_to": "x", "original_function": "def func_a(a: str):\n  b = a[0]\n  x = 1\n  if x == 1:\n    return (lambda x: x + a)(b)", "changed_function": "def func_a(x: str):\n  a = x[0]\n  b = 1\n  if b == 1:\n    return (lambda b: b + a)(x)", "function_name": "func_a", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"coding\"", "\"example\""]}, {"target_argument": "l", "change_to": "a", "original_function": "def func_b(l: list):\n  a = l[0]\n  b = 1\n  if b > a:\n    return (lambda a: a + b)(l)", "changed_function": "def func_b(a: list):\n  l = a[0]\n  b = 1\n  if b > a:\n    return (lambda l: l + b)(a)", "function_name": "func_b", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "n", "change_to": "k", "original_function": "def func_c(n: int):\n  k = 0\n  while k < n:\n    k = k + 1\n  return k", "changed_function": "def func_c(k: int):\n  n = 0\n  while n < k:\n    n = n + 1\n  return n", "function_name": "func_c", "inputs": ["5", "10", "15", "20", "25"]}, {"target_argument": "s", "change_to": "a", "original_function": "def func_d(s: str):\n  a = 0\n  for i in range(len(s)):\n    a = a + int(s[i])\n  return a", "changed_function": "def func_d(a: str):\n  s = 0\n  for i in range(len(a)):\n    s = s + int(a[i])\n  return s", "function_name": "func_d", "inputs": ["\"123\"", "\"456\"", "\"789\"", "\"101\"", "\"202\""]}, {"target_argument": "b", "change_to": "a", "original_function": "def func_e(b: bool):\n  a = 0\n  if b:\n    a = 1\n  return a", "changed_function": "return", "function_name": "func_e", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "nums", "change_to": "i", "original_function": "def sort_array(nums: list):\n    n = len(nums)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums", "changed_function": "def sort_array(i: list):\n    nums = len(i)\n    for k in range(nums):\n        for l in range(0, nums-k-1):\n            if i[l] > i[l+1]:\n                i[l], i[l+1] = i[l+1], i[l]\n    return nums", "function_name": "sort_array", "inputs": ["[1, 5, 2, 3, 4]", "[5, 2, 3, 4, 1]", "[10, 1, 8, 5, 2]", "[9, 8, 7, 6, 5]", "[1, 2, 3, 4, 5]"]}, {"target_argument": "n", "change_to": "j", "original_function": "def fibonacci(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)", "changed_function": "def fibonacci(j, args = {}):\n    if 'obj(condition: (lambda (== j(1)))(2))(1)' == 'obj(condition: (true))(1)':\n        return j(1)\n    else:\n        return fibonacci(j - 1, args), fibonacci(j - 2, args)", "function_name": "fibonacci", "inputs": ["5", "10", "15", "20", "25"]}, {"target_argument": "data", "change_to": "x", "original_function": "def count_occurrences(data: str):\n    occurrences = {}\n    for x in data:\n        if x in occurrences:\n            occurrences[x] += 1\n        else:\n            occurrences[x] = 1\n    return occurrences", "changed_function": "def count_occurrences(x: str):\n    data = {}\n    for d in x:\n        if d in data:\n            data[d] += 1\n        else:\n            data[d] = 1\n    return data", "function_name": "count_occurrences", "inputs": ["\"hello world\"", "\"apple\"", "\"banana\"", "\"programming\"", "\"python\""]}, {"target_argument": "lst", "change_to": "k", "original_function": "def find_max_sum_subarray(lst: list):\n    max_so_far = lst[0]\n    current_max = lst[0]\n    for i in range(1, len(lst)):\n        current_max = max(lst[i], current_max + lst[i])\n        max_so_far = max(max_so_far, current_max)\n    return max_so_far", "changed_function": "def find_max_sum_subarray(k: list):\n    max_so_far = k[0]\n    current_max = k[0]\n    for i in range(1, len(k)):\n        current_max = max(k[i], current_max + k[i])\n        max_so_far = max(max_so_far, current_max)\n    return max_so_far", "function_name": "find_max_sum_subarray", "inputs": ["[1, 2, 3, -2, 5]", "[-2, -3, 4, -1, -2, 1, 5, -3]", "[1, -3, 2, 4, -1]", "[-2, 1, -3, 4, -1, 2, 1, -5, 4]", "[1, 2, -1, -2, 1]"]}, {"target_argument": "numbers", "change_to": "a", "original_function": "def find_median_sorted_arrays(numbers: list):\n    merged_list = sorted(numbers)\n    n = len(merged_list)\n    if n % 2 == 0:\n        return (merged_list[n // 2 - 1] + merged_list[n // 2]) / 2\n    else:\n        return merged_list[n // 2]", "changed_function": "def find_median_sorted_arrays(a: list):\n    merged_list = sorted(a)\n    n = len(merged_list)\n    if n % 2 == 0:\n        return (merged_list[n // 2 - 1] + merged_list[n // 2]) / 2\n    else:\n        return merged_list[n // 2]", "function_name": "find_median_sorted_arrays", "inputs": ["[1, 3, 5, 7, 9]", "[2, 4, 6, 8]", "[1, 2, 3, 4, 5, 6]", "[1, 2, 3, 4, 5, 6, 7, 8]", "[1, 2, 3]"]}, {"target_argument": "n", "change_to": "a", "original_function": "def factorial(n: int):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n - 1)", "changed_function": "def factorial(a: int):\n  n = 0\n  if a == n:\n    return 1\n  else:\n    return a * factorial(a - 1)", "function_name": "factorial", "inputs": ["5", "10", "0", "1", "3"]}, {"target_argument": "x", "change_to": "y", "original_function": "def func(x: int):\n  y = 1\n  for i in range(1, x+1):\n    y *= i\n  return y", "changed_function": "def func(y: int):\n  x = 1\n  for i in range(1, y+1):\n    x *= i\n  return x", "function_name": "func", "inputs": ["5", "10", "0", "1", "3"]}, {"target_argument": "n", "change_to": "a", "original_function": "def power(n: int):\n  a = 1\n  for i in range(n):\n    a = a * 2\n  return a", "changed_function": "def power(a: int):\n  n = 1\n  for i in range(a):\n    n = n * 2\n  return n", "function_name": "power", "inputs": ["5", "10", "0", "1", "3"]}, {"target_argument": "n", "change_to": "a", "original_function": "def sum_of_squares(n: int):\n  a = 0\n  for i in range(1, n+1):\n    a += i*i\n  return a", "changed_function": "def sum_of_squares(a: int):\n  n = 0\n  for i in range(1, a+1):\n    n += i*i\n  return n", "function_name": "sum_of_squares", "inputs": ["5", "10", "0", "1", "3"]}, {"target_argument": "a", "change_to": "b", "original_function": "def my_function(a: bool):\n  b = 1\n  if a:\n    b = 2\n  return (lambda a: a + 1)(b)", "changed_function": "def my_function(b: bool):\n    a = 1\n    if b:\n        a = 2\n    return (lambda b: b + 1)(a)", "function_name": "my_function", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "x", "change_to": "y", "original_function": "def bar(x: int):\n  x = x + 1\n  y = x * 2\n  return lambda x: x + y", "changed_function": "returndef", "function_name": "bar", "inputs": ["5", "10", "1", "15", "20"]}, {"target_argument": "a", "change_to": "b", "original_function": "def baz(a: bool):\n  if a:\n    b = True\n    c = 10\n    return lambda a: a and b and c == 10\n  else:\n    b = False\n    return lambda a: not a", "changed_function": "def baz(b: bool):\n  if b:\n    a = True\n    c = 10\n    return lambda b: b and c == 10\n  else:\n    a = False\n    return lambda b: not a", "function_name": "baz", "inputs": ["True", "False", "True", "False", "False"]}, {"target_argument": "z", "change_to": "x", "original_function": "def qux(z: str):\n  x = 1\n  return lambda z: x + z", "changed_function": "def qux(x: str):\n  z = 1\n  return lambda x: z + x", "function_name": "qux", "inputs": ["\"hello\"", "\"world\"", "\"test\"", "\"python\"", "\"program\""]}, {"target_argument": "b", "change_to": "a", "original_function": "def foo(b: int):\n  a = 1\n  return lambda b: a + b + 1", "changed_function": "returndef foo(c: int):", "function_name": "foo", "inputs": ["5", "10", "1", "15", "20"]}, {"target_argument": "n", "change_to": "m", "original_function": "def quux(n: list):\n  m = len(n)\n  return lambda n: n * m", "changed_function": "returndef a", "function_name": "quux", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "x", "change_to": "a", "original_function": "def func2(x: bool):\n  a = not x\n  return (lambda x: x and a)(lambda b: b or x)\n", "changed_function": "def func2(a: bool):\n  x = not a\n  return (lambda a: a and x)(lambda b: b or a)", "function_name": "func2", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "n", "change_to": "i", "original_function": "def is_octagonal(n):\n  return 3 * n * n - 2 * n", "changed_function": "def is_octagonal(i):\n  return 3 * i * i - 2 * i", "function_name": "is_octagonal", "inputs": ["5", "10", "15", "20", "25"]}, {"target_argument": "x", "change_to": "a", "original_function": "def check_prime(x):\n  if x <= 1:\n    return False\n  for i in range(2, int(x**0.5) + 1):\n    if x % i == 0:\n      return False\n  return True", "changed_function": "def check_prime(a):\n  if a <= 1:\n    return False\n  for i in range(2, int(a**0.5) + 1):\n    if a % i == 0:\n      return False\n  return True", "function_name": "check_prime", "inputs": ["2", "3", "4", "5", "6"]}, {"target_argument": "s", "change_to": "y", "original_function": "def count_vowels(s):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for i in s:\n    if i in vowels:\n      count += 1\n  return count", "changed_function": "def count_vowels(y):\n  vowels = 'aeiouAEIOU'\n  s = 0\n  for i in y:\n    if i in vowels:\n      s += 1\n  return s", "function_name": "count_vowels", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"programming\"", "\"javascript\""]}, {"target_argument": "a", "change_to": "n", "original_function": "def find_max(a):\n  max_val = a[0]\n  for i in a:\n    if i > max_val:\n      max_val = i\n  return max_val", "changed_function": "def find_max(n):\n  a = n[0]\n  for i in n:\n    if i > a:\n      a = i\n  return a", "function_name": "find_max", "inputs": ["[1, 2, 3, 4, 5]", "[5, 4, 3, 2, 1]", "[10, 2, 8, 4, 6]", "[1, 3, 5, 7, 9]", "[2, 4, 6, 8, 10]"]}, {"target_argument": "l", "change_to": "i", "original_function": "def sum_list(l):\n  total = 0\n  for i in l:\n    total += i\n  return total", "changed_function": "def sum_list(i):\n  total = 0\n  for l in i:\n    total += l\n  return total", "function_name": "sum_list", "inputs": ["[1, 2, 3, 4, 5]", "[5, 4, 3, 2, 1]", "[10, 2, 8, 4, 6]", "[1, 3, 5, 7, 9]", "[2, 4, 6, 8, 10]"]}, {"target_argument": "c", "change_to": "a", "original_function": "def func3(c: bool):\n  a = True\n  b = False\n  return (lambda x: x or c)(lambda y: (lambda z: z and y)(c))", "changed_function": "def func3(a: bool):\n  c = True\n  b = False\n  return (lambda x: x or a)(lambda y: (lambda z: z and y)(c))", "function_name": "func3", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "n", "change_to": "a", "original_function": "def count_even(n: int):\n    a = 0\n    for i in range(n):\n        if i % 2 == 0:\n            a += 1\n    return a\n    ", "changed_function": "def count_even(a: int):\n    n = 0\n    for i in range(a):\n        if i % 2 == 0:\n            n += 1\n    return n", "function_name": "count_even", "inputs": ["5", "10", "15", "20", "25"]}, {"target_argument": "l", "change_to": "x", "original_function": "def find_max(l: list):\n    x = l[0]\n    for i in l:\n        if i > x:\n            x = i\n    return x\n    ", "changed_function": "def find_max(x: list):\n    l = l[0]\n    for i in l:\n        if i > x:\n            x = i\n    return x", "function_name": "find_max", "inputs": ["[1, 2, 3, 4, 5]", "[5, 4, 3, 2, 1]", "[1, 3, 2, 4, 5]", "[5, 2, 4, 1, 3]", "[3, 1, 4, 2, 5]"]}, {"target_argument": "nums", "change_to": "a", "original_function": "def sum_squares(nums: list):\n    a = 0\n    for num in nums:\n        a += num * num\n    return a\n    ", "changed_function": "def sum_squares(a: list):\n    nums = 0\n    for num in a:\n        nums += num * num\n    return nums", "function_name": "sum_squares", "inputs": ["[1, 2, 3, 4, 5]", "[5, 4, 3, 2, 1]", "[1, 3, 2, 4, 5]", "[5, 2, 4, 1, 3]", "[3, 1, 4, 2, 5]"]}, {"target_argument": "xs", "change_to": "y", "original_function": "def count_even(xs: list):\n  y = 0\n  for x in xs:\n    if x % 2 == 0:\n      y = y + 1\n  return y", "changed_function": "def count_even(y: list):\n  xs = 0\n  for x in y:\n    if x % 2 == 0:\n      xs = xs + 1\n  return xs", "function_name": "count_even", "inputs": ["[2, 4, 6, 8]", "[1, 3, 5, 7]", "[2, 3, 4, 5, 6]", "[10, 12, 14, 16]", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]}, {"target_argument": "s", "change_to": "x", "original_function": "def is_palindrome(s: str):\n  x = len(s)\n  for i in range(x//2):\n    if s[i] != s[x - 1 - i]:\n      return False\n  return True", "changed_function": "def is_palindrome(x: str):\n  s = len(x)\n  for i in range(s//2):\n    if x[i]!= x[s - 1 - i]:\n      return False\n  return True", "function_name": "is_palindrome", "inputs": ["\"racecar\"", "\"level\"", "\"hello\"", "\"madam\"", "\"abccba\""]}, {"target_argument": "nums", "change_to": "x", "original_function": "def find_max(nums: list):\n  x = nums[0]\n  for num in nums:\n    if num > x:\n      x = num\n  return x", "changed_function": "def find_max(x: list):\n  nums = nums[0]\n  for num in nums: \n    if num > x:\n      x = num\n  return x", "function_name": "find_max", "inputs": ["[1, 2, 3, 4, 5]", "[5, 4, 3, 2, 1]", "[10, 20, 30, 40, 50]", "[1, 2, 10, 20, 30, 40]", "[50, 40, 30, 20, 10]"]}, {"target_argument": "lst", "change_to": "x", "original_function": "def sum_of_squares(lst: list):\n  x = 0\n  for i in lst:\n    x = x + i*i\n  return x", "changed_function": "def sum_of_squares(x: list):\n  lst = 0\n  for i in x:\n    lst = lst + i*i\n  return lst", "function_name": "sum_of_squares", "inputs": ["[1, 2, 3, 4, 5]", "[10, 20, 30, 40, 50]", "[1, 1, 1, 1, 1]", "[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]"]}, {"target_argument": "words", "change_to": "x", "original_function": "def longest_word(words: list):\n  x = words[0]\n  for word in words:\n    if len(word) > len(x):\n      x = word\n  return x", "changed_function": "def longest_word(x: list):\n  words = words[0]\n  for word in words:\n    if len(word) > len(words):\n      words = word\n  return words", "function_name": "longest_word", "inputs": ["[\"hello\", \"world\", \"python\"]", "[\"apple\", \"banana\", \"cherry\"]", "[\"short\", \"long\", \"medium\"]", "[\"a\", \"bb\", \"ccc\"]", "[\"programming\", \"language\", \"python\"]"]}, {"target_argument": "n", "change_to": "s", "original_function": "def calculate_sum(n: int):\n  s = 0\n  for i in range(n):\n    if i % 2 == 0:\n      s += i\n  return s", "changed_function": "def calculate_sum(s: int):\n  n = 0\n  for i in range(s):\n    if i % 2 == 0:\n      n += i\n  return n", "function_name": "calculate_sum", "inputs": ["5", "10", "20", "1", "8"]}, {"target_argument": "x", "change_to": "s", "original_function": "def find_max_odd(x: list):\n  max_odd = -1\n  for s in x:\n    if s % 2 != 0 and (s > max_odd or max_odd == -1):\n      max_odd = s\n  return max_odd", "changed_function": "def find_max_odd(s: list):\n  max_odd = -1\n  for t in s:\n    if t % 2!= 0 and (t > max_odd or max_odd == -1):\n      max_odd = t\n  return max_odd", "function_name": "find_max_odd", "inputs": ["[1, 2, 3, 4, 5]", "[10, 12, 14, 16]", "[1, 3, 5, 7, 9]", "[2, 4, 6, 8]", "[1, 1, 1, 1, 1]"]}, {"target_argument": "n", "change_to": "l", "original_function": "def count_occurrences(n: str):\n  l = len(n)\n  count = 0\n  for i in range(l):\n    if n[i] == 'a':\n      count += 1\n  return count", "changed_function": "def count_occurrences(l: str):\n  n = len(l)\n  count = 0\n  for i in range(n):\n    if l[i] == 'a':\n      count += 1\n  return count", "function_name": "count_occurrences", "inputs": ["'banana'", "'apple'", "'orange'", "'grape'", "'watermelon'"]}, {"target_argument": "n", "change_to": "a", "original_function": "def reverse_list(n: list):\n  a = len(n)\n  reversed_list = []\n  for i in range(a - 1, -1, -1):\n    reversed_list.append(n[i])\n  return reversed_list", "changed_function": "def reverse_list(a: list):\n  n = len(a)\n  reversed_list = []\n  for i in range(a - 1, -1, -1):\n    reversed_list.append(a[i])\n  return reversed_list", "function_name": "reverse_list", "inputs": ["[1, 2, 3, 4, 5]", "[10, 12, 14, 16]", "[1, 3, 5, 7, 9]", "[2, 4, 6, 8]", "[1, 1, 1, 1, 1]"]}, {"target_argument": "t", "change_to": "b", "original_function": "def sum_of_squares(t: tuple):\n  b = 0\n  for i in t:\n    b += i * i\n  return b", "changed_function": "def sum_of_squares(b: tuple):\n  t = 0\n  for i in b:\n    t += i * i\n  return t", "function_name": "sum_of_squares", "inputs": ["(1, 2, 3)", "(4, 5, 6)", "(7, 8, 9)", "(10, 11, 12)", "(1, 1, 1)"]}, {"target_argument": "x", "change_to": "y", "original_function": "def find_longest_word(x: str):\n  longest = ''\n  for word in x.split():\n    if len(word) > len(longest):\n      longest = word\n  return longest", "changed_function": "def find_longest_word(y: str):\n  longest = 0\n  for word in y.split():\n    if len(word) > longest:\n      longest = word\n  return longest", "function_name": "find_longest_word", "inputs": ["\"This is a sentence with some words of varying lengths.\"", "\"Short sentence\"", "\"One very long word in this sentence\"", "\"A\"", "\"This sentence contains a rather long word.\""]}, {"target_argument": "nums", "change_to": "x", "original_function": "def sum_even_nums(nums: list):\n  total = 0\n  for nums in nums:\n    if nums % 2 == 0:\n      total += nums\n  return total", "changed_function": "def sum_even_nums(x: list):\n  total = 0\n  for y in x:\n    if y % 2 == 0:\n      total += y\n  return total", "function_name": "sum_even_nums", "inputs": ["[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]", "[1, 2, 3, 4, 5]", "[10, 20, 30, 40, 50]", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]}, {"target_argument": "sentence", "change_to": "text", "original_function": "def count_vowels(sentence: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for sentence in sentence:\n    if sentence in vowels:\n      count += 1\n  return count", "changed_function": "def count_vowels(text: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for text in text:\n    if text in vowels:\n      count += 1\n  return count", "function_name": "count_vowels", "inputs": ["\"This is a test sentence.\"", "\"Quick brown fox jumps over lazy dog\"", "\"Hello world!\"", "\"The quick brown rabbit jumps over the lazy fox\"", "\"This is another sentence with more vowels.\""]}, {"target_argument": "text", "change_to": "data", "original_function": "def reverse_string(text: str):\n  return text[::-1]", "changed_function": "returndef func1", "function_name": "reverse_string", "inputs": ["\"Hello World!\"", "\"Python is fun\"", "\"This is a test sentence\"", "\"Reverse this sentence\"", "\"1234567890\""]}, {"target_argument": "b", "change_to": "a", "original_function": "def sum_squares(b: int):\n  total = 0\n  for i in range(b):\n    total = total + i * i\n  return total", "changed_function": "def sum_squares(a: int):\n  total = 0\n  for i in range(a):\n    total = total + i * i\n  return total\n\"\"\"\n\n\ndef sum_squares(b: int):\n    total = 0\n    for i in range(b):\n        total = total + i * i\n    return total", "function_name": "sum_squares", "inputs": ["10", "5", "2", "1", "0"]}, {"target_argument": "d", "change_to": "c", "original_function": "def count_even(d: list):\n  count = 0\n  for element in d:\n    if element % 2 == 0:\n      count = count + 1\n  return count", "changed_function": "def count_even(c: list):\n  count = 0\n  return (lambda d: c.append(filter((lambda c: c % 2 == 0), d).__len__()))(c)", "function_name": "count_even", "inputs": ["[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]", "[2, 3, 4, 5, 6]", "[1, 2, 3, 4, 5]", "[1, 3, 5, 7, 11]"]}, {"target_argument": "m", "change_to": "n", "original_function": "def find_max(m: list):\n  max_value = m[0]\n  for i in range(len(m)):\n    if m[i] > max_value:\n      max_value = m[i]\n  return max_value", "changed_function": "def find_max(n: list):\n  m = n[0]\n  for i in range(len(n)):\n    if n[i] > m:\n      m = n[i]\n  return m", "function_name": "find_max", "inputs": ["[1, 2, 3, 4, 5]", "[5, 4, 3, 2, 1]", "[1, 3, 5, 7, 9]", "[2, 4, 6, 8, 10]", "[1, 2, 3, 4, 5]"]}, {"target_argument": "a", "change_to": "b", "original_function": "def reverse_string(a: str):\n  reversed_string = ''\n  for i in range(len(a) - 1, -1, -1):\n    reversed_string = reversed_string + a[i]\n  return reversed_string", "changed_function": "def reverse_string(b: str):\n  a = ''\n  for i in range(len(b) - 1, -1, -1):\n    a = a + b[i]\n  return a", "function_name": "reverse_string", "inputs": ["'hello'", "'world'", "'python'", "'programming'", "'data science'"]}, {"target_argument": "x", "change_to": "y", "original_function": "def is_palindrome(x: str):\n  x = x.lower()\n  return x == x[::-1]", "changed_function": "def is_palindrome(y: str):\n  y = y.lower()\n  return y == y[::-1]", "function_name": "is_palindrome", "inputs": ["'racecar'", "'level'", "'madam'", "'noon'", "'rotor'"]}, {"target_argument": "arr", "change_to": "a", "original_function": "def func1(arr: list):\n  a = 0\n  for i in arr:\n    if i > 0:\n      a = a + i\n    else:\n      a = a - i\n  return a", "changed_function": "def func1(a: list):\n  arr = 0\n  for i in a:\n    if i > 0:\n      arr = arr + i\n    else:\n      arr = arr - i\n  return arr", "function_name": "func1", "inputs": ["[1,2,3,4,5]", "[1,2,3,-4,5]", "[-1,-2,-3,-4,-5]", "[0,0,0,0,0]", "[1,0,-1,2,-2]"]}, {"target_argument": "arr", "change_to": "b", "original_function": "def func3(arr: list):\n  b = [1, 2]\n  for i in arr:\n    if i > 0:\n      b.append(i)\n    else:\n      b.append(i*2)\n  return b", "changed_function": "def func3(b: list):\n  for el in b:\n    b.pop()\n  for i in range(len(b)):\n    try:\n      if b[i] >= 0:\n        b[i] = b[i]*2\n      else:\n        b[i] = abs(b[i])*2\n    except:\n      break\n  return b", "function_name": "func3", "inputs": ["[1,2,3,4,5]", "[1,2,3,-4,5]", "[-1,-2,-3,-4,-5]", "[0,0,0,0,0]", "[1,0,-1,2,-2]"]}, {"target_argument": "x", "change_to": "b", "original_function": "def func4(x: int):\n  a = lambda x: x * x\n  b = 1\n  while x > 0:\n    b = a(b)\n    x -= 1\n  return b", "changed_function": "def func4(b: int):\n  a = lambda b: b * b\n  x = 1\n  while x > 0:\n    x = a(x)\n    b -= 1\n  return b", "function_name": "func4", "inputs": ["5", "10", "20", "3", "1"]}, {"target_argument": "s", "change_to": "c", "original_function": "def func5(s: str):\n  c = 0\n  for i in range(len(s)):\n    if s[i].isupper():\n      c += 1\n  return c", "changed_function": "def func5(c: str):\n  s = 0\n  for i in range(len(c)):\n    if c[i].isupper():\n      s += 1\n  return s", "function_name": "func5", "inputs": ["\"HelloWorld\"", "\"helloWorld\"", "\"hELLoWorld\"", "\"HELLOworld\"", "\"helloWorld\""]}, {"target_argument": "n", "change_to": "i", "original_function": "def fib(n: int):\n  if n <= 1:\n    return n\n  else:\n    return fib(n-1) + fib(n-2)\n", "changed_function": "def fib(i: int):\n  n = i\n  if n <= 1:\n    return n\n  else:\n    return fib(n-1) + fib(n-2)", "function_name": "fib", "inputs": ["5", "10", "0", "1", "20"]}, {"target_argument": "x", "change_to": "a", "original_function": "def factorial(x: int):\n  if x == 0:\n    return 1\n  else:\n    return x * factorial(x-1)\n", "changed_function": "def factorial(a: int):\n  if a == 0:\n    return 1\n  else:\n    return a * factorial(a-1)", "function_name": "factorial", "inputs": ["5", "10", "0", "1", "20"]}, {"target_argument": "text", "change_to": "s", "original_function": "def count_words(text: str):\n  words = text.split()\n  return len(words)\n", "changed_function": "def count_words(s: str):\n  words = s.split()\n  return len(words)", "function_name": "count_words", "inputs": ["\"Hello world!\"", "\"This is a test string\"", "\"1 2 3 4\"", "\"a\"", "\"\""]}, {"target_argument": "nums", "change_to": "i", "original_function": "def is_sorted(nums: list):\n  for i in range(len(nums)-1):\n    if nums[i] > nums[i+1]:\n      return False\n  return True\n", "changed_function": "def is_sorted(i: list):\n  nums = i\n  for i in range(len(nums)-1):\n    if nums[i] > nums[i+1]:\n      return False\n  return True", "function_name": "is_sorted", "inputs": ["[1, 2, 3, 4]", "[4, 3, 2, 1]", "[1, 2, 3, 2]", "[1, 2, 1, 2]", "[]"]}, {"target_argument": "A", "change_to": "i", "original_function": "def func1(A: list):\n  A = A[:]\n  for i in range(len(A)):\n    if i > 0:\n      if A[i] <= A[i - 1]:\n        return False\n  return True", "changed_function": "def func1(i: list):\n  A = i[:]\n  for j in range(len(A)):\n    if j > 0:\n      if A[j] <= A[j - 1]:\n        return False\n  return True", "function_name": "func1", "inputs": ["[-1, 0, 2, 3]", "[2, 3, 4, 5]", "[1, 2, 3, 3]", "[3, 3, 3, 3]", "[5, 4, 3, 2]"]}, {"target_argument": "s", "change_to": "i", "original_function": "def func2(s: str):\n  return len([i for i in s if i.isupper()])", "changed_function": "def fun4(string: str):\n    return string[::-1]", "function_name": "func2", "inputs": ["'ABC'", "'abc'", "'aBc'", "'abC'", "'AbC'"]}, {"target_argument": "L", "change_to": "a", "original_function": "def func3(L: list):\n  a = lambda x, y: x + y\n  return a(*L)", "changed_function": "def func3(a: list):\n  L = a\n  a = lambda x, y: x + y\n  return a(*L)", "function_name": "func3", "inputs": ["[1, 2]", "[3, 4]", "[5, 6]", "[7, 8]", "[9, 10]"]}, {"target_argument": "x", "change_to": "b", "original_function": "def func4(x: int):\n  a = lambda x: x**2\n  b = lambda x: x + 1\n  if x % 2 == 0:\n    return a(x)\n  else:\n    return b(x)", "changed_function": "def func4(b: int):\n  x = lambda b: b**2\n  c = lambda b: b + 1\n  if b % 2 == 0:\n    return x(b)\n  else:\n    return c(b)", "function_name": "func4", "inputs": ["2", "3", "4", "5", "6"]}, {"target_argument": "arr", "change_to": "b", "original_function": "def func5(arr: tuple):\n  b = 1\n  for i in arr:\n    b *= i\n  return b", "changed_function": "def func5(b: tuple):\n  arr = 1\n  for i in b:\n    arr *= i\n  return arr", "function_name": "func5", "inputs": ["(2, 3)", "(4, 5)", "(6, 7)", "(8, 9)", "(10, 11)"]}, {"target_argument": "n", "change_to": "x", "original_function": "def count_vowels(n: str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in n:\n        if char in vowels:\n            count += 1\n    return count", "changed_function": "def count_vowels(x: str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in x:\n        if char in vowels:\n            count += 1\n    return count", "function_name": "count_vowels", "inputs": ["\"hello\"", "\"world\"", "\"aeiou\"", "\"12345\"", "\"aeiouAEIOU\""]}, {"target_argument": "l", "change_to": "y", "original_function": "def find_longest_word(l: list):\n    if len(l) == 0:\n        return ''\n    longest_word = l[0]\n    for word in l:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "changed_function": "def find_longest_word(y: list):\n    if len(y) == 0:\n        return ''\n    l = y[0]\n    for word in y:\n        if len(word) > len(l):\n            l = word\n    return l", "function_name": "find_longest_word", "inputs": ["[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]", "[\"a\", \"b\", \"c\", \"d\", \"e\"]", "[]", "[\"verylongword\", \"shortword\", \"mediumword\"]", "[\"one\", \"two\", \"three\"]"]}, {"target_argument": "t", "change_to": "x", "original_function": "def flatten_list(t: list):\n    flat_list = []\n    for item in t:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "changed_function": "def flatten_list(x: list):\n    t = []\n    for item in x:\n        if isinstance(item, list):\n            t.extend(flatten_list(item))\n        else:\n            t.append(item)\n    return t", "function_name": "flatten_list", "inputs": ["[1, 2, [3, 4], 5]", "[[1, 2], [3, 4], [5, 6]]", "[1, 2, [3, 4, [5, 6]], 7]", "[[1, 2, 3], 4, 5, [6, 7]]", "[]]"]}, {"target_argument": "n", "change_to": "x", "original_function": "def sum_of_squares(n: int):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * i\n    return sum", "changed_function": "def sum_of_squares(x: int):\n    n = 0\n    for i in range(1, x + 1):\n        n += i * i\n    return n", "function_name": "sum_of_squares", "inputs": ["5", "10", "1", "20", "100"]}, {"target_argument": "x", "change_to": "y", "original_function": "def bar(x: bool):\n  y = True\n  z = False\n  return (lambda x: x and y)(lambda y: y or x)", "changed_function": "def bar(y: bool):\n  x = True\n  z = False\n  return (lambda y: y and x)(lambda x: x or y)", "function_name": "bar", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "x", "change_to": "y", "original_function": "def quicksort(x: list):\n    if len(x) <= 1:\n        return x\n    pivot = x[len(x) // 2]\n    left = [y for y in x if y < pivot]\n    middle = [y for y in x if y == pivot]\n    right = [y for y in x if y > pivot]\n    return quicksort(left) + middle + quicksort(right)", "changed_function": "def quicksort(y: list):\n    if len(y) <= 1:\n        return y\n    pivot = y[len(y) // 2]\n    left = [x for x in y if x < pivot]\n    middle = [x for x in y if x == pivot]\n    right = [x for x in y if x > pivot]\n    return quicksort(left) + middle + quicksort(right)", "function_name": "quicksort", "inputs": ["[1, 5, 2, 4, 3]", "[10, 9, 8, 7, 6]", "[5, 4, 3, 2, 1]", "[1, 3, 5, 7, 9]", "[2, 4, 6, 8, 10]"]}, {"target_argument": "x", "change_to": "z", "original_function": "def sum_even_digits(x: int):\n    if x < 0:\n        x = -x\n    sum = 0\n    while x > 0:\n        digit = x % 10\n        if digit % 2 == 0:\n            sum += digit\n        x //= 10\n    return sum", "changed_function": "def sum_even_digits(z: int):\n    if z < 0:\n        z = -z\n    sum = 0\n    while z > 0:\n        digit = z % 10\n        if digit % 2 == 0:\n            sum += digit\n        z //= 10\n    return sum", "function_name": "sum_even_digits", "inputs": ["123456", "789012", "345678", "901234", "567890"]}, {"target_argument": "x", "change_to": "y", "original_function": "def factorial(x: int):\n    if x < 0:\n        return -1\n    elif x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)", "changed_function": "def factorial(y: int):\n    if y < 0:\n        return -1\n    elif y == 0:\n        return 1\n    else:\n        return y * factorial(y - 1)", "function_name": "factorial", "inputs": ["5", "10", "15", "20", "25"]}, {"target_argument": "x", "change_to": "y", "original_function": "def fibonacci(x: int):\n    if x <= 1:\n        return x\n    else:\n        return fibonacci(x - 1) + fibonacci(x - 2)", "changed_function": "def fibonacci(y: int):\n    if y <= 1:\n        return y\n    else:\n        return fibonacci(y - 1) + fibonacci(y - 2)", "function_name": "fibonacci", "inputs": ["5", "10", "15", "20", "25"]}, {"target_argument": "x", "change_to": "y", "original_function": "def find_max(x: list):\n    if len(x) == 0:\n        return None\n    max_val = x[0]\n    for i in range(1, len(x)):\n        if x[i] > max_val:\n            max_val = x[i]\n    return max_val", "changed_function": "def find_max(y: list):\n    if len(y) == 0:\n        return None\n    max_val = y[0]\n    for i in range(1, len(y)):\n        if y[i] > max_val:\n            max_val = y[i]\n    return max_val", "function_name": "find_max", "inputs": ["[1, 5, 2, 4, 3]", "[10, 9, 8, 7, 6]", "[5, 4, 3, 2, 1]", "[1, 3, 5, 7, 9]", "[2, 4, 6, 8, 10]"]}, {"target_argument": "b", "change_to": "x", "original_function": "def fun1(b: int):\n  x = b + 2\n  c = lambda b: b * 2\n  return x + c(b)", "changed_function": "def fun1(x: int):\n  b = x + 2\n  c = lambda x: x * 2\n  return b + c(x)", "function_name": "fun1", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "a", "change_to": "x", "original_function": "def fun2(a: int):\n  if a % 2 == 0:\n    x = a + 1\n  else:\n    x = a - 1\n  return x", "changed_function": "def fun2(x: int):\n  if x % 2 == 0:\n    a = x + 1\n  else:\n    a = x - 1\n  return a", "function_name": "fun2", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "d", "change_to": "b", "original_function": "def fun3(d: int):\n  b = d + 1\n  c = d - 2\n  b = (lambda x: x * x)(b)\n  return (b, c)", "changed_function": "def fun3(b: int):\n  d = b + 1\n  c = d - 2\n  b = (lambda b: b * b)(d)\n  return (b, c)", "function_name": "fun3", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "m", "change_to": "n", "original_function": "def fun4(m: int):\n  n = [1,2]\n  for i in range(m):\n    n.append(m + i)\n  return n", "changed_function": "def fun4(n: int):\n  m = [1,2]\n  for i in range(n):\n    m.append(n + i)\n  return m", "function_name": "fun4", "inputs": ["2", "4", "6", "8", "10"]}, {"target_argument": "y", "change_to": "z", "original_function": "def fun5(y: str):\n  z = y\n  z += 'hello'\n  if z[0] == 'a':\n    return z\n  return y", "changed_function": "def fun5(z: str):\n  y = z\n  y += 'hello'\n  if y[0] == 'a':\n    return y\n  return z", "function_name": "fun5", "inputs": ["'a'", "'b'", "'c'", "'d'", "'e'"]}, {"target_argument": "s", "change_to": "x", "original_function": "def analyze_list(s: list):\n  total = 0\n  for x in s:\n    total += x\n  if total > 10:\n    return [x for x in s if x > 5]\n  else:\n    return [x for x in s if x < 5]\n  x = s[0]\n  return [x, total]", "changed_function": "def analyze_list(x: list):\n  s = [0, 0]\n  for i in x:\n    s[0] += i\n    s[1] += 1\n  if s[0] > 10:\n    return [y for y in x if y > 5]\n  else:\n    return [y for y in x if y < 5]\n  total = s[0]\n  return [x, total]", "function_name": "analyze_list", "inputs": ["[1, 2, 3, 4, 5]", "[6, 7, 8, 9, 10]", "[11, 12, 13, 14, 15]", "[1, 3, 5, 7, 9]", "[2, 4, 6, 8, 10]"]}, {"target_argument": "n", "change_to": "x", "original_function": "def count_even(n: int):\n  count = 0\n  for i in range(n):\n    if i % 2 == 0:\n      count += 1\n  x = count * 2\n  return count", "changed_function": "def count_even(x: int):\n  n = text\n  count = 0\n  for i in range(n):\n    if i % 2 == 0:\n      count += 1\n  n = count * 2\n  return count", "function_name": "count_even", "inputs": ["10", "20", "30", "40", "50"]}, {"target_argument": "x", "change_to": "n", "original_function": "def calculate_squares(x: int):\n  squares = [i * i for i in range(x)]\n  x = len(squares)\n  return squares", "changed_function": "def calculate_squares(n: int):\n  squares = [i * i for i in range(n)]\n  x = len(squares)\n  return squares", "function_name": "calculate_squares", "inputs": ["5", "10", "15", "20", "25"]}, {"target_argument": "n", "change_to": "i", "original_function": "def func1(n: int):\n    i = 0\n    n_list = []\n    while i < n:\n        n_list.append(i * n)\n        i += 1\n    return (lambda n: (lambda i: sum(n_list[i: i+n]))(n))(1)", "changed_function": "def func1(i: int):\n    n = 0\n    n_list = []\n    while n < i:\n        n_list.append(n * i)\n        n += 1\n    return (lambda i: (lambda n: sum(n_list[n: n+i]))(i))(1)", "function_name": "func1", "inputs": ["5", "10", "20", "1", "3"]}, {"target_argument": "s", "change_to": "c", "original_function": "def func2(s: str):\n    c = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            c += s[i]\n    return (lambda s: (lambda c: c + s[1:]))(c)", "changed_function": "def func2(c: str):\n    s = ''\n    for i in range(len(c)):\n        if i % 2 == 0:\n            s += c[i]\n    return (lambda c: (lambda s: s + c[1:]))(s)", "function_name": "func2", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"programming\"", "\"language\""]}, {"target_argument": "l", "change_to": "k", "original_function": "def func3(l: list):\n    k = 0\n    l_set = set(l)\n    l_dict = {}\n    for k in l_set:\n        l_dict[k] = l.count(k)\n    return (lambda l: (lambda k: l_dict[k]))(l[0])", "changed_function": "def func3(k: list):\n    l = 0\n    l_set = set(k)\n    l_dict = {}\n    for l in l_set:\n        l_dict[l] = k.count(l)\n    return (lambda k: (lambda l: l_dict[l]))(k[0])", "function_name": "func3", "inputs": ["[1, 2, 3, 4, 5]", "[1, 1, 1, 1, 1]", "[1, 2, 2, 3, 3]", "[4, 5, 6, 7, 8]", "[9, 9, 9, 10, 10]"]}, {"target_argument": "b", "change_to": "a", "original_function": "def func4(b: bool):\n    a = False\n    if b:\n        a = True\n    return (lambda b: (lambda a: a and b))(b)", "changed_function": "def func4(a: bool):\n    b = False\n    if a:\n        b = True\n    return (lambda a: (lambda b: (lambda a: a and b))(a))(a)", "function_name": "func4", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "t", "change_to": "x", "original_function": "def func5(t: tuple):\n    x = (1, 2, 3)\n    t_sum = 0\n    for x in t:\n        t_sum += x\n    return (lambda t: (lambda x: t_sum - x))(t[0])", "changed_function": "def func5(x: list):\n    t = (1, 2, 3)\n    t_sum = 0\n    for t in x:\n        t_sum += t\n    return (lambda x: (lambda t: t_sum - t))(x[0])", "function_name": "func5", "inputs": ["(1, 2, 3)", "(4, 5, 6)", "(7, 8, 9)", "(10, 11, 12)", "(13, 14, 15)"]}, {"target_argument": "x", "change_to": "z", "original_function": "def  func_one(x : int):\n    z = [x, x]\n    k = 0\n    for j in z:\n        k = k + j\n    return x + 1 + k", "changed_function": "def  func_one(z : int):\n    x = [z, z]\n    k = 0\n    for j in x:\n        k = k + j\n    return z + 1 + k", "function_name": "func_one", "inputs": ["1", "5", "2", "10", "15"]}, {"target_argument": "l", "change_to": "k", "original_function": "def  func_two(l : list):\n    k = lambda l: sum(l) * l[0]\n    k2 = 0\n    for i in l:\n        if i > 0:\n            k2 = k(l)\n    return k2 + 1", "changed_function": "def func_two(l : list):\n    k = lambda l: sum(l) * l[0]\n    k2 = 0\n    for i in l:\n        if i > 0:\n            k2 = k(l)\n    return k2 + 1", "function_name": "func_two", "inputs": ["[1,2,3,4,5]", "[-1,2,3,-4,5]", "[-1,-2,3,4,-5]", "[1,-2,-3,4,-5]", "[0,2,3,4,5]"]}, {"target_argument": "x", "change_to": "y", "original_function": "def  func_three(x : int):\n    y = lambda x: x * x\n    return y(x) + y(2*x) + 1", "changed_function": "def  func_three(y : int):\n    x = lambda y: y * y\n    return x(y) + x(2*y) + 1", "function_name": "func_three", "inputs": ["3", "1", "7", "9", "5"]}, {"target_argument": "x", "change_to": "i", "original_function": "def  func_four(x : int):\n    i = 1\n    while x > 0:\n        x = x - i\n        i = i + 2\n    return x + 1", "changed_function": "def func_four(i : int):\n    x = 1\n    while x > 0:\n        x = x - i\n        i = i + 2\n    return x + 1", "function_name": "func_four", "inputs": ["5", "10", "21", "30", "42"]}, {"target_argument": "k", "change_to": "s", "original_function": "def  func_five(k : int):\n    if(k % 2 == 0):\n        return k + 1 + k//2\n    else:\n        return (k + 1) + k//2 + s + s", "changed_function": "def count_vowels(s: str):\n    vowels = ['aeiou', 'AEIOU']\n    x = 0\n    for char in s:\n        for v in vowels:\n          if(char in s):\n            x += 1\n    return x", "function_name": "func_five", "inputs": ["10", "11", "20", "21", "18"]}, {"target_argument": "name", "change_to": "age", "original_function": "def compute_name_age(name: str):\n  age = len(name)\n  if age < 5:\n    return name + ' is too short'\n  else:\n    return 'Hi ' + name + ', you are ' + str(age) + ' years old'", "changed_function": "def compute_name_age(name: str):\n  length = len(name)\n  if length < 5:\n    return name +'is too short'\n  else:\n    return 'Hi'+ name + ', you are'+ str(length) +'years old'", "function_name": "compute_name_age", "inputs": ["\"Alice\"", "\"Bob\"", "\"Charlie\"", "\"David\"", "\"Emily\""]}, {"target_argument": "a", "change_to": "x", "original_function": "def process_data(a: int):\n  x = a * 2\n  b = lambda y: y + x\n  return b(a)", "changed_function": "def process_data(x: int):\n  a = x * 2\n  b = lambda x: x + a\n  return b(x)", "function_name": "process_data", "inputs": ["10", "20", "30", "40", "50"]}, {"target_argument": "value", "change_to": "n", "original_function": "def find_min(value: int):\n  n = value - 1\n  if n < 0:\n    return 0\n  else:\n    return lambda n: n * value(n)", "changed_function": "def find_min(n: int):\n  value = n - 1\n  if value < 0:\n    return 0\n  else:\n    return lambda value: value * n", "function_name": "find_min", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "nums", "change_to": "a", "original_function": "def sum_even(nums: list):\n  a = 0\n  for num in nums:\n    if num % 2 == 0:\n      a += num\n  return a", "changed_function": "def sum_even(a: list):\n  nums = 0\n  for num in a:\n    if num % 2 == 0:\n      nums += num\n  return nums", "function_name": "sum_even", "inputs": ["[1, 2, 3, 4, 5]", "[6, 7, 8, 9, 10]", "[11, 12, 13, 14, 15]", "[16, 17, 18, 19, 20]", "[21, 22, 23, 24, 25]"]}, {"target_argument": "word", "change_to": "name", "original_function": "def check_palindrome(word: str):\n  name = word.lower()\n  return name == name[::-1]", "changed_function": "def check_palindrome(name: str):\n  word = name.lower()\n  return word == word[::-1]", "function_name": "check_palindrome", "inputs": ["\"Racecar\"", "\"Level\"", "\"Madam\"", "\"rotor\"", "\"refer\""]}, {"target_argument": "num", "change_to": "x", "original_function": "def count_With_Odd_SetBits(num):\n    if (num % 2 != 0):\n        return (num + 1) / 2\n    count = bin(num).count('1')\n    ans = num / 2\n    if (count % 2 != 0):\n        ans += 1\n    return ans", "changed_function": "def count_With_Odd_SetBits(x):\n    if x % 2!= 0:\n        return (x + 1) / 2\n    count = bin(x).count('1')\n    ans = x / 2\n    if count % 2!= 0:\n        ans += 1\n    return ans", "function_name": "count_With_Odd_SetBits", "inputs": ["5", "10", "15", "20", "25"]}, {"target_argument": "x", "change_to": "s", "original_function": "def find_largest_palindrome_substring(x):\n    n = len(x)\n    if (n < 2):\n        return x\n    max_len = 1\n    start = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (is_palindrome(x[i:j + 1])):\n                if (j - i + 1 > max_len):\n                    max_len = j - i + 1\n                    start = i\n    return x[start:start + max_len]\n\ndef is_palindrome(s):\n    n = len(s)\n    for i in range(n // 2):\n        if (s[i] != s[n - 1 - i]):\n            return False\n    return True", "changed_function": "def find_largest_palindrome_substring(s):\n    n = len(s)\n    if (n < 2):\n        return s", "function_name": "find_largest_palindrome_substring", "inputs": ["\"abaababa\"", "\"babad\"", "\"cbbd\"", "\"a\"", "\"ac\"", "\"123321\""]}, {"target_argument": "arr", "change_to": "a", "original_function": "def find_the_missing_number(arr):\n    n = len(arr)\n    total = (n + 1) * (n + 2) // 2\n    for num in arr:\n        total -= num\n    return total", "changed_function": "def find_the_missing_number(a):\n    n = len(a)\n    total = (n + 1) * (n + 2) // 2\n    for num in a:\n        total -= num\n    return total", "function_name": "find_the_missing_number", "inputs": ["[1, 2, 3, 4, 6]", "[1, 3, 4, 5, 6]", "[1, 2, 3, 5, 6]", "[1, 2, 4, 5, 6]", "[1, 2, 3, 4, 5]"]}, {"target_argument": "n", "change_to": "a", "original_function": "def count_ways_to_reach_nth_stair(n):\n    if (n == 0):\n        return 1\n    if (n == 1):\n        return 1\n    dp = [0 for i in range(n + 1)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]", "changed_function": "def count_ways_to_reach_nth_stair(a):\n    if (a == 0):\n        return 1\n    if (a == 1):\n        return 1", "function_name": "count_ways_to_reach_nth_stair", "inputs": ["3", "4", "5", "6", "7"]}, {"target_argument": "l", "change_to": "b", "original_function": "def double_list(l):\n    b = []\n    for l in l:\n        if isinstance(l, int):\n            b.append(l*2)\n        else:\n            b.append(l)\n    return b", "changed_function": "def double_list(b):\n    l = []\n    for l in b:\n        if isinstance(l, int):\n            l.append(l*2)\n        else:\n            l.append(l)\n    return l", "function_name": "double_list", "inputs": ["[1, 2, 3]", "[\u201ca\u201d, \u201cb\u201d, \u201cc\u201d]", "[1, 2, \u201ca\u201d, 3, \u201cb\u201d, 4]", "[\u201ca\u201d, 1, \u201cb\u201d, 2, \u201cc\u201d, 3]", "[1, 2, \u201ca\u201d, \u201cb\u201d, 3, 4]"]}, {"target_argument": "n", "change_to": "b", "original_function": "def  sum_list(n):\n    b = 0\n    for n in n:\n        b += n\n    return b", "changed_function": "returndef list", "function_name": "sum_list", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9, 10]", "[11, 12, 13, 14, 15]", "[16, 17, 18, 19, 20, 21]"]}, {"target_argument": "a", "change_to": "b", "original_function": "def remove_duplicates(a):\n    b = []\n    for a in a:\n        if a not in b:\n            b.append(a)\n    return b", "changed_function": "def remove_duplicates(b):\n    a = []\n    for a in b:\n        if a not in a:\n            a.append(a)\n    return a", "function_name": "remove_duplicates", "inputs": ["[1, 2, 3, 3, 2, 1]", "[1, 2, 3, 1, 4, 5, 3]", "[\u201ca\u201d, \u201cb\u201d, \u201cc\u201d, \u201ca\u201d, \u201cb\u201d, \u201cd\u201d, \u201cc\u201d]", "[\u201ca\u201d, \u201ca\u201d, \u201cb\u201d, \u201cc\u201d, \u201cb\u201d, \u201cd\u201d, \u201cc\u201d]", "[\u201ca\u201d, \u201cb\u201d, \u201cc\u201d, \u201cd\u201d, \u201ce\u201d, \u201cf\u201d, \u201cg\u201d, \u201ch\u201d]"]}, {"target_argument": "a", "change_to": "x", "original_function": "def check_even(a):\n    b = (lambda x: x%2 == 0)(a)\n    return b", "changed_function": "def check_even(x):\n    a = x%2 == 0\n    return a", "function_name": "check_even", "inputs": ["10", "15", "20", "25", "30"]}, {"target_argument": "a", "change_to": "b", "original_function": "def bar(a: int):\n  b = 1\n  c = 2\n  if (a + b) * 2 == 4:\n    d = lambda a: a + b + c\n    return d(a)\n  else:\n    return a * 2", "changed_function": "def bar(b: int):\n  a = 1\n  c = 2\n  if (a + b) * 2 == 4:\n    d = lambda b: b + a + c\n    return d(b)\n  else:\n    return b * 2", "function_name": "bar", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "a", "change_to": "c", "original_function": "def baz(a: bool):\n  b = a\n  c = 2\n  if b == False:\n    return a\n  else:\n    return lambda a: a * c", "changed_function": "def baz(c: bool):\n  a = c\n  b = 2\n  if a == False:\n    return a\n  else:\n    return lambda a: a * b", "function_name": "baz", "inputs": ["True", "False", "True", "False", "False"]}, {"target_argument": "x", "change_to": "z", "original_function": "def qux(x: int):\n  z = 10\n  y = x * 5\n  if y > z:\n    return z * y\n  else:\n    return lambda x: x * z", "changed_function": "def qux(z: int):\n  x = 10\n  y = z * 5\n  if y > x:\n    return x * y\n  else:\n    return lambda z: z * x", "function_name": "qux", "inputs": ["5", "10", "15", "20", "25"]}, {"target_argument": "x", "change_to": "a", "original_function": "def foo(x: int):\n  a = x + 10\n  b = x + 1\n  if b > a:\n    return x * x\n  else:\n    return (lambda a: a * 10)(x + 1)", "changed_function": "def foo(a: int):\n  x = a + 10\n  b = x + 1\n  if b > a:\n    return a * a\n  else:\n    return (lambda x: x * 10)(x + 1)", "function_name": "foo", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "x", "change_to": "y", "original_function": "def quux(x: str):\n  y = 'hello'\n  z = x + y\n  return z", "changed_function": "def quux(y: str):\n  x = 'hello'\n  z = x + y\n  return z", "function_name": "quux", "inputs": ["'world'", "'python'", "'coding'", "'program'", "'testing'"]}, {"target_argument": "x", "change_to": "y", "original_function": "def add_to_list(x: list):\n  y = []\n  for i in x:\n    y.append(i + 1)\n  return y", "changed_function": "def add_to_list(y: list):\n  x = []\n  for i in y:\n    x.append(i + 1)\n  return x", "function_name": "add_to_list", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "string", "change_to": "s", "original_function": "def reverse_string(string: str):\n  return string[::-1]", "changed_function": "def reverse_string(s: str):\n  string = s[::-1]\n  return string", "function_name": "reverse_string", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"programming\"", "\"data science\""]}, {"target_argument": "input_list", "change_to": "l", "original_function": "def find_max_in_list(input_list: list):\n  if len(input_list) == 0:\n    return None\n  max_value = input_list[0]\n  for l in input_list[1:]:\n    if l > max_value:\n      max_value = l\n  return max_value", "changed_function": "def find_max_in_list(l: list):\n  if len(l) == 0:\n    return None\n  max_value = l[0]\n  for n in l[1:]:\n    if n > max_value:\n      max_value = n\n  return max_value", "function_name": "find_max_in_list", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "nums", "change_to": "x", "original_function": "def sum_squares(nums: list):\n  return sum(x*x for x in nums)", "changed_function": "def sum_squares(x: list):\n  return sum((x*x for x in x))", "function_name": "sum_squares", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "a", "change_to": "n", "original_function": "def func_1(a: int):\n  b = a * a\n  c = 3\n  d = b + c\n  e = lambda a: a + 1\n  f = e(a)\n  g = f + 1\n  h = lambda n: n + a\n  return h(a)", "changed_function": "def func_1(n: int):\n  a = n * n\n  b = 3\n  c = b + a\n  d = lambda n: n + 1\n  e = d(n)\n  f = e + 1\n  g = lambda n: n + n\n  return g(n)", "function_name": "func_1", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "n", "change_to": "a", "original_function": "def func_2(n: int):\n  a = 1\n  b = n + a\n  c = lambda n: n + 2\n  d = c(n)\n  e = b + d\n  return e", "changed_function": "def func_2(a: int):\n  n = 1\n  b = n + a\n  c = lambda n: n + 2\n  d = c(n)\n  e = b + d\n  return e", "function_name": "func_2", "inputs": ["10", "20", "30", "40", "50"]}, {"target_argument": "x", "change_to": "y", "original_function": "def func_3(x: int):\n  y = x + 1\n  z = lambda x: x * 2\n  w = z(x)\n  return y + w", "changed_function": "def func_3(y: int):\n  x = y + 1\n  z = lambda y: y * 2\n  w = z(y)\n  return x + w", "function_name": "func_3", "inputs": ["-10", "-20", "-30", "-40", "-50"]}, {"target_argument": "s", "change_to": "b", "original_function": "def func_4(s: str):\n  b = len(s)\n  c = lambda s: s + s\n  d = c(s)\n  e = b + len(d)\n  return e", "changed_function": "def func_4(b: str):\n  s = len(b)\n  c = lambda b: b + b\n  d = c(b)\n  e = s + len(d)\n  return e", "function_name": "func_4", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"coding\"", "\"program\""]}, {"target_argument": "l", "change_to": "m", "original_function": "def func_5(l: list):\n  m = l[0]\n  n = l[1]\n  o = lambda l: l + [m]\n  p = o(l)\n  q = p + [n]\n  return q", "changed_function": "def func_5(m: list):\n  l = m[0]\n  n = m[1]\n  o = lambda m: m + [l]\n  p = o(m)\n  q = p + [n]\n  return q", "function_name": "func_5", "inputs": ["[1, 2]", "[3, 4]", "[5, 6]", "[7, 8]", "[9, 10]"]}, {"target_argument": "s", "change_to": "a", "original_function": "def func1(s: str):\n  a = len(s)\n  b = a - 1\n  for i in range(b):\n    if (ord(s[i]) < ord(s[i+1])):\n      return True\n  return False", "changed_function": "def func1(a: str):\n  s = len(a)\n  b = s - 1\n  for i in range(b):\n    if (ord(a[i]) < ord(a[i+1])):\n      return True\n  return False", "function_name": "func1", "inputs": ["\"apple\"", "\"banana\"", "\"orange\"", "\"watermelon\"", "\"grape\""]}, {"target_argument": "lst", "change_to": "x", "original_function": "def func2(lst: list):\n  x = len(lst)\n  y = 0\n  for i in lst:\n    y = y + i\n  if (x % 2 == 0):\n    return y\n  return x", "changed_function": "def func2(x: list):\n  lst = len(x)\n  y = 0\n  for i in x:\n    y = y + i\n  if (lst % 2 == 0):\n    return y\n  return lst", "function_name": "func2", "inputs": ["[1, 2, 3, 4, 5]", "[6, 7, 8, 9, 10]", "[11, 12, 13, 14, 15]", "[16, 17, 18, 19, 20]", "[21, 22, 23, 24, 25]"]}, {"target_argument": "n", "change_to": "a", "original_function": "def func3(n: int):\n  a = 0\n  for i in range(n):\n    if (i % 2 == 0):\n      a += 1\n  return a * 2", "changed_function": "def func3(a: int):\n  n = 0\n  for i in range(a):\n    if (i % 2 == 0):\n      n += 1\n  return n * 2", "function_name": "func3", "inputs": ["10", "20", "30", "40", "50"]}, {"target_argument": "n", "change_to": "x", "original_function": "def fib(n: int):\n  if n <= 1:\n    return n\n  else:\n    return fib(n-1) + fib(n-2)", "changed_function": "def fib(x: int):\nif x <= 1:\nreturn x\nelse:\nreturn fib(x-1) + fib(x-2)", "function_name": "fib", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "s", "change_to": "x", "original_function": "def count_vowels(s: str):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for char in s:\n    if char in vowels:\n      count += 1\n  return count", "changed_function": "def count_vowels(x: str):\n  vowels = 'aeiouAEIOU'\n  s = 0\n  for char in x:\n    if char in vowels:\n      s += 1\n  return s", "function_name": "count_vowels", "inputs": ["'hello'", "'world'", "'python'", "'programming'", "'language'"]}, {"target_argument": "n", "change_to": "x", "original_function": "def is_prime(n: int):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True", "changed_function": "def is_prime(x: int):\n  if x <= 1:\n    return False\n  for i in range(2, int(x**0.5) + 1):\n    if x % i == 0:\n      return False\n  return True", "function_name": "is_prime", "inputs": ["2", "7", "11", "15", "23"]}, {"target_argument": "arr", "change_to": "x", "original_function": "def find_max(arr: list):\n  max_val = arr[0]\n  for i in range(1, len(arr)):\n    if arr[i] > max_val:\n      max_val = arr[i]\n  return max_val", "changed_function": "def find_max(x: list):\n  arr = arr[0]\n  for i in range(1, len(x)):\n    if x[i] > arr:\n      arr = x[i]\n  return arr", "function_name": "find_max", "inputs": ["[1, 2, 3, 4, 5]", "[10, 5, 2, 8, 1]", "[3, 9, 1, 6, 4]", "[7, 2, 5, 1, 9]", "[4, 8, 3, 2, 1]"]}, {"target_argument": "n", "change_to": "x", "original_function": "def factorial(n: int):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)", "changed_function": "def factorial(x: int):\n  n = 0\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(x-1)", "function_name": "factorial", "inputs": ["5", "4", "3", "2", "1"]}, {"target_argument": "a", "change_to": "x", "original_function": "def foo(a: int):\n  b = a + 1\n  x = a * 2\n  return (lambda a: a + x)(a)", "changed_function": "def foo(x: int):\n  b = x + 1\n  a = x * 2\n  return (lambda x: x + a)(x)", "function_name": "foo", "inputs": ["5", "10", "15", "20", "25"]}, {"target_argument": "b", "change_to": "y", "original_function": "def bar(b: str):\n  c = b + '1'\n  d = b * 2\n  return (lambda b: b + c)(b)", "changed_function": "def bar(y: str):\n  b = y + '1'\n  c = y * 2\n  return (lambda y: y + b)(y)", "function_name": "bar", "inputs": ["'hello'", "'world'", "'python'", "'programming'", "'language'"]}, {"target_argument": "c", "change_to": "x", "original_function": "def baz(c: bool):\n  d = c and True\n  x = not c\n  return (lambda c: c or x)(c)", "changed_function": "def baz(x: bool):\n  c = x and True\n  d = c and True\n  return (lambda x: x or not d)(x)", "function_name": "baz", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "d", "change_to": "y", "original_function": "def qux(d: list):\n  e = d + [1]\n  y = d[0]\n  return (lambda d: d[0] * y)(d)", "changed_function": "def qux(y: list):\n  e = y + [1]\n  d = e[0]\n  return (lambda y: y[0] * y)(y)", "function_name": "qux", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "e", "change_to": "z", "original_function": "def quux(e: tuple):\n  f = e + (1,)\n  z = e[1]\n  return (lambda e: e[0] + z)(e)", "changed_function": "def quux(z: tuple):\n  e = z + (1,)\n  f = e[1]\n  return (lambda z: z[0] + f)(z)", "function_name": "quux", "inputs": ["(1, 2)", "(3, 4)", "(5, 6)", "(7, 8)", "(9, 10)"]}, {"target_argument": "n", "change_to": "x", "original_function": "def sum_of_squares(n: int):\n  sum = 0\n  for i in range(n):\n    sum += i * i\n  return sum", "changed_function": "def sum_of_squares(x: int):\n  n = 0\n  sum = 0\n  for i in range(x):\n    sum += i * i\n  return sum", "function_name": "sum_of_squares", "inputs": ["5", "10", "15", "20", "25"]}, {"target_argument": "s", "change_to": "i", "original_function": "def is_palindrome(s: str):\n  return s == s[::-1]", "changed_function": "def is_palindrome(i: str):\n  return i == i[::-1]", "function_name": "is_palindrome", "inputs": ["\"racecar\"", "\"level\"", "\"madam\"", "\"rotor\"", "\"noon\""]}, {"target_argument": "n", "change_to": "x", "original_function": "def factorial(n: int):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n - 1)", "changed_function": "def factorial(x: int):\n  n = x\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n - 1)", "function_name": "factorial", "inputs": ["5", "10", "3", "7", "1"]}, {"target_argument": "n", "change_to": "x", "original_function": "def fibonacci(n: int):\n  if n <= 1:\n    return n\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)", "changed_function": "def fibonacci(x: int):\n  if x <= 1:\n    t = x\n  else:\n    t = fibonacci(x-1) + fibonacci(x-2)\n  return t", "function_name": "fibonacci", "inputs": ["5", "10", "3", "7", "1"]}, {"target_argument": "l", "change_to": "i", "original_function": "def find_max(l: list[int]):\n  if len(l) == 0:\n    return None\n  max_val = l[0]\n  for i in l[1:]:\n    if i > max_val:\n      max_val = i\n  return max_val", "changed_function": "def find_max(i: list[int]):\n  if len(i) == 0:\n    return None\n  max_val = i[0]\n  for j in i[1:]:\n    if j > max_val:\n      max_val = j\n  return max_val", "function_name": "find_max", "inputs": ["[1, 2, 3, 4, 5]", "[5, 4, 3, 2, 1]", "[1, 3, 5, 2, 4]", "[4, 2, 1, 5, 3]", "[3, 1, 4, 2, 5]"]}, {"target_argument": "a", "change_to": "b", "original_function": "def sum_lists(a: list):\n  sum = 0\n  for b in a:\n    sum += b\n  return sum", "changed_function": "def sum_lists(b: list):\n  a = 0\n  for a  in b:\n    a += b\n  return a", "function_name": "sum_lists", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "f", "change_to": "g", "original_function": "def apply_twice(f: callable):\n  def g(x):\n    return f(f(x))\n  return g", "changed_function": "def apply_twice(g: callable):\n  def f(x):\n    return g(g(x))\n  return f", "function_name": "apply_twice", "inputs": ["lambda x: x + 1", "lambda x: x * 2", "lambda x: x - 1", "lambda x: x ** 2", "lambda x: x // 2"]}, {"target_argument": "s", "change_to": "t", "original_function": "def reverse_string(s: str):\n  t = ''\n  for i in range(len(s) - 1, -1, -1):\n    t += s[i]\n  return t", "changed_function": "def reverse_string(t: str):\n  s = ''\n  for i in range(len(t) - 1, -1, -1):\n    s += t[i]\n  return s", "function_name": "reverse_string", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"programming\"", "\"data science\""]}, {"target_argument": "x", "change_to": "y", "original_function": "def factorial(x: int):\n  if x == 0:\n    return 1\n  else:\n    return x * factorial(x - 1)", "changed_function": "def factorial(y: int):\n  x = 0\n  if x == 0:\n    return 1\n  else:\n    return x * factorial(x - 1)", "function_name": "factorial", "inputs": ["5", "10", "3", "7", "12"]}, {"target_argument": "n", "change_to": "m", "original_function": "def is_prime(n: int):\n  if n <= 1:\n    return False\n  for i in range(2, int(n ** 0.5) + 1):\n    if n % i == 0:\n      return False\n  return True", "changed_function": "def is_prime(m: int):\n  if m <= 1:\n    return False\n  for i in range(2, int(m ** 0.5) + 1):\n    if m % i == 0:\n      return False\n  return True", "function_name": "is_prime", "inputs": ["2", "7", "11", "13", "17"]}, {"target_argument": "b", "change_to": "a", "original_function": "def foo(b: bool):\n  a = [1, 2, 3]\n  c = a[0]\n  if b:\n    return c + 1\n  else:\n    return c - 1\n  a = 5\n  d = 5\n  return (lambda b: b * a)(c)", "changed_function": "def foo(a: bool):\n  b = [1, 2, 3]\n  c = b[0]\n  if a:\n    return c + 1\n  else:\n    return c - 1\n  a=5\n  d=5\n  return (lambda a: a * c)(b)", "function_name": "foo", "inputs": ["True", "False", "True", "False", "False"]}, {"target_argument": "b", "change_to": "a", "original_function": "def bar(b: int):\n  a = [1, 2]\n  if b > 0:\n    c = (lambda a: a + b)(1)\n  else:\n    c = (lambda b: b - 1)(b)\n  return c + 2 * b\n  b = 4\n  d = b\n  return a + 3", "changed_function": "def bar(a: int):\n  b = [1, 2]\n  if a > 0:\n    c = (lambda a: a + a)(1)\n  else:\n    c = (lambda b: b - 1)(b)\n  return c + 2 * b\n  b = 4\n  d = b\n  return a + 3", "function_name": "bar", "inputs": ["1", "5", "-1", "2", "-3"]}, {"target_argument": "n", "change_to": "b", "original_function": "def baz(n: int):\n  a = n\n  b = a + 2\n  c = (lambda n: n * n)(b)\n  d = n\n  return (lambda b: b - c)(n)", "changed_function": "def baz(b: int):\n  n = b\n  a = n\n  b = a + 2\n  c = (lambda n: n * n)(b)\n  d = n\n  return (lambda b: b - c)(n)", "function_name": "baz", "inputs": ["3", "5", "10", "-2", "0"]}, {"target_argument": "s", "change_to": "a", "original_function": "def foobar(s: str):\n  a = s\n  b = (lambda s: s.split(\" \"))(a)\n  c = len(b)\n  if c > 2:\n    d = b[2]\n  else:\n    d = b[0]\n  return (lambda a: a.upper())(d)", "changed_function": "def foobar(a: str):\n  s = a\n  b = (lambda a: a.split(\" \"))(s)\n  c = len(b)\n  if c > 2:\n    d = b[2]\n  else:\n    d = b[0]\n  return (lambda s: s.upper())(d)", "function_name": "foobar", "inputs": ["\"this is a sentence\"", "\"hello world\"", "\"one two\"", "\"python is good\"", "\"just a test\""]}, {"target_argument": "y", "change_to": "x", "original_function": "def func_two(y: bool):\n  x = 1\n  if y:\n    return x\n  else:\n    return (lambda x: x * 2)(lambda y: y + 1)", "changed_function": "def func_two(x: bool):\n  y = 1\n  if x:\n    return y\n  else:\n    return (lambda y: y * 2)(lambda x: x + 1)", "function_name": "func_two", "inputs": ["True", "False", "True", "False", "False"]}, {"target_argument": "z", "change_to": "x", "original_function": "def func_three(z: str):\n  x = 1\n  if z == \"hello\":\n    return x\n  else:\n    return (lambda x: x * 2)(lambda y: y + 1)", "changed_function": "def func_three(x: str):\n  y = 1\n  if x == \"hello\":\n    return y\n  else:\n    z = lambda x: x * 2\n    k = lambda y: y + 1\n    return z(k)", "function_name": "func_three", "inputs": ["\"hello\"", "\"world\"", "\"hello\"", "\"bye\"", "\"hello\""]}, {"target_argument": "m", "change_to": "x", "original_function": "def func_five(m: tuple):\n  x = 1\n  if len(m) == 2:\n    return x\n  else:\n    return (lambda x: x * 2)(lambda y: y + 1)", "changed_function": "def func_five(x: tuple):\n  m = 1\n  if len(x) == 2:\n    return m\n  else:\n    return (lambda m: m * 2)(lambda z: z + 1)", "function_name": "func_five", "inputs": ["(1, 2)", "(1, 2, 3)", "(1, 2)", "(4, 5)", "(1, 2)"]}, {"target_argument": "str1", "change_to": "i", "original_function": "def count_upper(str1):\n    count = 0\n    for i in str1:\n        if i.isupper():\n            count += 1\n    return count", "changed_function": "return", "function_name": "count_upper", "inputs": ["'Hello world'", "'AbCde'", "'aBcDeFgH'", "'abcdefg'", "'A'"]}, {"target_argument": "l", "change_to": "x", "original_function": "def find_min(l):\n    if len(l) == 0:\n        return None\n    x = l[0]\n    for i in l:\n        if i < x:\n            x = i\n    return x", "changed_function": "def find_min(x):\n    l = len(x)\n    if l == 0:\n        return None\n    m = x[0]\n    for i in x:\n        if i < m:\n            m = i\n    return m", "function_name": "find_min", "inputs": ["[1, 2, 3]", "[2, 1, 3]", "[3, 2, 1]", "[1]", "[]"]}, {"target_argument": "lst", "change_to": "a", "original_function": "def sum_squares(lst):\n    a = 0\n    for i in lst:\n        a += i * i\n    return a", "changed_function": "def sum_squares(lst):\n    a = 0\n    for b in lst:\n        a += c * c\n    return a", "function_name": "sum_squares", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[1, 1, 1]", "[2, 2, 2]"]}, {"target_argument": "s", "change_to": "b", "original_function": "def reverse_string(s):\n    b = ''\n    for i in s:\n        b = i + b\n    return b", "changed_function": "def new_repeat(t):\n    return t*3", "function_name": "reverse_string", "inputs": ["'hello'", "'world'", "'python'", "'coding'", "'testing'"]}, {"target_argument": "n", "change_to": "x", "original_function": "def count_even_numbers(n: int):\n  x = 0\n  for i in range(n):\n    if i % 2 == 0:\n      x += 1\n  return x", "changed_function": "def count_even_numbers(x: int):\n  n = 0\n  for i in range(x):\n    if i % 2 == 0:\n      n += 1\n  return n", "function_name": "count_even_numbers", "inputs": ["10", "5", "20", "1", "15"]}, {"target_argument": "s", "change_to": "i", "original_function": "def find_substring(s: str):\n  i = \"hello\"\n  if any(i in sub for sub in s):\n    return True\n  return False", "changed_function": "def find_substring(i: str):\n  s = \"hello\"\n  if any(i in sub for sub in s):\n    return True\n  return False", "function_name": "find_substring", "inputs": ["[\"world\", \"hello\", \"python\"]", "[\"apple\", \"banana\", \"cherry\"]", "[\"hello\", \"goodbye\", \"world\"]", "[\"programming\", \"languages\", \"python\"]", "[\"data\", \"science\", \"machine learning\"]"]}, {"target_argument": "l", "change_to": "x", "original_function": "def sum_squares(l: list):\n  x = 0\n  for i in l:\n    x += i * i\n  return x", "changed_function": "def sum_squares(x: list):\n  l = 0\n  for i in x:\n    l += i * i\n  return l", "function_name": "sum_squares", "inputs": ["[1, 2, 3, 4, 5]", "[10, 20, 30, 40]", "[-1, -2, -3, -4]", "[5, 5, 5, 5, 5]", "[1, 3, 5, 7, 9]"]}, {"target_argument": "numbers", "change_to": "x", "original_function": "def find_min_max(numbers: list):\n  x = min(numbers)\n  y = max(numbers)\n  return x, y", "changed_function": "def find_min_max(x: list):\n  numbers = min(x)\n  y = max(x)\n  return numbers, y", "function_name": "find_min_max", "inputs": ["[1, 2, 3, 4, 5]", "[10, 20, 30, 40, 50]", "[1, 5, 2, 4, 3]", "[10, 5, 8, 2, 7]", "[1, 1, 1, 1, 1]"]}, {"target_argument": "text", "change_to": "a", "original_function": "def count_words(text: str):\n  a = text.split()\n  return len(a)", "changed_function": "def count_words(a: str):\n  text = text.split()\n  return len(text)", "function_name": "count_words", "inputs": ["\"This is a test sentence.\"", "\"Python is a great language.\"", "\"The quick brown fox jumps over the lazy dog.\"", "\"One, two, three, four, five.\"", "\"Hello, world!\" "]}, {"target_argument": "f", "change_to": "a", "original_function": "def foo(f: int):\n  b = f\n  if f < 5:\n    return b * 10\n  else:\n    return lambda x: x + b\n  return b", "changed_function": "def foo(a: int):\n  b = a\n  if a < 5:\n    return b * 10\n  else:\n    return lambda x: x + b\n  return b", "function_name": "foo", "inputs": ["5", "10", "3", "1", "2"]}, {"target_argument": "y", "change_to": "z", "original_function": "def bar(y: str):\n  if len(y) > 5:\n    y = 'hello'\n  return lambda z: z + y\n  z = 'world'", "changed_function": "def bar(z: str):\n  if len(z) > 5:\n    z = 'hello'\n  return lambda z: z + z", "function_name": "bar", "inputs": ["'world'", "'test'", "'longstring'", "'short'", "'12345'"]}, {"target_argument": "x", "change_to": "b", "original_function": "def baz(x: bool):\n  if x:\n    b = True\n  else:\n    b = False\n  return lambda x: x + b\n  b = 0", "changed_function": "def baz(b: bool):\n  if b:\n    x = True\n  else:\n    x = False\n  return lambda b: b + x", "function_name": "baz", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "a", "change_to": "b", "original_function": "def qux(a: list):\n  b = 0\n  for i in range(len(a)):\n    b += a[i]\n  return lambda b: b + a[0]", "changed_function": "def qux(b: list):\n  a = 0\n  for i in range(len(b)):\n    a += b[i]\n  return lambda a: a + b[0]", "function_name": "qux", "inputs": ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]", "[10, 11, 12]", "[13, 14, 15]"]}, {"target_argument": "k", "change_to": "m", "original_function": "def quux(k: tuple):\n  m = 0\n  for i in range(len(k)):\n    m += k[i]\n  return lambda m: m * k[0]", "changed_function": "def quux(m: tuple):\n  k = 0\n  for i in range(len(m)):\n    k += m[i]\n  return lambda m: m * m[0]", "function_name": "quux", "inputs": ["(1, 2, 3)", "(4, 5, 6)", "(7, 8, 9)", "(10, 11, 12)", "(13, 14, 15)"]}, {"target_argument": "x", "change_to": "y", "original_function": "def func1(x: int):\n  y = x + 1\n  z = y + 2\n  return lambda x: (x + z) + 2\n  ", "changed_function": "def func1(y: int):\n  x = y + 1\n  z = x + 2\n  return lambda y: (y + z) + 2", "function_name": "func1", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "n", "change_to": "x", "original_function": "def func2(n: int):\n  if n <= 1:\n    return 1\n  x = 1\n  y = 1\n  for i in range(2, n + 1):\n    x = x + y\n    y = x\n  return x\n  ", "changed_function": "def func2(x: int):\n  n = 1\n  if x <= 1:\n    return 1\n  y = 1\n  returned_x = 1\n  for i in range(2, x + 1):\n    returned_x = returned_x + y\n    y = returned_x\n  return returned_x", "function_name": "func2", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "x", "change_to": "y", "original_function": "def func3(x: int):\n  if x == 0:\n    return 1\n  y = 1\n  while x > 0:\n    y = y * x\n    x = x - 1\n  return y\n  ", "changed_function": "def func3(y: int):\n  if y == 0:\n    return 1\n  x = 1\n  while x > 0:\n    y = y * x\n    x = x - 1\n  return y", "function_name": "func3", "inputs": ["5", "10", "15", "20", "25"]}, {"target_argument": "x", "change_to": "y", "original_function": "def func4(x: str):\n  y = len(x)\n  return lambda x: y + len(x)\n  ", "changed_function": "returndef fun", "function_name": "func4", "inputs": ["\"abc\"", "\"defg\"", "\"hijklm\"", "\"nopqrst\"", "\"uvwxyz\""]}, {"target_argument": "a", "change_to": "b", "original_function": "def func5(a: int):\n  b = [1, 2, 3, 4]\n  c = lambda x: b[x] * a\n  return c(2)\n  ", "changed_function": "def func5(b: int):\n  a = [1, 2, 3, 4]\n  c = lambda x: b[x] * a\n  return c(2)", "function_name": "func5", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "nums", "change_to": "x", "original_function": "def func1(nums: list):\n  x = 0\n  for num in nums:\n    if num % 2 == 0:\n      x += num\n  return x", "changed_function": "def func1(x: list):\n  nums = 0\n  for num in x:\n    if num % 2 == 0:\n      nums += num\n  return nums", "function_name": "func1", "inputs": ["[1, 2, 3, 4, 5]", "[10, 11, 12, 13, 14]", "[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]", "[0, 2, 4, 6, 8]"]}, {"target_argument": "text", "change_to": "s", "original_function": "def func2(text: str):\n  s = 0\n  for char in text:\n    if char.isalpha():\n      s += 1\n  return s", "changed_function": "def func2(s: str):\n  text = 0\n  for char in s:\n    if char.isalpha():\n      text += 1\n  return text", "function_name": "func2", "inputs": ["\"Hello, world!\"", "\"1234567890\"", "\"This is a test.\"", "\"Python is fun!\"", "\"This is a string with numbers 1234567890.\""]}, {"target_argument": "nums", "change_to": "a", "original_function": "def func3(nums: list):\n  a = lambda x: x * 2\n  result = [a(num) for num in nums]\n  return result", "changed_function": "def func3(a: list):\n   nums = [x * 2 for x in a]\n   result = nums\n   return result", "function_name": "func3", "inputs": ["[1, 2, 3, 4, 5]", "[10, 11, 12, 13, 14]", "[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]", "[0, 2, 4, 6, 8]"]}, {"target_argument": "text", "change_to": "word", "original_function": "def func4(text: str):\n  word = text.split()\n  return len(word)", "changed_function": "def func4(word: str):\n  text = word.split()\n  return len(text)", "function_name": "func4", "inputs": ["\"Hello, world!\"", "\"1234567890\"", "\"This is a test.\"", "\"Python is fun!\"", "\"This is a string with numbers 1234567890.\""]}, {"target_argument": "numbers", "change_to": "x", "original_function": "def func5(numbers: list):\n  x = 0\n  for num in numbers:\n    x += num\n  return (lambda x: x * 2)(x)", "changed_function": "def func5(x: list):\n  numbers = 0\n  for num in x:\n    numbers += num\n  return (lambda numbers: numbers * 2)(numbers)", "function_name": "func5", "inputs": ["[1, 2, 3, 4, 5]", "[10, 11, 12, 13, 14]", "[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]", "[0, 2, 4, 6, 8]"]}, {"target_argument": "a", "change_to": "x", "original_function": "def test(a: list):\n  x = a[0]\n  b = x + 1\n  for i in range(len(a)):\n    x = a[i]\n    b = b + x\n  return b", "changed_function": "def test(x: list):\n  a = x[0]\n  b = a + 1\n  for i in range(len(x)):\n    a = x[i]\n    b = b + a\n  return b", "function_name": "test", "inputs": ["[1, 2, 3, 4, 5]", "[10, 20, 30, 40, 50]", "[-1, -2, -3, -4, -5]", "[1, 1, 1, 1, 1]", "[0, 0, 0, 0, 0]"]}, {"target_argument": "x", "change_to": "y", "original_function": "def test2(x: int):\n  if x > 10:\n    y = x\n  else:\n    y = x + 1\n  if y < 20:\n    y = y + 2\n  return y", "changed_function": "def test2(y: int):\n  x = y\n  if x > 10:\n    y = x\n  else:\n    y = x + 1\n  if y < 20:\n    y = y + 2\n  return y'''", "function_name": "test2", "inputs": ["15", "5", "25", "10", "20"]}, {"target_argument": "n", "change_to": "x", "original_function": "def test4(n: bool):\n  x = 10\n  if n:\n    x = x + 5\n  else:\n    x = x - 5\n  return (lambda n: x + n)(False)", "changed_function": "def test4(x: bool):\n  n = 10\n  if x:\n    n = n + 5\n  else:\n    n = n - 5\n  return (lambda x: n + x)(x)\n\"\"\"\n\n\ndef Detour1(Fname):\n  if 'find_missing_number' in Fname:\n    print(\"Detour 1 triggered.\")\n    return find_missing_number", "function_name": "test4", "inputs": ["True", "False", "True", "False", "True"]}, {"target_argument": "s", "change_to": "a", "original_function": "def test5(s: tuple):\n  a = s[0]\n  if a == 0:\n    a = s[1]\n  else:\n    a = s[2]\n  return (lambda s: a + s[1])(s)", "changed_function": "def test5(a: tuple):\n  if a[0] == 0:\n    s = a[1]\n  else:\n    s = a[2]\n  return (lambda a: s[1] + a)(a)", "function_name": "test5", "inputs": ["(1, 2, 3)", "(0, 1, 2)", "(2, 3, 4)", "(0, 0, 0)", "(10, 20, 30)"]}, {"target_argument": "s", "change_to": "t", "original_function": "def func3(s: str):\n  t = 0\n  for t in s:\n    t = int(t)\n    if t%2 == 0:\n      t += 1\n  return t", "changed_function": "def func3(t: str):\n  s = 0\n  for s in t:\n    s = int(s)\n    if s%2 == 0:\n      s += 1\n  return s", "function_name": "func3", "inputs": ["\"12345\"", "\"67890\"", "\"13579\"", "\"24680\"", "\"10246\""]}, {"target_argument": "l", "change_to": "i", "original_function": "def func4(l: list):\n  i = []\n  for i in l:\n    if i > 10:\n      i.append(i)\n    return i", "changed_function": "def func4(i: list):\n  l = []\n  for i in l:\n    if i > 10:\n      l.append(i)\n    return l", "function_name": "func4", "inputs": ["[1,2,3,4,5,6,7,8,9,10,11,12,13,14]", "[100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400]", "[1,10,2,20,3,30,4,40,5,50,6,60,7,70]", "[50,60,70,80,90,100,110,120,130,140,150]", "[1,2,3,4,5,6,7,8,9,10,11,12]"]}, {"target_argument": "t", "change_to": "x", "original_function": "def func5(t: tuple):\n  x = 0\n  for x in t:\n    if x % 2 == 0:\n      x += 1\n  return x", "changed_function": "def func5(x: tuple):\n  t = 0\n  for t in x:\n    if t % 2 == 0:\n      t += 1\n  return t", "function_name": "func5", "inputs": ["(1,2,3,4,5)", "(6,7,8,9,10)", "(11,12,13,14,15)", "(1,3,5,7,9)", "(2,4,6,8,10)"]}, {"target_argument": "a", "change_to": "d", "original_function": "def sum_list(a: list):\n  b = 0\n  for i in range(len(a)):\n    if a[i] > 0:\n      b = b + a[i]\n  return b", "changed_function": "def sum_list(d: list):\n  a = 0\n  for i in range(len(d)):\n    if d[i] > 0:\n      a = a + d[i]\n  return a", "function_name": "sum_list", "inputs": ["[1, 2, 3, 4]", "[-1, 2, -3, 4]", "[5, 6, 7, 8]", "[-1, -2, -3, -4]", "[0, 1, 2, 3]"]}, {"target_argument": "a", "change_to": "x", "original_function": "def max_index(a: list):\n  index = 0\n  max_val = a[0]\n  for i in range(len(a)):\n    if a[i] > max_val:\n      max_val = a[i]\n      index = i\n  return index", "changed_function": "def max_index(x: list):\n  index = 0\n  max_val = x[0]\n  for i in range(len(x)):\n    if x[i] > max_val:\n      max_val = x[i]\n      index = i\n  return index", "function_name": "max_index", "inputs": ["[1, 2, 3, 4]", "[4, 3, 2, 1]", "[5, 1, 4, 3, 2]", "[1, 2, 3, 4, 5]", "[1, 2, 3, 1, 2, 3]"]}, {"target_argument": "a", "change_to": "x", "original_function": "def find_even(a: list):\n  even_nums = []\n  for i in range(len(a)):\n    if a[i] % 2 == 0:\n      even_nums.append(a[i])\n  return even_nums", "changed_function": "def find_even(x: list):\n  even_nums = []\n  a = (len(x))\n  for i in range(a):\n    if x[i] % 2 == 0:\n      even_nums.append(x[i])\n  return even_nums", "function_name": "find_even", "inputs": ["[1, 2, 3, 4]", "[5, 7, 9, 11]", "[2, 4, 6, 8, 10]", "[1, 3, 5, 7]", "[0, 2, 4, 6, 8]"]}, {"target_argument": "a", "change_to": "x", "original_function": "def count_occurrences(a: list):\n  x = {}\n  for i in a:\n    if i in x:\n      x[i] += 1\n    else:\n      x[i] = 1\n  return x", "changed_function": "def count_occurrences(x: list):\n  a = {}\n  for i in x:\n    if i in a:\n      a[i] += 1\n    else:\n      a[i] = 1\n  return a", "function_name": "count_occurrences", "inputs": ["[1, 2, 2, 3, 3, 3]", "[4, 4, 4, 5, 5, 5]", "[1, 2, 3, 4, 5, 6]", "[7, 8, 9, 10, 11, 12]", "[1, 1, 1, 2, 2, 2]"]}, {"target_argument": "a", "change_to": "z", "original_function": "def remove_duplicates(a: list):\n  b = []\n  for i in a:\n    if i not in b:\n      b.append(i)\n  return b", "changed_function": "def remove_duplicates(z: list):\n  a = []\n  for i in z:\n    if i not in a:\n      a.append(i)\n  return a", "function_name": "remove_duplicates", "inputs": ["[1, 2, 2, 3, 3, 3]", "[4, 4, 4, 5, 5, 5]", "[1, 2, 3, 4, 5, 6]", "[7, 8, 9, 10, 11, 12]", "[1, 1, 1, 2, 2, 2]"]}, {"target_argument": "b", "change_to": "x", "original_function": "def find_max(b: list):\n    max_so_far = b[0]\n    for x in b:\n        if x > max_so_far:\n            max_so_far = x\n    return max_so_far", "changed_function": "def find_max(x: list):\n    b = b[0]\n    b = x\n    for i in x:\n        if i > b:\n            b = i\n    return i", "function_name": "find_max", "inputs": ["[1, 2, 3, 4]", "[4, 3, 2, 1]", "[1, 2, 3, 4, 5]", "[5, 4, 3, 2, 1]", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"]}, {"target_argument": "a", "change_to": "y", "original_function": "def count_even(a: list):\n    count = 0\n    for x in a:\n        if x % 2 == 0:\n            count += 1\n    return count", "changed_function": "def count_even(y: list):\n    count = 0\n    a = len(y)\n    for x in range(a):\n        if y[x] % 2 == 0:\n            count += 1\n    return count", "function_name": "count_even", "inputs": ["[1, 2, 3, 4, 5]", "[2, 4, 6, 8]", "[1, 3, 5, 7]", "[2, 4, 6, 8, 10]", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]}, {"target_argument": "t", "change_to": "a", "original_function": "def sum_squares(t: list):\n    sum = 0\n    for a in t:\n        sum += a * a\n    return sum", "changed_function": "def sum_squares(a: list):\n    sum = 0\n    for t in a:\n        sum += t * t\n    return sum", "function_name": "sum_squares", "inputs": ["[1, 2, 3, 4, 5]", "[2, 4, 6, 8]", "[1, 3, 5, 7]", "[2, 4, 6, 8, 10]", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]}, {"target_argument": "str", "change_to": "s", "original_function": "def count_vowels(str: str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for s in str:\n        if s in vowels:\n            count += 1\n    return count", "changed_function": "def count_vowels(s: str):\n    vowels = 'aeiouAEIOU'\n    str = 0\n    for char in s:\n        if char in vowels:\n            str += 1\n    return str", "function_name": "count_vowels", "inputs": ["'hello'", "'world'", "'python'", "'programming'", "'javascript'"]}, {"target_argument": "x", "change_to": "a", "original_function": "def filter_even(x: list):\n    return list(filter(lambda x: x % 2 == 0, x))", "changed_function": "def filter_even(a: list):\n    x = list(filter(lambda a: a % 2 == 0, a))\n    return x", "function_name": "filter_even", "inputs": ["[1, 2, 3, 4, 5]", "[2, 4, 6, 8]", "[1, 3, 5, 7]", "[2, 4, 6, 8, 10]", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]}, {"target_argument": "n", "change_to": "k", "original_function": "def factorial(n: int):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "changed_function": "def factorial(k: int):\n    n = 0\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "function_name": "factorial", "inputs": ["5", "10", "3", "7", "1"]}, {"target_argument": "l", "change_to": "x", "original_function": "def reverse_list(l: list):\n    return l[::-1]", "changed_function": "def reverse_list(x: list):\n    return x[::-1]", "function_name": "reverse_list", "inputs": ["[1, 2, 3, 4, 5]", "[\u201capple\u201d, \u201cbanana\u201d, \u201ccherry\u201d]", "[True, False, True]", "[1.1, 2.2, 3.3]", "[\u2018a\u2019, \u2018b\u2019, \u2018c\u2019, \u2018d\u2019, \u2018e\u2019]"]}, {"target_argument": "n", "change_to": "t", "original_function": "def fibonacci(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "changed_function": "def fibonacci(t: int):\n    if t <= 1:\n        return t\n    else:\n        return fibonacci(t-1) + fibonacci(t-2)", "function_name": "fibonacci", "inputs": ["5", "10", "8", "12", "20"]}, {"target_argument": "nums", "change_to": "x", "original_function": "def find_max(nums: list):\n    if len(nums) == 0:\n        return None\n    max_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num", "changed_function": "def find_max(x: list):\n    nums = len(x)\n    if nums == 0:\n        return None\n    max_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num", "function_name": "find_max", "inputs": ["[1, 2, 3, 4, 5]", "[10, 5, 8, 2, 1]", "[-1, -2, -3, -4, -5]", "[0, 0, 0, 0, 0]", "[100, 200, 300, 400, 500]"]}, {"target_argument": "l", "change_to": "x", "original_function": "def count_even_odd(l: list):\n    even = 0\n    odd = 0\n    for i in l:\n        if i % 2 == 0:\n            even = even + 1\n        else:\n            odd = odd + 1\n    return even, odd", "changed_function": "def count_even_odd(x: list):\n    even = 0\n    odd = 0\n    for i in x:\n        if i % 2 == 0:\n            even = even + 1\n        else:\n            odd = odd + 1\n    return even, odd", "function_name": "count_even_odd", "inputs": ["[1, 2, 3, 4, 5]", "[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"]}, {"target_argument": "s", "change_to": "x", "original_function": "def is_pangram(s: str):\n    s = s.lower()\n    for c in range(ord('a'), ord('z') + 1):\n        if chr(c) not in s:\n            return False\n    return True", "changed_function": "def is_pangram(x: str):\n    s = x.lower()\n    for c in range(ord('a'), ord('z') + 1):\n        if chr(c) not in s:\n            return False\n    return True", "function_name": "is_pangram", "inputs": ["\"The quick brown fox jumps over the lazy dog.\"", "\"The quick brown fox jumps over the lazy fox.\"", "\"abcdefghigklmnopqrstuvwxyz\"", "\"AbCdeFgHiJkLmNoPqRsTuVwXyZ\"", "\"This is not a pangram.\""]}, {"target_argument": "nums", "change_to": "a", "original_function": "def find_max_sum_subarray(nums: list):\n    n = len(nums)\n    max_so_far = nums[0]\n    curr_max = nums[0]\n    for i in range(1, n):\n        curr_max = max(nums[i], curr_max + nums[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far", "changed_function": "def find_max_sum_subarray(a: list):\n    nums = len(a)\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, nums):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far", "function_name": "find_max_sum_subarray", "inputs": ["[1, 2, 3, -2, 5]", "[-2, 1, -3, 4, -1, 2, 1, -5, 4]", "[1, 2, -1, -2, 3]", "[5, -1, 2, 3, -2]", "[-1, 2, 3, 4, -5]"]}, {"target_argument": "x", "change_to": "y", "original_function": "def process_list(x: list[int]):\n  y = 0\n  for i in range(len(x)):\n    if x[i] % 2 == 0:\n      y += x[i]\n  return y", "changed_function": "def process_list(y: list[int]):\n  x = 0\n  for i in range(len(y)):\n    if y[i] % 2 == 0:\n      x += y[i]\n  return x", "function_name": "process_list", "inputs": ["[-2, 4, 1, 3]", "[1, 3, 5, 7]", "[1, 2, 3, 4, 5]", "[10, 12, 14]", "[1, 2, 3, 4, 5, 6, 7, 8]"]}, {"target_argument": "n", "change_to": "m", "original_function": "def count_even(n: int):\n  m = 0\n  for i in range(n):\n    if i % 2 == 0:\n      m += 1\n  return m", "changed_function": "def count_even(m: int):\n  n = 0\n  for i in range(m):\n    if i % 2 == 0:\n      n += 1\n  return n", "function_name": "count_even", "inputs": ["5", "10", "15", "20", "25"]}, {"target_argument": "s", "change_to": "t", "original_function": "def check_substring(s: str):\n  t = 'hello'\n  return t in s", "changed_function": "returndef convert(y: str):", "function_name": "check_substring", "inputs": ["'helloworld'", "'goodbye'", "'this is a test string'", "'hello world'", "'hello, world'"]}, {"target_argument": "n", "change_to": "m", "original_function": "def reverse_list(n: list[int]):\n  m = n[::-1]\n  return m", "changed_function": "returndef count_it", "function_name": "reverse_list", "inputs": ["[1, 2, 3, 4]", "[5, 6, 7, 8]", "[9, 10, 11, 12]", "[13, 14, 15, 16]", "[17, 18, 19, 20]"]}, {"target_argument": "s", "change_to": "t", "original_function": "def find_first_even(s: list[int]):\n  t = (lambda x: x if x % 2 == 0 else None)(s[0])\n  return t", "changed_function": "def find_first_even(t: list[int]):\n  s = (lambda x: x if x % 2 == 0 else None)(t[0])\n  return s", "function_name": "find_first_even", "inputs": ["[1, 2, 3, 4]", "[5, 6, 7, 8]", "[9, 10, 11, 12]", "[13, 14, 15, 16]", "[17, 18, 19, 20]"]}, {"target_argument": "s", "change_to": "i", "original_function": "def sum_digits_square(s: int):\n  if s < 10:\n    return s * s\n  else:\n    sum = 0\n    while s > 0:\n      sum += (s % 10) * (s % 10)\n      s //= 10\n    return sum_digits_square(sum)", "changed_function": "def sum_digits_square(i: int):\n  if i < 10:\n    return i * i\n  else:\n    sum = 0\n    while i > 0:\n      sum += (i % 10) * (i % 10)\n      i //= 10\n    return sum_digits_square(sum)", "function_name": "sum_digits_square", "inputs": ["5", "1234", "100", "25", "36"]}, {"target_argument": "b", "change_to": "f", "original_function": "def count_fives(b: list):\n  f = 0\n  for i in range(len(b)):\n    if b[i] == 5:\n      f += 1\n  return f", "changed_function": "def count_fives(f: list):\n  b = 0\n  for i in range(len(f)):\n    if f[i] == 5:\n      b += 1\n  return b", "function_name": "count_fives", "inputs": ["[5, 1, 2, 5, 3, 4]", "[5, 5, 5, 5]", "[1, 2, 3, 4]", "[1, 2, 5, 3, 4, 5]", "[5, 5]"]}, {"target_argument": "l", "change_to": "c", "original_function": "def count_even_length_subsequences(l: list):\n  c = 0\n  for i in range(len(l)):\n    for j in range(i + 1, len(l) + 1):\n      if (j - i) % 2 == 0:\n        c += 1\n  return c", "changed_function": "def count_even_length_subsequences(c: list):\n  l = 0\n  for i in range(len(c)):\n    for j in range(i + 1, len(c) + 1):\n      if (j - i) % 2 == 0:\n        l += 1\n  return l", "function_name": "count_even_length_subsequences", "inputs": ["[1, 2, 3]", "[4, 5, 6, 7, 8]", "[1, 2, 3, 4, 5]", "[10, 20, 30]", "[9, 8, 7]"]}, {"target_argument": "x", "change_to": "y", "original_function": "def fun1(x: int):\n  y = x + 1\n  return x + y", "changed_function": "returndef fun1(x: list):", "function_name": "fun1", "inputs": ["1", "2", "3", "4", "5"]}, {"target_argument": "y", "change_to": "x", "original_function": "def fun2(y: str):\n  x = y + y\n  return (lambda x: x + x)(x)", "changed_function": "def fun2(x: str):\n  y = x + x\n  return (lambda y: y + y)(y)", "function_name": "fun2", "inputs": ["'a'", "'b'", "'c'", "'d'", "'e'"]}, {"target_argument": "s", "change_to": "t", "original_function": "def fun4(s: str):\n  t = s\n  t = t.lower()\n  t = t.replace('a', 'b')\n  return t", "changed_function": "def fun4(t: str):\n  s = t\n  s = s.lower()\n  s = s.replace('a', 'b')\n  return s", "function_name": "fun4", "inputs": ["'Hello world!'", "'This is a test.'", "'1234567890'", "'The quick brown fox jumps over the lazy dog.'", "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"]}, {"target_argument": "x", "change_to": "y", "original_function": "def fun5(x: list):\n  y = x[:2]\n  return y", "changed_function": "def fun5(y: list):\n  x = y[:2]\n  return x", "function_name": "fun5", "inputs": ["[1, 2, 3, 4, 5]", "[6, 7, 8, 9, 10]", "[11, 12, 13, 14, 15]", "[16, 17, 18, 19, 20]", "[21, 22, 23, 24, 25]"]}, {"target_argument": "lst", "change_to": "a", "original_function": "def count(lst):\n    res = 0\n    for i in lst:\n        if i > 5:\n            res += i\n    return res", "changed_function": "def count(a):\n    res = 0\n    for i in a:\n        if i > 5:\n            res += i\n    return res", "function_name": "count", "inputs": ["[1, 2, 3, 4, 5, 6, 7, 8, 9]", "[1, 2, 3]", "[6, 7, 8]", "[10, 11, 12, 13]", "[2, 4, 6, 8, 10, 12, 14]"]}, {"target_argument": "lst", "change_to": "a", "original_function": "def filter_even(lst):\n    return [x for x in lst if x % 2 == 0]", "changed_function": "def filter_even(a):\n    return [x for x in a if x % 2 == 0]", "function_name": "filter_even", "inputs": ["[1, 2, 3, 4, 5, 6]", "[2, 4, 6, 8, 10]", "[1, 3, 5, 7, 9]", "[10, 20, 30, 40]", "[1, 2, 3, 4, 5, 6, 7, 8, 9]"]}, {"target_argument": "n", "change_to": "a", "original_function": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "changed_function": "def factorial(a):\n    if a == 0:\n        return 1\n    else:\n        return a * factorial(a - 1)", "function_name": "factorial", "inputs": ["5", "10", "0", "7", "1"]}, {"target_argument": "arr", "change_to": "a", "original_function": "def find_max(arr):\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return max_val", "changed_function": "def find_max(a):\n    arr = a[0]\n    max_val = arr[0]\n    for i in range(1, len(a)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return max_val", "function_name": "find_max", "inputs": ["[1, 2, 3, 4, 5]", "[10, 2, 3, 4, 5]", "[1, 2, 3, 4, 15]", "[1, 2, 3, 4, 5, 6, 7, 8, 9]", "[100, 20, 30, 40, 50]"]}, {"target_argument": "nums", "change_to": "a", "original_function": "def is_sorted(nums):\n    for i in range(1, len(nums)):\n        if nums[i] < nums[i-1]:\n            return False\n    return True", "changed_function": "def is_sorted(a):\n    for i in range(1, len(a)):\n        if a[i] < a[i-1]:\n            return False\n    return True", "function_name": "is_sorted", "inputs": ["[1, 2, 3, 4, 5]", "[1, 2, 3, 5, 4]", "[10, 20, 30, 40, 50]", "[5, 4, 3, 2, 1]", "[1, 3, 2, 4, 5]"]}, {"target_argument": "n", "change_to": "x", "original_function": "def count_words_greater_length(n: int):\n    s = 'This is a string with several words'\n    words = s.split()\n    x = 0\n    for word in words:\n        if len(word) > n:\n            x += 1\n    return x", "changed_function": "def count_words_greater_length(x: int):\n    n = 'This is a string with several words'\n    words = n.split()\n    s = 0\n    for word in words:\n        if len(word) > x:\n            s += 1\n    return s", "function_name": "count_words_greater_length", "inputs": ["3", "5", "1", "2", "10"]}, {"target_argument": "s", "change_to": "n", "original_function": "def find_all_even_nums(s: int):\n    n = 0\n    nums = []\n    while n < s:\n        if n % 2 == 0:\n            nums.append(n)\n        n += 1\n    return nums", "changed_function": "def find_all_even_nums(n: int):\n    s = 0\n    nums = []\n    while s < n:\n        if s % 2 == 0:\n            nums.append(s)\n        s += 1\n    return nums", "function_name": "find_all_even_nums", "inputs": ["10", "12", "20", "1", "5"]}, {"target_argument": "n", "change_to": "x", "original_function": "def reverse_string(n: str):\n    x = ''\n    for i in range(len(n) - 1, -1, -1):\n        x += n[i]\n    return x", "changed_function": "def reverse_string(x: str):\n    n = ''\n    for i in range(len(x) - 1, -1, -1):\n        n += x[i]\n    return n", "function_name": "reverse_string", "inputs": ["'hello'", "'world'", "'python'", "'programming'", "'data science'"]}, {"target_argument": "string", "change_to": "x", "original_function": "def count_vowels(string: str):\n    vowels = 'aeiouAEIOU'\n    x = 0\n    for char in string:\n        if char in vowels:\n            x += 1\n    return x", "changed_function": "def count_vowels(x: str):\n    vowels = 'aeiouAEIOU'\n    string = 0\n    for char in x:\n        if char in vowels:\n            string += 1\n    return string", "function_name": "count_vowels", "inputs": ["'hello world'", "'python is fun'", "'data science'", "'coding is cool'", "'artificial intelligence'"]}, {"target_argument": "arr", "change_to": "x", "original_function": "def check_list(arr: list):\n  x = len(arr)\n  result = []\n  for i in range(x):\n    if arr[i] == 0:\n      result.append(i)\n  return result\n", "changed_function": "returndef searchForSomething():", "function_name": "check_list", "inputs": ["[1,2,3]", "[0,2,3]", "[0,2,0]", "[1,2,0,3,4,0]", "[0,0,0,0,0]"]}, {"target_argument": "nums", "change_to": "k", "original_function": "def sum_of_squares(nums: list):\n  k = 0\n  for num in nums:\n    k += num * num\n  return k\n", "changed_function": "def sum_of_squares(k: list):\n  nums = 0\n  for num in k:\n    nums += num * num\n  return nums", "function_name": "sum_of_squares", "inputs": ["[1,2,3,4]", "[1,0,1,0]", "[1,1,1,1]", "[0,0,0,0]", "[1,2,3]"]}, {"target_argument": "numbers", "change_to": "s", "original_function": "def find_min(numbers: list):\n  s = numbers[0]\n  for number in numbers:\n    if number < s:\n      s = number\n  return s\n", "changed_function": "def find_min(s: list):\n  numbers = s[0]\n  for number in s:\n    if number < numbers:\n      numbers = number\n  return numbers", "function_name": "find_min", "inputs": ["[5,2,8,1,9]", "[10,10,10,10,10]", "[1,2,3,4,5]", "[1,1,2,2,2]", "[5,4,3,2,1]"]}, {"target_argument": "str", "change_to": "a", "original_function": "def count_vowels(str: str):\n  a = 0\n  vowels = 'aeiouAEIOU'\n  for char in str:\n    if char in vowels:\n      a += 1\n  return a\n", "changed_function": "def count_vowels(a: str):\n  count = 0\n  vowels = 'aeiouAEIOU'\n  for char in a:\n    if char in vowels:\n      count += 1\n  return count", "function_name": "count_vowels", "inputs": ["\"hello world\"", "\"python\"", "\"programming\"", "\"aeiou\"", "\"12345\""]}, {"target_argument": "str", "change_to": "n", "original_function": "def reverse_string(str: str):\n  n = ''\n  for char in str[::-1]:\n    n += char\n  return n\n", "changed_function": "returndef qu", "function_name": "reverse_string", "inputs": ["\"hello\"", "\"world\"", "\"python\"", "\"12345\"", "\"abcde\""]}, {"target_argument": "s", "change_to": "i", "original_function": "def check_string(s: str):\n    if len(s) == 0:\n        return False\n    for i in s:\n        if i.isdigit():\n            return True\n    return False", "changed_function": "def check_string(i: str):\n    if len(i) == 0:\n        return False\n    for s in i:\n        if s.isdigit():\n            return True\n    return False", "function_name": "check_string", "inputs": ["''", "'abc'", "'123'", "'a123'", "'1a23'"]}, {"target_argument": "numbers", "change_to": "i", "original_function": "def sum_even(numbers: list):\n    total = 0\n    for i in numbers:\n        if i % 2 == 0:\n            total += i\n    return total", "changed_function": "def map_1(x):\n    if x == 5:\n        return 'apple'\n    else:\n        return 'pie'", "function_name": "sum_even", "inputs": ["[1, 2, 3, 4, 5]", "[2, 4, 6, 8]", "[1, 3, 5, 7]", "[1, 2, 3, 4, 5, 6, 7, 8]", "[10, 20, 30]"]}, {"target_argument": "a", "change_to": "x", "original_function": "def find_max(a: list):\n    if len(a) == 0:\n        return None\n    max_value = a[0]\n    for i in range(1, len(a)):\n        if a[i] > max_value:\n            max_value = a[i]\n    return max_value", "changed_function": "def find_max(x: list):\n    if len(x) == 0:\n        return None\n    max_value = x[0]\n    for i in range(1, len(x)):\n        if x[i] > max_value:\n            max_value = x[i]\n    return max_value", "function_name": "find_max", "inputs": ["[1, 2, 3, 4, 5]", "[2, 4, 6, 8]", "[1, 3, 5, 7]", "[1, 2, 3, 4, 5, 6, 7, 8]", "[10, 20, 30]"]}, {"target_argument": "s", "change_to": "k", "original_function": "def count_vowels(s: str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count", "changed_function": "def count_vowels(k: str):\n    vowels = 'aeiouAEIOU'\n    s = 0\n    for i in k:\n        if i in vowels:\n            s += 1\n    return s", "function_name": "count_vowels", "inputs": ["'hello'", "'world'", "'programming'", "'python'", "'javascript'"]}, {"target_argument": "nums", "change_to": "n", "original_function": "def find_missing_number(nums: list):\n    n = len(nums) + 1\n    total_sum = (n * (n + 1)) // 2\n    for i in nums:\n        total_sum -= i\n    return total_sum", "changed_function": "def find_missing_number(n: list):\n    n_length = len(n) + 1\n    total_sum = (n_length * (n_length + 1)) // 2\n    for i in n:\n        total_sum -= i\n    return total_sum", "function_name": "find_missing_number", "inputs": ["[1, 2, 3, 4, 6]", "[1, 3, 5, 7, 9]", "[1, 2, 4, 5, 6]", "[1, 2, 3, 4, 5, 7, 8]", "[1, 2, 3, 5, 6, 7, 8, 9]"]}]