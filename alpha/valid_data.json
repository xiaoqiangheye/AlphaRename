[{"target_argument": "x", "change_to": "z", "original_function": "def foo(x: int):\n  return (lambda x: x + 1)(x) + (lambda x: x * 2)(x)", "changed_function": "def foo(z: int):\n  return (lambda x: x + 1)(z) + (lambda x: x * 2)(z)"}, {"target_argument": "a", "change_to": "b", "original_function": "def bar(a: int, b: float):\n  return (lambda a: a * b)(a) + (lambda x: x + a)(b)", "changed_function": "def bar(b: int, a: float):\n  return (lambda c: c * a)(b) + (lambda x: x + b)(a)"}, {"target_argument": "y", "change_to": "w", "original_function": "def baz(x: int, y: str):\n  return (lambda y: x + len(y))(y) + (lambda x: x * len(y))(x)", "changed_function": "def baz(x: int, w: str):\n  return (lambda y: x + len(y))(w) + (lambda x: x * len(w))(x)"}, {"target_argument": "func", "change_to": "my_func", "original_function": "def apply_func(func: callable, x: int):\n  return func(x) + (lambda func: func(x + 1))(func)", "changed_function": "def apply_func(my_func: callable, x: int):\n  return my_func(x) + (lambda func: func(x + 1))(my_func)"}, {"target_argument": "f", "change_to": "g", "original_function": "def higher_order(f: callable, x: int):\n  return f(x) + (lambda f: f(lambda y: y * 2)(x))(f)", "changed_function": "def higher_order(g: callable, x: int):\n  return g(x) + (lambda f: f(lambda y: y * 2)(x))(g)"}, {"target_argument": "x", "change_to": "p", "original_function": "def nested_lambda(x: int):\n  return (lambda x: (lambda x: x * 2)(x))(x)", "changed_function": "def nested_lambda(p: int):\n  return (lambda x: (lambda x: x * 2)(x))(p)"}, {"target_argument": "i", "change_to": "j", "original_function": "def complex_example(i:int):\n  return (lambda i: i + 1)(i) + (lambda j: j*2)(i) + (lambda k: (lambda i: i +k)(i))(i)", "changed_function": "def complex_example(j:int):\n  return (lambda i: i + 1)(j) + (lambda j: j*2)(j) + (lambda k: (lambda i: i +k)(j))(j)"}, {"target_argument": "x", "change_to": "z", "original_function": "def foo(x: int):\n    def bar(y: int):\n        return x + y\n    def baz(x: int):\n        return (lambda x: x * x)(x) + bar(x)\n    return baz(5)", "changed_function": "def foo(z: int):\n    def bar(y: int):\n        return z + y\n    def baz(x: int):\n        return (lambda x: x * x)(x) + bar(x)\n    return baz(5)"}, {"target_argument": "a", "change_to": "b", "original_function": "def foo(a: int):\n    def inner(a: float, c: int):\n        return (lambda a: a * c)(a) + a\n    return inner(a, 2) + (lambda a: a * a)(a)", "changed_function": "def foo(b: int):\n    def inner(a: float, c: int):\n        return (lambda a: a * c)(a) + a\n    return inner(b, 2) + (lambda a: a * a)(b)"}, {"target_argument": "y", "change_to": "w", "original_function": "def foo(x: int, y: int):\n    def bar(y: str, z: int):\n        return y + str(z + x)\n    def baz(y: float):\n        return (lambda y: y * y)(y) * y\n    return bar('hello', y) + baz(y)", "changed_function": "def foo(x: int, w: int):\n    def bar(y: str, z: int):\n        return y + str(z + x)\n    def baz(y: float):\n        return (lambda y: y * y)(y) * y\n    return bar('hello', w) + baz(w)"}, {"target_argument": "p", "change_to": "q", "original_function": "def foo(p: int, r: float):\n    def inner1(p:str,s:int):\n        return p + str(s)\n    def inner2(p: int):\n      return (lambda p: p * r)(p)\n    return inner1('test', p) + inner2(p)", "changed_function": "def foo(q: int, r: float):\n    def inner1(p:str,s:int):\n        return p + str(s)\n    def inner2(p: int):\n      return (lambda p: p * r)(p)\n    return inner1('test', q) + inner2(q)"}, {"target_argument": "k", "change_to": "m", "original_function": "def foo(k: int, j: float):\n    def bar(k: str, l: int):\n        return k + str(l)\n    def baz(k: float, j: int):\n        return (lambda k: k * j)(k) + j\n    return bar('world', k) + baz(k, j)", "changed_function": "def foo(m: int, j: float):\n    def bar(k: str, l: int):\n        return k + str(l)\n    def baz(k: float, j: int):\n        return (lambda k: k * j)(k) + j\n    return bar('world', m) + baz(m, j)"}]